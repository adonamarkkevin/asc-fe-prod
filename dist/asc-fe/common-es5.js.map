{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/affiliation/affiliation.component.scss","webpack:///src/app/modules/pages/maintenance/type-of-document/type-of-document.component.ts","webpack:///src/app/modules/pages/maintenance/category/category.component.ts","webpack:///src/app/modules/pages/maintenance/affiliation/affiliation.component.html","webpack:///src/app/modules/pages/accounting/list-payment/list-payment.component.ts","webpack:///src/app/modules/pages/account/account-routing.module.ts","webpack:///src/app/modules/pages/maintenance/product/product-routing.module.ts","webpack:///src/app/modules/pages/maintenance/brands/brands.module.ts","webpack:///src/app/modules/pages/maintenance/payment-type/payment-type.component.html","webpack:///src/app/core/services/date.service.ts","webpack:///src/app/modules/pages/account/user-role/user-role.module.ts","webpack:///src/app/core/models/type-of-execution.model.ts","webpack:///src/app/core/models/voucher.model.ts","webpack:///src/app/modules/pages/accounting/list-payment/list-payment.component.scss","webpack:///src/app/modules/pages/maintenance/payment-type/payment-type.component.scss","webpack:///src/app/modules/pages/accounting/list-payment/list-payment.module.ts","webpack:///src/app/modules/pages/maintenance/type-of-document/type-of-document.component.scss","webpack:///src/app/modules/pages/maintenance/payment-type/payment-type.component.ts","webpack:///src/app/modules/pages/accounting/accounting-routing.module.ts","webpack:///src/app/modules/pages/account/user-role/user-role-routing.module.ts","webpack:///src/app/modules/pages/maintenance/type-of-reason/type-of-reason.component.scss","webpack:///src/app/modules/pages/maintenance/affiliation/affiliation.component.ts","webpack:///src/app/modules/pages/accounting/list-payment/list-payment.component.html","webpack:///src/app/modules/pages/account/user-role/user-role.component.ts","webpack:///src/app/core/models/s1-settlement-or-expiration-period.model.ts","webpack:///src/app/modules/pages/maintenance/type-of-document/type-of-document.component.html","webpack:///src/app/modules/pages/account/user-role/user-role.component.scss","webpack:///src/app/modules/pages/account/account.module.ts","webpack:///src/app/modules/pages/maintenance/category/category.component.html","webpack:///src/app/modules/pages/maintenance/type-of-reason/type-of-reason.component.ts","webpack:///src/app/modules/pages/maintenance/category/category.component.scss","webpack:///src/app/modules/pages/maintenance/product/product.module.ts","webpack:///src/app/modules/pages/accounting/accounting.module.ts","webpack:///src/app/modules/pages/maintenance/type-of-reason/type-of-reason.component.html","webpack:///src/app/modules/pages/account/user-role/user-role.component.html","webpack:///src/app/modules/pages/accounting/list-payment/list-payment-routing.module.ts","webpack:///src/app/modules/pages/maintenance/brands/brands-routing.module.ts","webpack:///src/app/core/models/report.model.ts"],"names":["TypeOfDocumentComponent","apiService","formBuilder","sweetAlertService","displayedColumns","typeOfDocument","typeOfDocumentList","statusList","isChecked","hasInput","getList","setFormValidator","findAll","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","save","undefined","success","err","error","resetFormValidator","findById","idForUpdate","update","status","ACTIVE","typeOfDocumentForm","group","description","required","dateOfLaunchEnable","expiresOnEnable","basedOnEnable","variantEnable","remarksEnable","inputEnable","markAsUntouched","markAsPristine","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","deleteById","id","customSuccessMessage","selector","template","CategoryComponent","category","categoryList","isExist","categoryName","filter","cn","length","customErrorMessage","categoryForm","ListPaymentComponent","router","paymentList","pageSize","pageNo","currentPage","totalItems","pageSizeOptions","doFilter","trim","toLocaleLowerCase","getS1PaymentList","endpoint","accountingPaymentForApprovals","console","log","event","pageIndex","navigate","routes","path","children","USER_ROLE","loadChildren","m","UserRoleModule","USER_REGISTRATION","UserRegistrationModule","UPDATE_USER","USER_PROFILE","UserProfileModule","USER_LIST","UserListModule","AccountRoutingModule","imports","forChild","exports","component","ProductRoutingModule","BrandsModule","declarations","DateService","datepipe","Date","transform","providedIn","TypeOfExecution","Voucher","ListPaymentModule","PaymentTypeComponent","paymentType","paymentTypeList","paymentTypeForm","paymentDescription","amount","bankBranch","bankName","controlNo","fundTransferDate","promisorryDate","referenceNo","PAYMENTS","PaymentsModule","LIST_PAYMENT","ADD_PAYMENT","AddPaymentModule","UPDATE_PAYMENT","VOUCHER_ENROLLMENT","CompanyVoucherEnrollmentModule","VOUCHER_REPLENISHMENT","CompanyVoucherFundModule","REPORTS","ReportsModule","ADD_PENALTY","AddPenaltyModule","UPDATE_PENALTY","VOUCHER_MONITORING","VoucherBrandMonitoringModule","OR_PREPARATION","OrPreparationModule","AccountingRoutingModule","UserRoleRoutingModule","AffiliationComponent","yesNoList","affiliation","affiliationList","member","toString","setValue","affiliationForm","param","selected","UserRoleComponent","roleList","userRole","userRoleList","roles","name","userRoleForm","S1SettlementOrExpirationPeriod","AccountModule","TypeOfReasonComponent","typeOfReason","typeOfReasonList","typeOfReasonForm","reason","ProductModule","AccountingModule","ListPaymentRoutingModule","BrandsRoutingModule","Report"],"mappings":"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","file":"common-es5.js","sourcesContent":["export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvbWFpbnRlbmFuY2UvYWZmaWxpYXRpb24vYWZmaWxpYXRpb24uY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { TypeOfDocument } from '@models';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { FormListComponent } from '@fragments';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-type-of-document',\r\n  templateUrl: './type-of-document.component.html',\r\n  styleUrls: ['./type-of-document.component.scss']\r\n})\r\nexport class TypeOfDocumentComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<TypeOfDocument>;\r\n  displayedColumns: string[] = ['typeOfDocumentDesc', 'dateOfLaunchEnable', 'expiresOnEnable', 'basedOnEnable', 'variantEnable', 'remarksEnable', 'inputEnable', 'status'];\r\n  \r\n  typeOfDocument = new TypeOfDocument();\r\n  typeOfDocumentList = [];\r\n  statusList = [...STATUSES];\r\n\r\n  isChecked = false;\r\n\r\n  typeOfDocumentForm: FormGroup;\r\n  hasInput = false;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.typeOfDocument).subscribe((res: any) => {\r\n      this.typeOfDocumentList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<TypeOfDocument>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    this.apiService.save(ENDPOINTS.typeOfDocument, this.typeOfDocument).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  getTypeOfDocument(): void {\r\n    this.apiService.findById(ENDPOINTS.typeOfDocument, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.typeOfDocument = res.responseData.data;\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.typeOfDocument, this.typeOfDocument).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setCheckboxValue() {\r\n    this.isChecked = !this.isChecked;\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.typeOfDocument.status = COMMON_FUNCTION.ACTIVE;\r\n    this.typeOfDocumentForm = this.formBuilder.group({\r\n      description: ['', Validators.required],\r\n      dateOfLaunchEnable: [''],\r\n      expiresOnEnable: [''],\r\n      basedOnEnable: [''],\r\n      variantEnable: [''],\r\n      remarksEnable: [''],\r\n      inputEnable: [''],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.typeOfDocument = new TypeOfDocument();\r\n    this.typeOfDocument.status = COMMON_FUNCTION.ACTIVE;\r\n    this.typeOfDocumentForm.markAsUntouched();\r\n    this.typeOfDocumentForm.markAsPristine();\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this type of document?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.typeOfDocument, this.typeOfDocument.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Type of document successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\r\nimport { Category } from '@models';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-category',\r\n  templateUrl: './category.component.html',\r\n  styleUrls: ['./category.component.scss']\r\n})\r\nexport class CategoryComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<Category>;\r\n  displayedColumns: string[] = ['categoryDescription', 'status'];\r\n  statusList = [...STATUSES];\r\n\r\n  category = new Category();\r\n  categoryList = [];\r\n  isExist = false;\r\n  categoryForm: FormGroup;\r\n\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getList();\r\n    this.setFormValidator();\r\n    // this.getProductList();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.category).subscribe((res: any) => {\r\n      this.categoryList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<Category>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    this.apiService.save(ENDPOINTS.category, this.category).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.resetFormValidator(),\r\n          this.getList();\r\n      }\r\n    )\r\n  }\r\n\r\n  // not in used\r\n  checkCategoryIfExisting(categoryName): void {\r\n    let category = [];\r\n    this.apiService.findAll(ENDPOINTS.category).subscribe(\r\n      (res: any) => {\r\n        category = res.responseData.data;\r\n        category = category.filter(cn => cn.description === categoryName);\r\n        if (category.length > 0) {\r\n          this.sweetAlertService.customErrorMessage('Category name already exist.');\r\n        } else {\r\n          if (this.category.id > 0) {\r\n            this.update();\r\n          } else {\r\n            this.save();\r\n          }\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  getCategory(): void {\r\n    this.apiService.findById(ENDPOINTS.category, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.category = res.responseData.data;\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.category, this.category).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.category.status = COMMON_FUNCTION.ACTIVE;\r\n    this.categoryForm = this.formBuilder.group({\r\n      description: ['', Validators.required],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.category = new Category();\r\n    this.category.status = COMMON_FUNCTION.ACTIVE;\r\n    this.categoryForm.markAsUntouched();\r\n    this.categoryForm.markAsPristine();\r\n  }\r\n\r\n  delete() {\r\n\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this company?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.category, this.category.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Category successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }, (err: any) => {\r\n            this.sweetAlertService.error(err);\r\n          }, () => {\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n  // getProductList() {\r\n  //   this.apiService.findAll(ENDPOINTS.product).subscribe((res: any) => {\r\n  //     this.productList = res.responseData.data.filter((product) => product.status === COMMON_FUNCTION.ACTIVE);\r\n  //   });\r\n  // }\r\n\r\n  // compareProduct(value: any, selected: any): boolean {\r\n  //   if (value && selected) {\r\n  //     return value.description === selected.description;\r\n  //   }\r\n  // }\r\n\r\n}\r\n","export default \"<form>\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12 title\\\">\\r\\n        <mat-label>\\r\\n          <mat-icon>groups</mat-icon> Member's Affiliation\\r\\n        </mat-label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <hr>\\r\\n\\r\\n    <form [formGroup]=\\\"affiliationForm\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Member's Affiliation <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <input matInput [(ngModel)]=\\\"affiliation.description\\\" name=\\\"description\\\" formControlName=\\\"description\\\">\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Member</mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"affiliation.member\\\" name=\\\"member\\\" formControlName=\\\"member\\\"\\r\\n            [compareWith]=\\\"compareMember\\\">\\r\\n            <mat-option *ngFor=\\\"let i of yesNoList\\\" [value]=\\\"i\\\">\\r\\n              {{ i }}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\" *ngIf=\\\"affiliation.id\\\">\\r\\n          <mat-label>Status</mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"affiliation.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n            <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n              {{i.status}}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n    </form>\\r\\n\\r\\n    <app-form-action-buttons [childObject]=\\\"affiliation\\\" [childForm]=\\\"affiliationForm\\\" (saveFunction)=\\\"save()\\\"\\r\\n      (updateFunction)=\\\"confirmUpdate()\\\" (cancelFunction)=\\\"resetFormValidator()\\\" (deleteFunction)=\\\"delete()\\\"></app-form-action-buttons>\\r\\n    <br>\\r\\n    <app-form-list [dataSource]=\\\"dataSource\\\" [displayedColumns]=\\\"displayedColumns\\\"\\r\\n      (selectInListFunction)=\\\"getAffiliation()\\\"></app-form-list>\\r\\n\\r\\n  </div>\\r\\n</form>\\r\\n\";","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\nimport { Payment } from '@models';\r\nimport { ENDPOINTS } from '@shared';\r\nimport { ApiService } from '@services';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-list-payment',\r\n  templateUrl: './list-payment.component.html',\r\n  styleUrls: ['./list-payment.component.scss']\r\n})\r\nexport class ListPaymentComponent implements OnInit {\r\n\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  @ViewChild(MatTable, { static: false }) table: MatTable<Object>;\r\n  dataSource: MatTableDataSource<Payment>\r\n  displayedColumns: string[] = ['referenceCode', 'typeOfApplication', 'brand', 'typeOfMedium', 'companyName', 'paymentStatus'];\r\n  paymentList = [];\r\n  pageSize = 10;\r\n  pageNo = 0;\r\n  currentPage = 1;\r\n  totalItems = 0;\r\n  pageSizeOptions: number[] = [10, 20, 50];\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private apiService: ApiService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getS1PaymentList();\r\n  }\r\n\r\n  getS1PaymentList() {\r\n    let endpoint = `?page=${this.currentPage}&size=${this.pageSize}`;\r\n    this.apiService.findAll(ENDPOINTS.accountingPaymentForApprovals + endpoint).subscribe((res: any) => {\r\n      this.paymentList = res.responseData.data;\r\n      console.log('payment list:: ', this.paymentList);\r\n\r\n      this.dataSource = new MatTableDataSource<Payment>(this.paymentList);\r\n      // this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n    });\r\n    console.log('Whuy', this.paymentList)\r\n  }\r\n\r\n  pageEvents(event: any) {\r\n    this.pageSize = event.pageSize;\r\n\r\n    if (event.pageIndex > this.pageNo) {\r\n      this.pageNo++;\r\n    } else {\r\n      this.pageNo--;\r\n    }\r\n\r\n    if (event.pageSize > event.length) {\r\n      this.pageNo = 0;\r\n    }\r\n\r\n    this.getS1PaymentList();\r\n  }\r\n\r\n  getPaymentDetails(id) {\r\n    this.router.navigate(['asc/page/accounting/update/', id]);\r\n  }\r\n\r\n  public doFilter = (value: string) => {\r\n    this.dataSource.filter = value.trim().toLocaleLowerCase();\r\n   }\r\n\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { URL_PATHS } from '@shared';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: URL_PATHS.USER_ROLE,\r\n        loadChildren: () => import('./user-role/user-role.module')\r\n          .then(m => m.UserRoleModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.USER_REGISTRATION,\r\n        loadChildren: () => import('./user-registration/user-registration.module')\r\n          .then(m => m.UserRegistrationModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.UPDATE_USER + '/:id',\r\n        loadChildren: () => import('./user-registration/user-registration.module')\r\n          .then(m => m.UserRegistrationModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.USER_PROFILE,\r\n        loadChildren: () => import('./user-profile/user-profile.module')\r\n          .then(m => m.UserProfileModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.USER_LIST,\r\n        loadChildren: () => import('./user-list/user-list.module')\r\n          .then(m => m.UserListModule)\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AccountRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ProductComponent } from './product.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ProductComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ProductRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrandsRoutingModule } from './brands-routing.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { BrandsComponent } from './brands.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { FragmentsModule } from '../../../fragments/fragments.module';\r\n\r\n@NgModule({\r\n  declarations: [BrandsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    BrandsRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule\r\n  ]\r\n})\r\nexport class BrandsModule { }\r\n","export default \"<form>\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12 title\\\">\\r\\n        <mat-label>\\r\\n          <mat-icon>payment</mat-icon> Payment Type\\r\\n        </mat-label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <hr>\\r\\n\\r\\n    <form [formGroup]=\\\"paymentTypeForm\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Payment Description: <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <input matInput [(ngModel)]=\\\"paymentType.paymentDescription\\\" name=\\\"paymentDescription\\\"\\r\\n            formControlName=\\\"paymentDescription\\\">\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\" *ngIf=\\\"paymentType.id\\\">\\r\\n          <mat-label>Status</mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"paymentType.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n            <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n              {{i.status}}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <mat-slide-toggle class=\\\"col-md-5\\\" [(ngModel)]=\\\"paymentType.amount\\\" [checked]=\\\"paymentType.amount\\\" color=\\\"warn\\\"\\r\\n          formControlName=\\\"amount\\\"><b>Has Amount</b>\\r\\n        </mat-slide-toggle>\\r\\n        <mat-slide-toggle class=\\\"col-md-5\\\" [(ngModel)]=\\\"paymentType.bankBranch\\\" [checked]=\\\"paymentType.bankBranch\\\"\\r\\n          color=\\\"warn\\\" formControlName=\\\"bankBranch\\\"><b>Has Bank Branch</b>\\r\\n        </mat-slide-toggle>\\r\\n        <br>\\r\\n        <mat-slide-toggle class=\\\"col-md-5\\\" [(ngModel)]=\\\"paymentType.bankName\\\" [checked]=\\\"paymentType.bankName\\\"\\r\\n          color=\\\"warn\\\" formControlName=\\\"bankName\\\"><b>Has Bank Name</b></mat-slide-toggle>\\r\\n        <mat-slide-toggle class=\\\"col-md-5\\\" [(ngModel)]=\\\"paymentType.controlNo\\\" [checked]=\\\"paymentType.controlNo\\\"\\r\\n          color=\\\"warn\\\" formControlName=\\\"controlNo\\\"><b>Has Control Number</b>\\r\\n        </mat-slide-toggle>\\r\\n        <br>\\r\\n        <mat-slide-toggle class=\\\"col-md-5\\\" [(ngModel)]=\\\"paymentType.fundTransferDate\\\"\\r\\n          [checked]=\\\"paymentType.fundTransferDate\\\" color=\\\"warn\\\" formControlName=\\\"fundTransferDate\\\"><b>Has Fund Transfer\\r\\n            Date</b></mat-slide-toggle>\\r\\n        <mat-slide-toggle class=\\\"col-md-5\\\" [(ngModel)]=\\\"paymentType.promisorryDate\\\"\\r\\n          [checked]=\\\"paymentType.promisorryDate\\\" color=\\\"warn\\\" formControlName=\\\"promisorryDate\\\"><b>Has Promisorry\\r\\n            Date</b></mat-slide-toggle>\\r\\n        <br>\\r\\n        <mat-slide-toggle class=\\\"col-md-5\\\" [(ngModel)]=\\\"paymentType.referenceNo\\\" [checked]=\\\"paymentType.referenceNo\\\"\\r\\n          color=\\\"warn\\\" formControlName=\\\"referenceNo\\\"><b>Has Reference No\\r\\n          </b></mat-slide-toggle>\\r\\n      </div>\\r\\n    </form>\\r\\n\\r\\n    <app-form-action-buttons [childObject]=\\\"paymentType\\\" [childForm]=\\\"paymentTypeForm\\\" (saveFunction)=\\\"save()\\\"\\r\\n      (updateFunction)=\\\"update()\\\" (cancelFunction)=\\\"resetFormValidator()\\\" (deleteFunction)=\\\"delete()\\\"></app-form-action-buttons>\\r\\n    <br>\\r\\n    <app-form-list [dataSource]=\\\"dataSource\\\" [displayedColumns]=\\\"displayedColumns\\\"\\r\\n      (selectInListFunction)=\\\"getPaymentType()\\\"></app-form-list>\\r\\n  </div>\\r\\n</form>\\r\\n\";","import { Injectable } from '@angular/core';\r\nimport { DatePipe } from '@angular/common';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DateService {\r\n    constructor(\r\n        private datepipe: DatePipe,\r\n        ) { }\r\n\r\n    setDate(value): Date {\r\n        if (!value) return null;\r\n\r\n        return new Date(this.datepipe.transform(value, 'yyyy-MM-dd'));\r\n    }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UserRoleRoutingModule } from './user-role-routing.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { UserRoleComponent } from './user-role.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [UserRoleComponent],\r\n  imports: [\r\n    CommonModule,\r\n    UserRoleRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule\r\n  ]\r\n})\r\nexport class UserRoleModule { }\r\n","\r\nexport class TypeOfExecution {\r\n    id: number;\r\n    typeOfExecution: string;\r\n    status: string;\r\n    applyForToa: boolean;\r\n    live: boolean;\r\n}\r\n","import { Company } from './company.model';\r\nimport { VoucherSignatories } from \"./voucher-signatories.model\";\r\n\r\nexport class Voucher {\r\n\r\n    id: number;\r\n    company: Company;\r\n    fundAmount:\tnumber;\r\n    voucherDate: Date;\r\n    status: string;\r\n    voucherAttachmentReference: string;\r\n    voucherSignatories: VoucherSignatories[];\r\n   \r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvYWNjb3VudGluZy9saXN0LXBheW1lbnQvbGlzdC1wYXltZW50LmNvbXBvbmVudC5zY3NzIn0= */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvbWFpbnRlbmFuY2UvcGF5bWVudC10eXBlL3BheW1lbnQtdHlwZS5jb21wb25lbnQuc2NzcyJ9 */\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ListPaymentRoutingModule } from './list-payment-routing.module';\r\nimport { ListPaymentComponent } from './list-payment.component';\r\nimport { AngularMaterialModule } from '@shared';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ListPaymentComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ListPaymentRoutingModule,\r\n    AngularMaterialModule\r\n  ]\r\n})\r\nexport class ListPaymentModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvbWFpbnRlbmFuY2UvdHlwZS1vZi1kb2N1bWVudC90eXBlLW9mLWRvY3VtZW50LmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { PaymentType } from '@models';\r\nimport { STATUSES, ENDPOINTS, COMMON_FUNCTION } from '@shared';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { FormListComponent } from '@fragments';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-payment-type',\r\n  templateUrl: './payment-type.component.html',\r\n  styleUrls: ['./payment-type.component.scss']\r\n})\r\nexport class PaymentTypeComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<PaymentType>;\r\n  displayedColumns: string[] = [\r\n    'paymentDescription',\r\n    'amount',\r\n    'bankBranch',\r\n    'bankName',\r\n    'controlNo',\r\n    'fundTransferDate',\r\n    'promisorryDate',\r\n    'referenceNo',\r\n    'status'\r\n  ];\r\n  statusList = [...STATUSES];\r\n\r\n  paymentType = new PaymentType();\r\n  paymentTypeList = [];\r\n\r\n  paymentTypeForm: FormGroup;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.paymentType).subscribe((res: any) => {\r\n      this.paymentTypeList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<PaymentType>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    this.apiService.save(ENDPOINTS.paymentType, this.paymentType).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  getPaymentType(): void {\r\n    this.apiService.findById(ENDPOINTS.paymentType, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.paymentType = res.responseData.data;\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.paymentType, this.paymentType).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.paymentType.status = COMMON_FUNCTION.ACTIVE;\r\n    this.paymentTypeForm = this.formBuilder.group({\r\n      paymentDescription: ['', Validators.required],\r\n      amount: [''],\r\n      bankBranch: [''],\r\n      bankName: [''],\r\n      controlNo: [''],\r\n      fundTransferDate: [''],\r\n      promisorryDate: [''],\r\n      referenceNo: [''],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.paymentType = new PaymentType();\r\n    this.paymentType.status = COMMON_FUNCTION.ACTIVE;\r\n    this.paymentTypeForm.markAsUntouched();\r\n    this.paymentTypeForm.markAsPristine();\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this payment type?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.paymentType, this.paymentType.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Payment type successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { URL_PATHS } from '@shared';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: URL_PATHS.PAYMENTS,\r\n        loadChildren: () => import('./payments/payments.module')\r\n          .then(m => m.PaymentsModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.LIST_PAYMENT,\r\n        loadChildren: () => import('./list-payment/list-payment.module')\r\n          .then(m => m.ListPaymentModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.ADD_PAYMENT,\r\n        loadChildren: () => import('./add-payment/add-payment.module')\r\n          .then(m => m.AddPaymentModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.UPDATE_PAYMENT + '/:id',\r\n        loadChildren: () => import('./add-payment/add-payment.module')\r\n          .then(m => m.AddPaymentModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.UPDATE_PAYMENT + '/:id/:status',\r\n        loadChildren: () => import('./add-payment/add-payment.module')\r\n          .then(m => m.AddPaymentModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.VOUCHER_ENROLLMENT,\r\n        loadChildren: () => import('./company-voucher/company-voucher-enrollment/company-voucher-enrollment.module')\r\n          .then(m => m.CompanyVoucherEnrollmentModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.VOUCHER_REPLENISHMENT,\r\n        loadChildren: () => import('./company-voucher/company-voucher-fund/company-voucher-fund.module')\r\n          .then(m => m.CompanyVoucherFundModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.ADD_PAYMENT,\r\n        loadChildren: () => import('./add-payment/add-payment.module')\r\n          .then(m => m.AddPaymentModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.REPORTS,\r\n        loadChildren: () => import('./reports/reports.module')\r\n          .then(m => m.ReportsModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.ADD_PENALTY,\r\n        loadChildren: () => import('./add-penalty/add-penalty.module')\r\n          .then(m => m.AddPenaltyModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.ADD_PENALTY + '/:type',\r\n        loadChildren: () => import('./add-penalty/add-penalty.module')\r\n          .then(m => m.AddPenaltyModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.UPDATE_PENALTY + '/:type/:id',\r\n        loadChildren: () => import('./add-penalty/add-penalty.module')\r\n          .then(m => m.AddPenaltyModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.VOUCHER_MONITORING,\r\n        loadChildren: () => import('./voucher-brand-monitoring/voucher-brand-monitoring/voucher-brand-monitoring.module')\r\n          .then(m => m.VoucherBrandMonitoringModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.VOUCHER_MONITORING + '/:brand',\r\n        loadChildren: () => import('./voucher-brand-monitoring/voucher-brand-monitoring/voucher-brand-monitoring.module')\r\n          .then(m => m.VoucherBrandMonitoringModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.OR_PREPARATION,\r\n        loadChildren: () => import('./or-preparation/or-preparation.module')\r\n          .then(m => m.OrPreparationModule)\r\n      },\r\n    ]\r\n  }\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AccountingRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UserRoleComponent } from './user-role.component';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserRoleComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UserRoleRoutingModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvbWFpbnRlbmFuY2UvdHlwZS1vZi1yZWFzb24vdHlwZS1vZi1yZWFzb24uY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES, YES_NO_OPTION } from '@shared';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Affiliation } from '@models';\r\nimport { FormListComponent } from '@fragments';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-affiliation',\r\n  templateUrl: './affiliation.component.html',\r\n  styleUrls: ['./affiliation.component.scss']\r\n})\r\nexport class AffiliationComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<Affiliation>;\r\n  displayedColumns: string[] = ['affiliationDesc', 'member', 'status'];\r\n  statusList = [...STATUSES];\r\n  yesNoList = [...YES_NO_OPTION];\r\n\r\n  affiliation = new Affiliation();\r\n  affiliationList = [];\r\n\r\n  affiliationForm: FormGroup;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.affiliation).subscribe((res: any) => {\r\n      this.affiliationList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<Affiliation>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    if (this.affiliation.member.toString() === 'No') {\r\n      this.affiliation.member = this.setValue(this.affiliation.member);\r\n    }\r\n    this.affiliation.status = COMMON_FUNCTION.ACTIVE;\r\n    this.apiService.save(ENDPOINTS.affiliation, this.affiliation).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  getAffiliation(): void {\r\n    this.apiService.findById(ENDPOINTS.affiliation, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.affiliation = res.responseData.data;\r\n      }\r\n    });\r\n  }\r\n\r\n  confirmUpdate() {\r\n    if (this.affiliation.status === 'INACTIVE') {\r\n      Swal.fire({\r\n        text: `Admin should manually change the company's membership affiliation value to its equivalent non member value. Continue?`,\r\n        icon: 'question',\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonText: 'Confirm'\r\n      }).then((result) => {\r\n        if (result.value) {\r\n          this.update();\r\n        }\r\n      });\r\n    } else {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    this.affiliation.member = this.setValue(this.affiliation.member);\r\n    this.apiService.update(ENDPOINTS.affiliation, this.affiliation).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.affiliation.status = COMMON_FUNCTION.ACTIVE;\r\n    this.affiliation.member = true;\r\n    this.affiliationForm = this.formBuilder.group({\r\n      description: ['', Validators.required],\r\n      member: ['', Validators.required],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.affiliation = new Affiliation();\r\n    this.affiliation.status = COMMON_FUNCTION.ACTIVE;\r\n    this.affiliation.member = true;\r\n    this.affiliationForm.markAsUntouched();\r\n    this.affiliationForm.markAsPristine();\r\n  }\r\n\r\n  setValue(param): boolean {\r\n    return param === 'Yes' || param === true ? true : false;\r\n  }\r\n\r\n  compareMember(value: any, selected: any): boolean {\r\n    if (value) {\r\n      return value === (selected ? 'Yes' : 'No');\r\n    }\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this brand?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.affiliation, this.affiliation.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Affiliation successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","export default \"<form>\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12 title\\\">\\r\\n        <mat-label>\\r\\n          <mat-icon>view_list</mat-icon>  PROOF OF PAYMENTS\\r\\n        </mat-label>\\r\\n\\r\\n        <!-- <button class=\\\"button-right button-red\\\" mat-raised-button [routerLink]=\\\"['/asc/page/accounting/add']\\\">\\r\\n          <mat-icon>add</mat-icon> NEW PAYMENT\\r\\n        </button> -->\\r\\n      </div>\\r\\n    </div>\\r\\n    <br>\\r\\n\\r\\n    <div class=\\\"col-md-12\\\" fxLayout fxLayoutAlign=\\\"center center\\\">\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" (keyup)=\\\"doFilter($event.target.value)\\\" placeholder=\\\"Search\\\">\\r\\n      </mat-form-field>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"mat-elevation-z8 fields\\\">\\r\\n      <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\r\\n\\r\\n        <ng-container matColumnDef=\\\"referenceCode\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef > REFERENCE CODE </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getPaymentDetails(element.id)\\\">\\r\\n            {{ element?.applicationForm?.referenceCode }} </td>\\r\\n        </ng-container>\\r\\n        <ng-container matColumnDef=\\\"typeOfApplication\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef > TYPE OF APPLICATION </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getPaymentDetails(element.id)\\\">\\r\\n            {{ element?.applicationForm?.applicationType?.description }} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <ng-container matColumnDef=\\\"brand\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef > BRAND </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getPaymentDetails(element.id)\\\">\\r\\n            {{ element?.applicationForm?.brand?.description }} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <ng-container matColumnDef=\\\"typeOfMedium\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef > TYPE OF MEDIUM </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getPaymentDetails(element.id)\\\">\\r\\n            {{ element?.applicationForm?.refTypeOfMedium }} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <ng-container matColumnDef=\\\"companyName\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef > PRESENTOR'S COMPANY NAME </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getPaymentDetails(element.id)\\\">\\r\\n            {{ element?.applicationForm?.applicationOwner?.company?.companyName }} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <ng-container matColumnDef=\\\"paymentStatus\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef > PAYMENT STATUS </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getPaymentDetails(element.id)\\\">\\r\\n            {{ element?.paymentStatus }} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n      </table>\\r\\n      <div class=\\\"no-record\\\" [hidden]=\\\"dataSource && dataSource?.data?.length > 0\\\">\\r\\n        No record found.\\r\\n      </div>\\r\\n      <mat-paginator [pageSize]=\\\"pageSize\\\" [pageIndex]=\\\"pageNo\\\" [length]=\\\"totalItems\\\"\\r\\n      [pageSizeOptions]=\\\"pageSizeOptions\\\" (page)=\\\"pageEvents($event)\\\">\\r\\n      </mat-paginator>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n\";","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\nimport { UserRole } from '@models';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, ROLES, STATUSES } from '@shared';\r\n\r\n@Component({\r\n  selector: 'app-user-role',\r\n  templateUrl: './user-role.component.html',\r\n  styleUrls: ['./user-role.component.scss']\r\n})\r\nexport class UserRoleComponent implements OnInit {\r\n\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  @ViewChild(MatTable, { static: false }) table: MatTable<UserRole>;\r\n  dataSource: MatTableDataSource<UserRole>;\r\n  displayedColumns: string[] = ['name', 'status'];\r\n  statusList = [...STATUSES];\r\n  roleList = [...ROLES];\r\n\r\n  userRole = new UserRole();\r\n  userRoleList = [];\r\n\r\n  userRoleForm: FormGroup;\r\n\r\n  name: any; // in html but not existing in component -- encountered during \"ng serve --aot\"\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.roles).subscribe((res: any) => {\r\n      console.log(res.responseData.data);\r\n\r\n      this.userRoleList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<UserRole>(this.userRoleList);\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n    }, (err: any) => {\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    this.apiService.save(ENDPOINTS.roles, this.userRole).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  getUserRole(name): void {\r\n    this.apiService.findAll(ENDPOINTS.roles+'/role-name/'+ name).subscribe((res: any) => {\r\n      if (res) {\r\n        this.userRole = res;\r\n      }\r\n    }, (err: any) => {\r\n      this.userRole = err.error;\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.roles, this.userRole).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.userRole.status = COMMON_FUNCTION.ACTIVE;\r\n    this.userRoleForm = this.formBuilder.group({\r\n      name: ['', Validators.required],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.userRole = new UserRole();\r\n    this.userRole.status = COMMON_FUNCTION.ACTIVE;\r\n    this.userRoleForm.markAsUntouched();\r\n    this.userRoleForm.markAsPristine();\r\n  }\r\n\r\n}\r\n","export class S1SettlementOrExpirationPeriod {\r\n  id: number;\r\n  noOfHours: number;\r\n  noOfDays: number;\r\n  noOfWorkingDays: number;\r\n}\r\n","export default \"<form>\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12 title\\\">\\r\\n        <mat-label>\\r\\n          <mat-icon>file_present</mat-icon> Type of Document\\r\\n        </mat-label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <hr>\\r\\n\\r\\n    <form [formGroup]=\\\"typeOfDocumentForm\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Type of Document:<span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <input matInput [(ngModel)]=\\\"typeOfDocument.description\\\" name=\\\"description\\\" formControlName=\\\"description\\\">\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\" *ngIf=\\\"typeOfDocument.id\\\">\\r\\n          <mat-label>Status</mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"typeOfDocument.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n            <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n              {{i.status}}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <mat-slide-toggle class=\\\"col-md-5\\\" [(ngModel)]=\\\"typeOfDocument.dateOfLaunchEnable\\\" [checked]=\\\"typeOfDocument.dateOfLaunchEnable\\\" color=\\\"warn\\\" formControlName=\\\"dateOfLaunchEnable\\\"><b>Has Date of Launch</b>\\r\\n        </mat-slide-toggle>\\r\\n        <mat-slide-toggle class=\\\"col-md-5\\\" [(ngModel)]=\\\"typeOfDocument.expiresOnEnable\\\" [checked]=\\\"typeOfDocument.expiresOnEnable\\\" color=\\\"warn\\\" formControlName=\\\"expiresOnEnable\\\"><b>Has Expiration Date</b>\\r\\n        </mat-slide-toggle>\\r\\n      <br>\\r\\n        <mat-slide-toggle class=\\\"col-md-5\\\" [(ngModel)]=\\\"typeOfDocument.basedOnEnable\\\" [checked]=\\\"typeOfDocument.basedOnEnable\\\" color=\\\"warn\\\" formControlName=\\\"basedOnEnable\\\"><b>Has Basis</b></mat-slide-toggle>\\r\\n        <mat-slide-toggle class=\\\"col-md-5\\\" [(ngModel)]=\\\"typeOfDocument.variantEnable\\\" [checked]=\\\"typeOfDocument.variantEnable\\\" color=\\\"warn\\\" formControlName=\\\"variantEnable\\\"><b>Has Variant</b>\\r\\n        </mat-slide-toggle>\\r\\n      <br>\\r\\n        <mat-slide-toggle class=\\\"col-md-5\\\" [(ngModel)]=\\\"typeOfDocument.remarksEnable\\\" [checked]=\\\"typeOfDocument.remarksEnable\\\" color=\\\"warn\\\" formControlName=\\\"remarksEnable\\\"><b>Has Remarks</b></mat-slide-toggle>\\r\\n        <mat-slide-toggle class=\\\"col-md-5\\\" [(ngModel)]=\\\"typeOfDocument.inputEnable\\\" [checked]=\\\"typeOfDocument.inputEnable\\\" color=\\\"warn\\\" formControlName=\\\"inputEnable\\\"><b>Has Input</b></mat-slide-toggle>\\r\\n      </div>\\r\\n    </form>\\r\\n\\r\\n    <app-form-action-buttons [childObject]=\\\"typeOfDocument\\\" [childForm]=\\\"typeOfDocumentForm\\\" (saveFunction)=\\\"save()\\\"\\r\\n      (updateFunction)=\\\"update()\\\" (cancelFunction)=\\\"resetFormValidator()\\\" (deleteFunction)=\\\"delete()\\\"></app-form-action-buttons>\\r\\n    <br>\\r\\n    <app-form-list [dataSource]=\\\"dataSource\\\" [displayedColumns]=\\\"displayedColumns\\\"\\r\\n      (selectInListFunction)=\\\"getTypeOfDocument()\\\"></app-form-list>\\r\\n  </div>\\r\\n</form>\\r\\n\";","export default \".badge {\\n  padding: 5px 20px;\\n  text-decoration: none;\\n  width: 10em;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9wYWdlcy9hY2NvdW50L3VzZXItcm9sZS91c2VyLXJvbGUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxpQkFBQTtFQUNBLHFCQUFBO0VBQ0EsV0FBQTtBQUNKIiwiZmlsZSI6InNyYy9hcHAvbW9kdWxlcy9wYWdlcy9hY2NvdW50L3VzZXItcm9sZS91c2VyLXJvbGUuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuYmFkZ2V7XHJcbiAgICBwYWRkaW5nOiA1cHggMjBweDtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIHdpZHRoOiAxMGVtO1xyXG59Il19 */\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { UserRoleComponent } from './user-role/user-role.component';\r\nimport { UserRegistrationComponent } from './user-registration/user-registration.component';\r\nimport { UserProfileComponent } from './user-profile/user-profile.component';\r\nimport { UserListComponent } from './user-list/user-list.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    AccountRoutingModule\r\n  ]\r\n})\r\nexport class AccountModule { }\r\n","export default \"<form>\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12 title\\\">\\r\\n        <mat-label>\\r\\n          Category\\r\\n        </mat-label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <hr>\\r\\n\\r\\n    <form [formGroup]=\\\"categoryForm\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Category: <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <input matInput [(ngModel)]=\\\"category.description\\\" name=\\\"description\\\" formControlName=\\\"description\\\">\\r\\n        </mat-form-field>\\r\\n\\r\\n         <!-- <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Product <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"category.product\\\" name=\\\"product\\\" formControlName=\\\"product\\\"\\r\\n            [compareWith]=\\\"compareProduct\\\">\\r\\n            <mat-option *ngFor=\\\"let i of productList\\\" [value]=\\\"i\\\">\\r\\n              {{i.description}}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field> -->\\r\\n\\r\\n        <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\" *ngIf=\\\"category.id\\\">\\r\\n          <mat-label>Status</mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"category.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n            <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n              {{i.status}}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n    </form>\\r\\n\\r\\n    <app-form-action-buttons [childObject]=\\\"category\\\" [childForm]=\\\"categoryForm\\\" (saveFunction)=\\\"save()\\\"\\r\\n      (updateFunction)=\\\"update()\\\" (cancelFunction)=\\\"resetFormValidator()\\\" (deleteFunction)=\\\"delete()\\\"></app-form-action-buttons>\\r\\n    <br>\\r\\n    <app-form-list [dataSource]=\\\"dataSource\\\" [displayedColumns]=\\\"displayedColumns\\\"\\r\\n      (selectInListFunction)=\\\"getCategory()\\\"></app-form-list>\\r\\n\\r\\n  </div>\\r\\n</form>\\r\\n\";","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { TypeOfReason } from '@models';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-type-of-reason',\r\n  templateUrl: './type-of-reason.component.html',\r\n  styleUrls: ['./type-of-reason.component.scss']\r\n})\r\nexport class TypeOfReasonComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<TypeOfReason>;\r\n  displayedColumns: string[] = ['reason', 'status'];\r\n  statusList = [...STATUSES];\r\n\r\n  typeOfReason = new TypeOfReason();\r\n  typeOfReasonList = [];\r\n\r\n  typeOfReasonForm: FormGroup;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.typeOfReason).subscribe((res: any) => {\r\n      this.typeOfReasonList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<TypeOfReason>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    this.apiService.save(ENDPOINTS.typeOfReason, this.typeOfReason).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  getTypeOfReason(): void {\r\n    this.apiService.findById(ENDPOINTS.typeOfReason, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.typeOfReason = res.responseData.data;\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.typeOfReason, this.typeOfReason).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.typeOfReason.status = COMMON_FUNCTION.ACTIVE;\r\n    this.typeOfReasonForm = this.formBuilder.group({\r\n      reason: ['', Validators.required],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.typeOfReason = new TypeOfReason();\r\n    this.typeOfReason.status = COMMON_FUNCTION.ACTIVE;\r\n    this.typeOfReasonForm.markAsUntouched();\r\n    this.typeOfReasonForm.markAsPristine();\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this type of reason?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.typeOfReason, this.typeOfReason.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Type of reason successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvbWFpbnRlbmFuY2UvY2F0ZWdvcnkvY2F0ZWdvcnkuY29tcG9uZW50LnNjc3MifQ== */\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ProductRoutingModule } from './product-routing.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { FragmentsModule } from '../../../fragments/fragments.module';\r\nimport { ProductComponent } from './product.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ProductComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ProductRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule\r\n  ]\r\n})\r\nexport class ProductModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AccountingRoutingModule } from './accounting-routing.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    AccountingRoutingModule\r\n  ]\r\n})\r\nexport class AccountingModule { }\r\n","export default \"<form>\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12 title\\\">\\r\\n        <mat-label>\\r\\n          <mat-icon>event_note</mat-icon> Type of Reason\\r\\n        </mat-label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <hr>\\r\\n\\r\\n    <form [formGroup]=\\\"typeOfReasonForm\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Reason:<span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <input matInput [(ngModel)]=\\\"typeOfReason.reason\\\" name=\\\"reason\\\" formControlName=\\\"reason\\\">\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\" *ngIf=\\\"typeOfReason.id\\\">\\r\\n          <mat-label>Status</mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"typeOfReason.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n            <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n              {{i.status}}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n    </form>\\r\\n\\r\\n    <app-form-action-buttons [childObject]=\\\"typeOfReason\\\" [childForm]=\\\"typeOfReasonForm\\\" (saveFunction)=\\\"save()\\\"\\r\\n      (updateFunction)=\\\"update()\\\" (cancelFunction)=\\\"resetFormValidator()\\\" (deleteFunction)=\\\"delete()\\\"></app-form-action-buttons>\\r\\n      <br>\\r\\n      <app-form-list [dataSource]=\\\"dataSource\\\" [displayedColumns]=\\\"displayedColumns\\\"\\r\\n        (selectInListFunction)=\\\"getTypeOfReason()\\\"></app-form-list>\\r\\n  </div>\\r\\n</form>\";","export default \"<form>\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-12 title\\\">\\r\\n          <mat-label>\\r\\n            <mat-icon>settings_accessibility</mat-icon> User Role\\r\\n          </mat-label>\\r\\n        </div>\\r\\n      </div>\\r\\n      <hr>\\r\\n\\r\\n      <form [formGroup]=\\\"userRoleForm\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n          <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\">\\r\\n            <!-- <mat-label>User Role: <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"userRole.name\\\" name=\\\"name\\\" formControlName=\\\"name\\\"> -->\\r\\n            <mat-label>User Role</mat-label>\\r\\n            <mat-select [(ngModel)]=\\\"userRole.name\\\" name=\\\"name\\\" formControlName=\\\"name\\\">\\r\\n              <mat-option *ngFor=\\\"let i of roleList\\\" [value]=\\\"i.role\\\">\\r\\n                {{ i?.role?.replaceAll('_', (' '))?.replace('ENCODER', 'EVALUATOR') }}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Status</mat-label>\\r\\n            <mat-select [(ngModel)]=\\\"userRole.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n              <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n                {{i.status}}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n      </form>\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-12\\\">\\r\\n          <!-- <button mat-raised-button color=\\\"primary\\\" (click)=\\\"save()\\\" *ngIf=\\\"!name?.id\\\" [disabled]=\\\"!(userRoleForm.valid)\\\">\\r\\n            <mat-icon>save</mat-icon> SAVE\\r\\n          </button> -->\\r\\n          <button mat-raised-button color=\\\"primary\\\" (click)=\\\"update()\\\" *ngIf=\\\"userRole?.id\\\" [disabled]=\\\"!(userRoleForm.valid)\\\">\\r\\n            <mat-icon>task_alt </mat-icon> UPDATE\\r\\n          </button>\\r\\n          <button mat-raised-button color=\\\"warn\\\" (click)=\\\"resetFormValidator()\\\" *ngIf=\\\"userRole?.id || userRole?.name\\\">\\r\\n            <mat-icon>{{ userRole?.id ? 'cancel' : 'refresh' }}</mat-icon> {{ userRole?.id ? 'CANCEL' : 'RESET' }}\\r\\n          </button>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <br>\\r\\n\\r\\n      <div class=\\\"mat-elevation-z8\\\">\\r\\n        <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\r\\n\\r\\n          <!--- Note that these columns can be defined in any order.\\r\\n                  The actual rendered columns are set as a property on the row definition\\\" -->\\r\\n\\r\\n          <!-- Position Column -->\\r\\n          <ng-container matColumnDef=\\\"name\\\">\\r\\n            <th mat-header-cell *matHeaderCellDef> User Role </th>\\r\\n            <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getUserRole(element?.name)\\\"> {{ element?.name?.replaceAll('_', ' ')?.replace('ENCODER', 'EVALUATOR') }} </td>\\r\\n          </ng-container>\\r\\n\\r\\n          <ng-container matColumnDef=\\\"status\\\">\\r\\n            <th mat-header-cell *matHeaderCellDef> Status </th>\\r\\n            <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getUserRole(element?.name)\\\">\\r\\n              <span *ngIf=\\\"element?.status == 'ACTIVE'\\\" class=\\\"badge rounded-pill bg-success\\\">{{ element?.status }}</span>\\r\\n              <span *ngIf=\\\"element?.status != 'ACTIVE'\\\" class=\\\"badge rounded-pill bg-danger\\\">{{ element?.status }}</span>\\r\\n            </td>\\r\\n          </ng-container>\\r\\n\\r\\n          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n        </table>\\r\\n        <div class=\\\"no-record\\\" [hidden]=\\\"dataSource && dataSource?.data?.length > 0\\\">\\r\\n          No record found.\\r\\n        </div>\\r\\n        <mat-paginator [pageSizeOptions]=\\\"[10, 20, 30]\\\" showFirstLastButtons></mat-paginator>\\r\\n\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n  </form>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ListPaymentComponent } from './list-payment.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ListPaymentComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ListPaymentRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { BrandsComponent } from './brands.component';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: BrandsComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class BrandsRoutingModule { }\r\n","export class Report {\r\n    filename:\tstring\r\n    format:\tstring\r\n    module:\tstring\r\n    params: {};\r\n}"]}