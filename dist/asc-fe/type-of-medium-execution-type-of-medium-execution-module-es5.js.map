{"version":3,"sources":["webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution.component.ts","webpack:///src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution.component.html","webpack:///src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution.module.ts","webpack:///src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution-routing.module.ts"],"names":["TypeOfMediumExecutionComponent","apiService","formBuilder","sweetAlertService","displayedColumns","statusList","typeOfExecution","typeOfExecutionList","getList","setFormValidator","findAll","typeOfExecutions","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","save","undefined","success","err","error","resetFormValidator","findById","idForUpdate","console","log","update","status","ACTIVE","typeOfExecutionForm","group","required","markAsUntouched","markAsPristine","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","deleteById","id","customSuccessMessage","getTypeOfExecution","TypeOfMediumExecutionModule","routes","path","component","TypeOfMediumExecutionRoutingModule","forChild"],"mappings":"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","file":"type-of-medium-execution-type-of-medium-execution-module-es5.js","sourcesContent":["export * from './form-action-buttons/form-action-buttons.component';\r\nexport * from './form-list/form-list.component';","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\r\nimport { TypeOfExecution } from 'app/core/models/type-of-execution.model';\r\nimport { TypeOfMediumExecution } from 'app/core/models/type-of-medium-execution.model';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-type-of-medium-execution',\r\n  templateUrl: './type-of-medium-execution.component.html',\r\n  styleUrls: ['./type-of-medium-execution.component.scss']\r\n})\r\nexport class TypeOfMediumExecutionComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<TypeOfExecution>;\r\n  displayedColumns: string[] = ['typeOfExecution', 'applyForTOA', 'applyForS2', 'status'];\r\n  statusList = [...STATUSES];\r\n\r\n  typeOfExecution = new TypeOfExecution();\r\n  typeOfExecutionList = [];\r\n\r\n  typeOfExecutionForm: FormGroup;\r\n\r\n  checked: boolean; // declared in HTML but not in component (feb 14 aot)\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.typeOfExecutions).subscribe((res: any) => {\r\n      this.typeOfExecutionList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<TypeOfExecution>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void{\r\n    this.apiService.save(ENDPOINTS.typeOfExecutions, this.typeOfExecution).subscribe(\r\n        (res: any) => {\r\n          if (res !== undefined){\r\n            this.sweetAlertService.success(res);\r\n          }\r\n        }, (err: any) => {\r\n          this.sweetAlertService.error(err);\r\n        }, () => {\r\n          this.resetFormValidator(),\r\n          this.getList();\r\n        }\r\n    )\r\n  }\r\n\r\n  getTypeOfExecution(): void {\r\n    this.apiService.findById(ENDPOINTS.typeOfExecutions, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.typeOfExecution = res.responseData.data;\r\n        console.log(res.responseData.data);\r\n\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.typeOfExecutions, this.typeOfExecution).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined){\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.resetFormValidator()\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.typeOfExecution.status = COMMON_FUNCTION.ACTIVE;\r\n    this.typeOfExecutionForm = this.formBuilder.group({\r\n      typeOfExecution: ['', Validators.required],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.typeOfExecution = new TypeOfExecution();\r\n    this.typeOfExecution.status = COMMON_FUNCTION.ACTIVE;\r\n    this.typeOfExecutionForm.markAsUntouched();\r\n    this.typeOfExecutionForm.markAsPristine();\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this type of execution?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.typeOfExecutions, this.typeOfExecution.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Type of execution successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","<!--\r\n      THIS IS TYPE OF EXECUTION\r\n -->\r\n<form>\r\n    <div class=\"container-fluid\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12 title\">\r\n                <mat-label>\r\n                    Type Of Execution\r\n                </mat-label>\r\n            </div>\r\n        </div>\r\n        <hr>\r\n\r\n        <form [formGroup]=\"typeOfExecutionForm\">\r\n            <div class=\"row\">\r\n                <mat-form-field class=\"col-md-8\" appearance=\"outline\">\r\n                    <mat-label>Type Of Execution <span class=\"required-field\">*</span></mat-label>\r\n                    <input matInput [(ngModel)]=\"typeOfExecution.typeOfExecution\" name=\"typeOfExecution\"\r\n                        formControlName=\"typeOfExecution\">\r\n                </mat-form-field>\r\n\r\n                <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                    <mat-label>Status</mat-label>\r\n                    <mat-select [(ngModel)]=\"typeOfExecution.status\" name=\"status\" formControlName=\"status\">\r\n                        <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n                            {{i.status}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-md-2\"></div>\r\n                <div class=\"col-md-1\"><b>Live</b></div>\r\n                <div class=\"col-md-1\">\r\n                    <mat-slide-toggle [(ngModel)]=\"typeOfExecution.live\"\r\n                        [ngModelOptions]=\"{standalone: true}\" [checked]=\"typeOfExecution?.live\"\r\n                        name=\"live\" color=\"warn\">\r\n                    </mat-slide-toggle>\r\n                </div>\r\n                <div class=\"col-md-5\">\r\n                  <b>True:</b> The application is for S1 only.<br>\r\n                  <b>False:</b> Can apply for Special Clearing Request/S2 Application.\r\n                </div>\r\n                <div class=\"col-md-2\"></div>\r\n            </div>\r\n\r\n            <div class=\"row\"><br></div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-md-2\"></div>\r\n                <div class=\"col-md-1\"> <b>Apply for TOA</b></div>\r\n                <div class=\"col-md-1\">\r\n                  <mat-slide-toggle [(ngModel)]=\"typeOfExecution.applyForToa\"\r\n                      [ngModelOptions]=\"{standalone: true}\" [checked]=\"typeOfExecution?.applyForToa\"\r\n                      name=\"applyForToa\" color=\"warn\">\r\n                  </mat-slide-toggle>\r\n\r\n                </div>\r\n                <div class=\"col-md-5\">\r\n                  <b>True:</b> The application can only apply for TOA.<br>\r\n                  <b>False:</b> Unable to apply for TOA.\r\n                </div>\r\n                <div class=\"col-md-2\"></div>\r\n            </div>\r\n        </form>\r\n\r\n        <app-form-action-buttons [childObject]=\"typeOfExecution\" [childForm]=\"typeOfExecutionForm\"\r\n            (saveFunction)=\"save()\" (updateFunction)=\"update()\" (cancelFunction)=\"resetFormValidator()\" (deleteFunction)=\"delete()\">\r\n        </app-form-action-buttons>\r\n        <br>\r\n        <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\r\n            (selectInListFunction)=\"getTypeOfExecution()\"></app-form-list>\r\n\r\n    </div>\r\n</form>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TypeOfMediumExecutionRoutingModule } from './type-of-medium-execution-routing.module';\r\nimport { TypeOfMediumExecutionComponent } from './type-of-medium-execution.component';\r\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n\r\n@NgModule({\r\n  declarations: [TypeOfMediumExecutionComponent],\r\n  imports: [\r\n    CommonModule,\r\n    TypeOfMediumExecutionRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule,\r\n  ]\r\n})\r\nexport class TypeOfMediumExecutionModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TypeOfMediumExecutionComponent } from './type-of-medium-execution.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: TypeOfMediumExecutionComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class TypeOfMediumExecutionRoutingModule { }\r\n"]}