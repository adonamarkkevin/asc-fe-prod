{"version":3,"sources":["webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution.component.ts","webpack:///src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution.component.html","webpack:///src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution.module.ts","webpack:///src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution-routing.module.ts"],"names":["TypeOfMediumExecutionComponent","apiService","formBuilder","sweetAlertService","displayedColumns","statusList","typeOfExecution","typeOfExecutionList","getList","setFormValidator","findAll","typeOfExecutions","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","save","undefined","success","err","error","resetFormValidator","findById","idForUpdate","console","log","update","status","ACTIVE","typeOfExecutionForm","group","required","markAsUntouched","markAsPristine","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","deleteById","id","customSuccessMessage","getTypeOfExecution","TypeOfMediumExecutionModule","routes","path","component","TypeOfMediumExecutionRoutingModule","forChild"],"mappings":"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","file":"type-of-medium-execution-type-of-medium-execution-module-es5.js","sourcesContent":["export * from './form-action-buttons/form-action-buttons.component';\r\nexport * from './form-list/form-list.component';","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\r\nimport { TypeOfExecution } from 'app/core/models/type-of-execution.model';\r\nimport { TypeOfMediumExecution } from 'app/core/models/type-of-medium-execution.model';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-type-of-medium-execution',\r\n  templateUrl: './type-of-medium-execution.component.html',\r\n  styleUrls: ['./type-of-medium-execution.component.scss']\r\n})\r\nexport class TypeOfMediumExecutionComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<TypeOfExecution>;\r\n  displayedColumns: string[] = ['typeOfExecution', 'applyForTOA', 'applyForS2', 'status'];\r\n  statusList = [...STATUSES];\r\n\r\n  typeOfExecution = new TypeOfExecution();\r\n  typeOfExecutionList = [];\r\n\r\n  typeOfExecutionForm: FormGroup;\r\n\r\n  checked: boolean; // declared in HTML but not in component (feb 14 aot)\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.typeOfExecutions).subscribe((res: any) => {\r\n      this.typeOfExecutionList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<TypeOfExecution>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void{\r\n    this.apiService.save(ENDPOINTS.typeOfExecutions, this.typeOfExecution).subscribe(\r\n        (res: any) => {\r\n          if (res !== undefined){\r\n            this.sweetAlertService.success(res);\r\n          }\r\n        }, (err: any) => {\r\n          this.sweetAlertService.error(err);\r\n        }, () => {\r\n          this.resetFormValidator(),\r\n          this.getList();\r\n        }\r\n    )\r\n  }\r\n\r\n  getTypeOfExecution(): void {\r\n    this.apiService.findById(ENDPOINTS.typeOfExecutions, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.typeOfExecution = res.responseData.data;\r\n        console.log(res.responseData.data);\r\n\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.typeOfExecutions, this.typeOfExecution).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined){\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.resetFormValidator()\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.typeOfExecution.status = COMMON_FUNCTION.ACTIVE;\r\n    this.typeOfExecutionForm = this.formBuilder.group({\r\n      typeOfExecution: ['', Validators.required],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.typeOfExecution = new TypeOfExecution();\r\n    this.typeOfExecution.status = COMMON_FUNCTION.ACTIVE;\r\n    this.typeOfExecutionForm.markAsUntouched();\r\n    this.typeOfExecutionForm.markAsPristine();\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this type of execution?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.typeOfExecutions, this.typeOfExecution.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Type of execution successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","<!--\r\n      THIS IS TYPE OF EXECUTION\r\n -->\r\n<form>\r\n    <div class=\"container-fluid\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12 title\">\r\n                <mat-label>\r\n                    Type Of Execution\r\n                </mat-label>\r\n            </div>\r\n        </div>\r\n        <hr>\r\n\r\n        <form [formGroup]=\"typeOfExecutionForm\">\r\n            <div class=\"row\">\r\n                <mat-form-field class=\"col-md-8\" appearance=\"outline\">\r\n                    <mat-label>Type Of Execution <span class=\"required-field\">*</span></mat-label>\r\n                    <input matInput [(ngModel)]=\"typeOfExecution.typeOfExecution\" name=\"typeOfExecution\"\r\n                        formControlName=\"typeOfExecution\">\r\n                </mat-form-field>\r\n\r\n                <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                    <mat-label>Status</mat-label>\r\n                    <mat-select [(ngModel)]=\"typeOfExecution.status\" name=\"status\" formControlName=\"status\">\r\n                        <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n                            {{i.status}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-md-2\"></div>\r\n                <div class=\"col-md-1\"><b>Live</b></div>\r\n                <div class=\"col-md-1\">\r\n                    <mat-slide-toggle [(ngModel)]=\"typeOfExecution.live\"\r\n                        [ngModelOptions]=\"{standalone: true}\" [checked]=\"typeOfExecution?.live\"\r\n                        name=\"live\" color=\"warn\">\r\n                    </mat-slide-toggle>\r\n                </div>\r\n                <div class=\"col-md-5\">\r\n                  <b>True:</b> The application is for S1 only.<br>\r\n                  <b>False:</b> Can apply for Special Clearing Request/S2 Application.\r\n                </div>\r\n                <div class=\"col-md-2\"></div>\r\n            </div>\r\n\r\n            <div class=\"row\"><br></div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-md-2\"></div>\r\n                <div class=\"col-md-1\"> <b>Apply for TOA</b></div>\r\n                <div class=\"col-md-1\">\r\n                  <mat-slide-toggle [(ngModel)]=\"typeOfExecution.applyForToa\"\r\n                      [ngModelOptions]=\"{standalone: true}\" [checked]=\"typeOfExecution?.applyForToa\"\r\n                      name=\"applyForToa\" color=\"warn\">\r\n                  </mat-slide-toggle>\r\n\r\n                </div>\r\n                <div class=\"col-md-5\">\r\n                  <b>True:</b> The application can only apply for TOA.<br>\r\n                  <b>False:</b> Unable to apply for TOA.\r\n                </div>\r\n                <div class=\"col-md-2\"></div>\r\n            </div>\r\n        </form>\r\n\r\n        <app-form-action-buttons [childObject]=\"typeOfExecution\" [childForm]=\"typeOfExecutionForm\"\r\n            (saveFunction)=\"save()\" (updateFunction)=\"update()\" (cancelFunction)=\"resetFormValidator()\" (deleteFunction)=\"delete()\">\r\n        </app-form-action-buttons>\r\n        <br>\r\n        <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\r\n            (selectInListFunction)=\"getTypeOfExecution()\"></app-form-list>\r\n\r\n    </div>\r\n</form>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TypeOfMediumExecutionRoutingModule } from './type-of-medium-execution-routing.module';\r\nimport { TypeOfMediumExecutionComponent } from './type-of-medium-execution.component';\r\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n\r\n@NgModule({\r\n  declarations: [TypeOfMediumExecutionComponent],\r\n  imports: [\r\n    CommonModule,\r\n    TypeOfMediumExecutionRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule,\r\n  ]\r\n})\r\nexport class TypeOfMediumExecutionModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TypeOfMediumExecutionComponent } from './type-of-medium-execution.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: TypeOfMediumExecutionComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class TypeOfMediumExecutionRoutingModule { }\r\n"]}