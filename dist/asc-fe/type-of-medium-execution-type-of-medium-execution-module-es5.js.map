{"version":3,"sources":["webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution.component.scss","webpack:///src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution.component.ts","webpack:///src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution.module.ts","webpack:///src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution-routing.module.ts","webpack:///src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution.component.html"],"names":["TypeOfMediumExecutionComponent","apiService","formBuilder","sweetAlertService","displayedColumns","statusList","typeOfExecution","typeOfExecutionList","getList","setFormValidator","findAll","typeOfExecutions","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","save","undefined","success","err","error","resetFormValidator","findById","idForUpdate","console","log","update","status","ACTIVE","typeOfExecutionForm","group","required","markAsUntouched","markAsPristine","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","deleteById","id","customSuccessMessage","selector","template","TypeOfMediumExecutionModule","declarations","imports","routes","path","component","TypeOfMediumExecutionRoutingModule","forChild","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCeFA,8BAA8B;AAczC,gDACUC,UADV,EAEUC,WAFV,EAGUC,iBAHV,EAG8C;AAAA;;AAFpC,eAAAF,UAAA,GAAAA,UAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAAC,iBAAA,GAAAA,iBAAA;AAbV,eAAAC,gBAAA,GAA6B,CAAC,iBAAD,EAAoB,aAApB,EAAmC,YAAnC,EAAiD,QAAjD,CAA7B;AACA,eAAAC,UAAA,sBAAiB,gDAAjB;AAEA,eAAAC,eAAA,GAAkB,IAAI,uFAAJ,EAAlB;AACA,eAAAC,mBAAA,GAAsB,EAAtB;AAUK;;AAlBoC;AAAA;AAAA,iBAoBzC,oBAAW;AACT,iBAAKC,OAAL;AACA,iBAAKC,gBAAL;AACD;AAvBwC;AAAA;AAAA,iBAyBzC,mBAAO;AAAA;;AACL,iBAAKR,UAAL,CAAgBS,OAAhB,CAAwB,kDAAUC,gBAAlC,EAAoDC,SAApD,CAA8D,UAACC,GAAD,EAAc;AAC1E,mBAAI,CAACN,mBAAL,GAA2BM,GAAG,CAACC,YAAJ,CAAiBC,IAA5C;AACA,mBAAI,CAACC,UAAL,GAAkB,IAAI,0EAAJ,CAAwCH,GAAG,CAACC,YAAJ,CAAiBC,IAAzD,CAAlB;AACA,mBAAI,CAACC,UAAL,CAAgBC,SAAhB,GAA4B,KAAI,CAACC,iBAAL,CAAuBD,SAAnD;AACA,mBAAI,CAACD,UAAL,CAAgBG,IAAhB,GAAuB,KAAI,CAACD,iBAAL,CAAuBC,IAA9C;AACD,aALD;AAMD;AAhCwC;AAAA;AAAA,iBAkCzC,gBAAI;AAAA;;AACF,iBAAKlB,UAAL,CAAgBmB,IAAhB,CAAqB,kDAAUT,gBAA/B,EAAiD,KAAKL,eAAtD,EAAuEM,SAAvE,CACI,UAACC,GAAD,EAAc;AACZ,kBAAIA,GAAG,KAAKQ,SAAZ,EAAsB;AACpB,sBAAI,CAAClB,iBAAL,CAAuBmB,OAAvB,CAA+BT,GAA/B;AACD;AACF,aALL,EAKO,UAACU,GAAD,EAAc;AACf,oBAAI,CAACpB,iBAAL,CAAuBqB,KAAvB,CAA6BD,GAA7B;AACD,aAPL,EAOO,YAAM;AACP,oBAAI,CAACE,kBAAL,IACA,MAAI,CAACjB,OAAL,EADA;AAED,aAVL;AAYD;AA/CwC;AAAA;AAAA,iBAiDzC,8BAAkB;AAAA;;AAChB,iBAAKP,UAAL,CAAgByB,QAAhB,CAAyB,kDAAUf,gBAAnC,EAAqD,KAAKO,iBAAL,CAAuBS,WAA5E,EAAyFf,SAAzF,CAAmG,UAACC,GAAD,EAAc;AAC/G,kBAAIA,GAAJ,EAAS;AACP,sBAAI,CAACP,eAAL,GAAuBO,GAAG,CAACC,YAAJ,CAAiBC,IAAxC;AACAa,uBAAO,CAACC,GAAR,CAAYhB,GAAG,CAACC,YAAJ,CAAiBC,IAA7B;AAED;AACF,aAND;AAOD;AAzDwC;AAAA;AAAA,iBA2DzC,kBAAM;AAAA;;AACJ,iBAAKd,UAAL,CAAgB6B,MAAhB,CAAuB,kDAAUnB,gBAAjC,EAAmD,KAAKL,eAAxD,EAAyEM,SAAzE,CACE,UAACC,GAAD,EAAc;AACZ,kBAAIA,GAAG,KAAKQ,SAAZ,EAAsB;AACpB,sBAAI,CAAClB,iBAAL,CAAuBmB,OAAvB,CAA+BT,GAA/B;AACD;AACF,aALH,EAKK,UAACU,GAAD,EAAc;AACf,oBAAI,CAACpB,iBAAL,CAAuBqB,KAAvB,CAA6BD,GAA7B;AACD,aAPH,EAOK,YAAM;AACP,oBAAI,CAACE,kBAAL;;AACA,oBAAI,CAACjB,OAAL;AACD,aAVH;AAWD;AAvEwC;AAAA;AAAA,iBAyEzC,4BAAgB;AACd,iBAAKF,eAAL,CAAqByB,MAArB,GAA8B,wDAAgBC,MAA9C;AACA,iBAAKC,mBAAL,GAA2B,KAAK/B,WAAL,CAAiBgC,KAAjB,CAAuB;AAChD5B,6BAAe,EAAE,CAAC,EAAD,EAAK,0DAAW6B,QAAhB,CAD+B;AAEhDJ,oBAAM,EAAE,CAAC,EAAD;AAFwC,aAAvB,CAA3B;AAID;AA/EwC;AAAA;AAAA,iBAiFzC,8BAAkB;AAChB,iBAAKzB,eAAL,GAAuB,IAAI,uFAAJ,EAAvB;AACA,iBAAKA,eAAL,CAAqByB,MAArB,GAA8B,wDAAgBC,MAA9C;AACA,iBAAKC,mBAAL,CAAyBG,eAAzB;AACA,iBAAKH,mBAAL,CAAyBI,cAAzB;AACD;AAtFwC;AAAA;AAAA,iBAwFzC,mBAAS;AAAA;;AACP,gEAAKC,IAAL,CAAU;AACRC,kBAAI,EAAE,yDADE;AAERC,kBAAI,EAAE,UAFE;AAGRC,8BAAgB,EAAE,IAHV;AAIRC,gCAAkB,EAAE,SAJZ;AAKRC,+BAAiB,EAAE,MALX;AAMRC,+BAAiB,EAAE;AANX,aAAV,EAOGC,IAPH,CAOQ,UAACC,MAAD,EAAY;AAClB,kBAAIA,MAAM,CAACC,KAAX,EAAkB;AAChB,sBAAI,CAAC9C,UAAL,CAAgB+C,UAAhB,CAA2B,kDAAUrC,gBAArC,EAAuD,MAAI,CAACL,eAAL,CAAqB2C,EAA5E,EAAgFrC,SAAhF,CACE,YAAM;AACJ,wBAAI,CAACT,iBAAL,CAAuB+C,oBAAvB,CAA4C,yCAA5C;;AACA,wBAAI,CAACzB,kBAAL;;AACA,wBAAI,CAACjB,OAAL;AACD,iBALH;AAOD;AACF,aAjBD;AAkBD;AA3GwC;;AAAA;AAAA,S;;;;gBAXlC;;gBAHA;;gBAGY;;;;;;gBAalB,uD;AAAS,iBAAC,4DAAD;;;AAFCR,oCAA8B,6DAL1C,gEAAU;AACTmD,gBAAQ,EAAE,8BADD;AAETC,gBAAQ,EAAR,2FAFS;;AAAA,OAAV,CAK0C,GAA9BpD,8BAA8B,CAA9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCOAqD,2BAA2B;AAAA;AAAA,Q;;AAA3BA,iCAA2B,6DAXvC,+DAAS;AACRC,oBAAY,EAAE,CAAC,kGAAD,CADN;AAERC,eAAO,EAAE,CACP,4DADO,EAEP,2GAFO,EAGP,qEAHO,EAIP,kEAJO,EAKP,6DALO,EAMP,sFANO;AAFD,OAAT,CAWuC,GAA3BF,2BAA2B,CAA3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBb,UAAMG,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,CAAvB;;UAWaC,kCAAkC;AAAA;AAAA,Q;;AAAlCA,wCAAkC,6DAJ9C,+DAAS;AACRJ,eAAO,EAAE,CAAC,6DAAaK,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAERK,eAAO,EAAE,CAAC,4DAAD;AAFD,OAAT,CAI8C,GAAlCF,kCAAkC,CAAlC;;;;;;;;;;;;;;;;ACfb;AAAe;;;AAAA","file":"type-of-medium-execution-type-of-medium-execution-module-es5.js","sourcesContent":["export * from './form-action-buttons/form-action-buttons.component';\r\nexport * from './form-list/form-list.component';","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvbWFpbnRlbmFuY2UvdHlwZS1vZi1tZWRpdW0tZXhlY3V0aW9uL3R5cGUtb2YtbWVkaXVtLWV4ZWN1dGlvbi5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\r\nimport { TypeOfExecution } from 'app/core/models/type-of-execution.model';\r\nimport { TypeOfMediumExecution } from 'app/core/models/type-of-medium-execution.model';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-type-of-medium-execution',\r\n  templateUrl: './type-of-medium-execution.component.html',\r\n  styleUrls: ['./type-of-medium-execution.component.scss']\r\n})\r\nexport class TypeOfMediumExecutionComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<TypeOfExecution>;\r\n  displayedColumns: string[] = ['typeOfExecution', 'applyForTOA', 'applyForS2', 'status'];\r\n  statusList = [...STATUSES];\r\n\r\n  typeOfExecution = new TypeOfExecution();\r\n  typeOfExecutionList = [];\r\n\r\n  typeOfExecutionForm: FormGroup;\r\n\r\n  checked: boolean; // declared in HTML but not in component (feb 14 aot)\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.typeOfExecutions).subscribe((res: any) => {\r\n      this.typeOfExecutionList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<TypeOfExecution>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void{\r\n    this.apiService.save(ENDPOINTS.typeOfExecutions, this.typeOfExecution).subscribe(\r\n        (res: any) => {\r\n          if (res !== undefined){\r\n            this.sweetAlertService.success(res);\r\n          }\r\n        }, (err: any) => {\r\n          this.sweetAlertService.error(err);\r\n        }, () => {\r\n          this.resetFormValidator(),\r\n          this.getList();\r\n        }\r\n    )\r\n  }\r\n\r\n  getTypeOfExecution(): void {\r\n    this.apiService.findById(ENDPOINTS.typeOfExecutions, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.typeOfExecution = res.responseData.data;\r\n        console.log(res.responseData.data);\r\n\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.typeOfExecutions, this.typeOfExecution).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined){\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.resetFormValidator()\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.typeOfExecution.status = COMMON_FUNCTION.ACTIVE;\r\n    this.typeOfExecutionForm = this.formBuilder.group({\r\n      typeOfExecution: ['', Validators.required],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.typeOfExecution = new TypeOfExecution();\r\n    this.typeOfExecution.status = COMMON_FUNCTION.ACTIVE;\r\n    this.typeOfExecutionForm.markAsUntouched();\r\n    this.typeOfExecutionForm.markAsPristine();\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this type of execution?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.typeOfExecutions, this.typeOfExecution.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Type of execution successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TypeOfMediumExecutionRoutingModule } from './type-of-medium-execution-routing.module';\r\nimport { TypeOfMediumExecutionComponent } from './type-of-medium-execution.component';\r\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n\r\n@NgModule({\r\n  declarations: [TypeOfMediumExecutionComponent],\r\n  imports: [\r\n    CommonModule,\r\n    TypeOfMediumExecutionRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule,\r\n  ]\r\n})\r\nexport class TypeOfMediumExecutionModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TypeOfMediumExecutionComponent } from './type-of-medium-execution.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: TypeOfMediumExecutionComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class TypeOfMediumExecutionRoutingModule { }\r\n","export default \"<!--\\r\\n      THIS IS TYPE OF EXECUTION\\r\\n -->\\r\\n<form>\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12 title\\\">\\r\\n                <mat-label>\\r\\n                    Type Of Execution\\r\\n                </mat-label>\\r\\n            </div>\\r\\n        </div>\\r\\n        <hr>\\r\\n\\r\\n        <form [formGroup]=\\\"typeOfExecutionForm\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\">\\r\\n                    <mat-label>Type Of Execution <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n                    <input matInput [(ngModel)]=\\\"typeOfExecution.typeOfExecution\\\" name=\\\"typeOfExecution\\\"\\r\\n                        formControlName=\\\"typeOfExecution\\\">\\r\\n                </mat-form-field>\\r\\n\\r\\n                <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n                    <mat-label>Status</mat-label>\\r\\n                    <mat-select [(ngModel)]=\\\"typeOfExecution.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n                        <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n                            {{i.status}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-md-2\\\"></div>\\r\\n                <div class=\\\"col-md-1\\\"><b>Live</b></div>\\r\\n                <div class=\\\"col-md-1\\\">\\r\\n                    <mat-slide-toggle [(ngModel)]=\\\"typeOfExecution.live\\\"\\r\\n                        [ngModelOptions]=\\\"{standalone: true}\\\" [checked]=\\\"typeOfExecution?.live\\\"\\r\\n                        name=\\\"live\\\" color=\\\"warn\\\">\\r\\n                    </mat-slide-toggle>\\r\\n                </div>\\r\\n                <div class=\\\"col-md-5\\\">\\r\\n                  <b>True:</b> The application is for S1 only.<br>\\r\\n                  <b>False:</b> Can apply for Special Clearing Request/S2 Application.\\r\\n                </div>\\r\\n                <div class=\\\"col-md-2\\\"></div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row\\\"><br></div>\\r\\n\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-md-2\\\"></div>\\r\\n                <div class=\\\"col-md-1\\\"> <b>Apply for TOA</b></div>\\r\\n                <div class=\\\"col-md-1\\\">\\r\\n                  <mat-slide-toggle [(ngModel)]=\\\"typeOfExecution.applyForToa\\\"\\r\\n                      [ngModelOptions]=\\\"{standalone: true}\\\" [checked]=\\\"typeOfExecution?.applyForToa\\\"\\r\\n                      name=\\\"applyForToa\\\" color=\\\"warn\\\">\\r\\n                  </mat-slide-toggle>\\r\\n\\r\\n                </div>\\r\\n                <div class=\\\"col-md-5\\\">\\r\\n                  <b>True:</b> The application can only apply for TOA.<br>\\r\\n                  <b>False:</b> Unable to apply for TOA.\\r\\n                </div>\\r\\n                <div class=\\\"col-md-2\\\"></div>\\r\\n            </div>\\r\\n        </form>\\r\\n\\r\\n        <app-form-action-buttons [childObject]=\\\"typeOfExecution\\\" [childForm]=\\\"typeOfExecutionForm\\\"\\r\\n            (saveFunction)=\\\"save()\\\" (updateFunction)=\\\"update()\\\" (cancelFunction)=\\\"resetFormValidator()\\\" (deleteFunction)=\\\"delete()\\\">\\r\\n        </app-form-action-buttons>\\r\\n        <br>\\r\\n        <app-form-list [dataSource]=\\\"dataSource\\\" [displayedColumns]=\\\"displayedColumns\\\"\\r\\n            (selectInListFunction)=\\\"getTypeOfExecution()\\\"></app-form-list>\\r\\n\\r\\n    </div>\\r\\n</form>\\r\\n\";"]}