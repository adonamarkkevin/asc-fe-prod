{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/product/product.component.html","webpack:///src/app/modules/pages/maintenance/product/product.component.scss","webpack:///src/app/modules/pages/maintenance/product/product.component.ts"],"names":["ProductComponent","apiService","formBuilder","sweetAlertService","dataStorage","dialogRef","data","displayedColumns","statusList","product","productList","brandList","categoryList","isFromModal","showApproveRejectButton","isShowApproveDisapproveButtonByAdmin","userRole","getUserRole","dataForModal","dataFromModal","console","log","isUpdate","brand","getList","setFormValidator","getDropdownList","findAll","subscribe","res","responseData","dataSource","paginator","formListComponent","sort","activeBrands","category","filter","status","ACTIVE","FOR_APPROVAL","save","undefined","success","setS1NewProduct","err","error","close","getS1NewProduct","resetFormValidator","findById","idForUpdate","currentStatus","APPROVED","update","DISAPPROVED","toUpperCase","INACTIVE","productForm","group","description","required","markAsUntouched","markAsPristine","value","selected","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","deleteById","id","customSuccessMessage","selector","template"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCeFA,gBAAgB;AAmB3B,kCACUC,UADV,EAEUC,WAFV,EAGUC,iBAHV,EAIUC,WAJV,EAKqBC,SALrB,EAM8CC,IAN9C,EAMuD;AAAA;;AAL7C,eAAAL,UAAA,GAAAA,UAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAAC,iBAAA,GAAAA,iBAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACW,eAAAC,SAAA,GAAAA,SAAA;AACyB,eAAAC,IAAA,GAAAA,IAAA;AArB9C,eAAAC,gBAAA,GAA6B,CAAC,OAAD,EAAU,oBAAV,EAAgC,UAAhC,EAA4C,QAA5C,CAA7B;AACA,eAAAC,UAAA,sBAAiB,gDAAjB;AAEA,eAAAC,OAAA,GAAU,IAAI,+CAAJ,EAAV;AACA,eAAAC,WAAA,GAAc,EAAd;AACA,eAAAC,SAAA,GAAY,EAAZ;AACA,eAAAC,YAAA,GAAe,EAAf;AAEA,eAAAC,WAAA,GAAc,KAAd;AACA,eAAAC,uBAAA,GAA0B,KAA1B;AACA,eAAAC,oCAAA,GAAuC,KAAvC;AAEA,eAAAC,QAAA,GAAW,EAAX;AAWE,eAAKA,QAAL,GAAgB,KAAKZ,WAAL,CAAiBa,WAAjB,EAAhB;;AACA,cAAIX,IAAJ,EAAU;AACR,gBAAIA,IAAI,CAACY,YAAT,EAAuB;AACrB,kBAAMC,aAAa,GAAGb,IAAI,CAACY,YAA3B;AAEAE,qBAAO,CAACC,GAAR,CAAYF,aAAZ;AAEA,mBAAKN,WAAL,GAAmBM,aAAa,CAACN,WAAjC;AACA,mBAAKC,uBAAL,GAA+BK,aAAa,CAACG,QAA7C;;AAEA,kBAAIH,aAAa,CAACG,QAAlB,EAA4B;AAC1B,qBAAKb,OAAL,GAAeU,aAAa,CAACV,OAA7B;AACD,eAFD,MAEO;AACL,qBAAKA,OAAL,CAAac,KAAb,GAAqBJ,aAAa,CAACI,KAAnC;AACD;AACF;AACF;AACF;;AA5C0B;AAAA;AAAA,iBA8C3B,oBAAW;AACT,gBAAI,CAAC,KAAKV,WAAV,EAAuB;AACrB,mBAAKW,OAAL;AACD;;AACD,iBAAKC,gBAAL;AACA,iBAAKC,eAAL;AACD;AApD0B;AAAA;AAAA,iBAsD3B,mBAAO;AAAA;;AACL,iBAAKzB,UAAL,CAAgB0B,OAAhB,CAAwB,kDAAUlB,OAAlC,EAA2CmB,SAA3C,CAAqD,UAACC,GAAD,EAAc;AACjE,mBAAI,CAACnB,WAAL,GAAmBmB,GAAG,CAACC,YAAJ,CAAiBxB,IAApC;AACA,mBAAI,CAACyB,UAAL,GAAkB,IAAI,0EAAJ,CAAgCF,GAAG,CAACC,YAAJ,CAAiBxB,IAAjD,CAAlB;AACA,mBAAI,CAACyB,UAAL,CAAgBC,SAAhB,GAA4B,KAAI,CAACC,iBAAL,CAAuBD,SAAnD;AACA,mBAAI,CAACD,UAAL,CAAgBG,IAAhB,GAAuB,KAAI,CAACD,iBAAL,CAAuBC,IAA9C;AACD,aALD;AAMD;AA7D0B;AAAA;AAAA,iBA+D3B,2BAAkB;AAAA;;AAChB,iBAAKjC,UAAL,CAAgB0B,OAAhB,CAAwB,kDAAUQ,YAAlC,EAAgDP,SAAhD,CAA0D,UAACC,GAAD,EAAc;AACtE,oBAAI,CAAClB,SAAL,GAAiBkB,GAAG,CAACC,YAAJ,CAAiBxB,IAAlC;AACD,aAFD;AAIA,iBAAKL,UAAL,CAAgB0B,OAAhB,CAAwB,kDAAUS,QAAlC,EAA4CR,SAA5C,CAAsD,UAACC,GAAD,EAAc;AAClE,oBAAI,CAACjB,YAAL,GAAoBiB,GAAG,CAACC,YAAJ,CAAiBxB,IAArC;AACA,oBAAI,CAACM,YAAL,GAAoBiB,GAAG,CAACC,YAAJ,CAAiBxB,IAAjB,CAAsB+B,MAAtB,CAClB,UAACD,QAAD;AAAA,uBAAmBA,QAAQ,CAACE,MAAT,KAAoB,wDAAgBC,MAAvD;AAAA,eADkB,CAApB;AAED,aAJD;AAKD;AAzE0B;AAAA;AAAA,iBA2E3B,gBAAI;AAAA;;AACF,gBAAI,KAAK1B,WAAT,EAAsB;AACpB,mBAAKJ,OAAL,CAAa6B,MAAb,GAAsB,qDAAaE,YAAnC;AACD;;AACD,iBAAKvC,UAAL,CAAgBwC,IAAhB,CAAqB,kDAAUhC,OAA/B,EAAwC,KAAKA,OAA7C,EAAsDmB,SAAtD,CACE,UAACC,GAAD,EAAc;AACZ,kBAAIA,GAAG,KAAKa,SAAZ,EAAuB;AACrB,sBAAI,CAACvC,iBAAL,CAAuBwC,OAAvB,CAA+Bd,GAA/B;;AACA,sBAAI,CAACzB,WAAL,CAAiBwC,eAAjB,CAAiCf,GAAG,CAACC,YAAJ,CAAiBxB,IAAlD;AACD;AACF,aANH,EAMK,UAACuC,GAAD,EAAc;AACf,oBAAI,CAAC1C,iBAAL,CAAuB2C,KAAvB,CAA6BD,GAA7B;AACD,aARH,EAQK,YAAM;AACP;AACA,kBAAI,MAAI,CAAChC,WAAT,EAAsB;AACpB,sBAAI,CAACR,SAAL,CAAe0C,KAAf,CAAqB,MAAI,CAAC3C,WAAL,CAAiB4C,eAAjB,EAArB;AACD,eAFD,MAEO;AACL,sBAAI,CAACC,kBAAL;;AACA,sBAAI,CAACzB,OAAL;AACD;AACF,aAhBH;AAiBD;AAhG0B;AAAA;AAAA,iBAkG3B,sBAAU;AAAA;;AACR,iBAAKvB,UAAL,CAAgBiD,QAAhB,CAAyB,kDAAUzC,OAAnC,EAA4C,KAAKwB,iBAAL,CAAuBkB,WAAnE,EAAgFvB,SAAhF,CAA0F,UAACC,GAAD,EAAc;AACtG,kBAAIA,GAAJ,EAAS;AACP,sBAAI,CAACpB,OAAL,GAAeoB,GAAG,CAACC,YAAJ,CAAiBxB,IAAhC;AAEA,sBAAI,CAACS,oCAAL,GAA4C,MAAI,CAACN,OAAL,CAAa6B,MAAb,KAAwB,cAAxB,GAC1C,IAD0C,GACnC,KADT;AAED;AACF,aAPD;AAQD;AA3G0B;AAAA;AAAA,iBA6G3B,kBAAM;AAAA;;;;AACJ,gBAAI,kBAAKhC,IAAL,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEY,YAAX,MAAuB,IAAvB,IAAuB,aAAvB,GAAuB,MAAvB,GAAuB,GAAEkC,aAAzB,MAA2C,qDAAaZ,YAAxD,IAAwE,KAAK/B,OAAL,CAAa6B,MAAb,KAAwB,wDAAgBe,QAApH,EAA8H;AAC5H,mBAAK5C,OAAL,CAAa6B,MAAb,GAAsB,qDAAaE,YAAnC;AACD,aAFD,MAEO,IAAI,KAAK/B,OAAL,CAAa6B,MAAb,KAAwB,wDAAgBe,QAA5C,EAAsD;AAC3D,mBAAK5C,OAAL,CAAa6B,MAAb,GAAsB,wDAAgBC,MAAtC;AACD;;AAED,iBAAKtC,UAAL,CAAgBqD,MAAhB,CAAuB,kDAAU7C,OAAjC,EAA0C,KAAKA,OAA/C,EAAwDmB,SAAxD,CACE,UAACC,GAAD,EAAc;AACZ,kBAAIA,GAAG,KAAKa,SAAZ,EAAuB;AACrB,sBAAI,CAACvC,iBAAL,CAAuBwC,OAAvB,CAA+Bd,GAA/B;;AACA,oBAAI,MAAI,CAACpB,OAAL,CAAa6B,MAAb,KAAwB,wDAAgBiB,WAAhB,CAA4BC,WAA5B,EAAxB,IACF,MAAI,CAAC/C,OAAL,CAAa6B,MAAb,KAAwB,wDAAgBmB,QAAhB,CAAyBD,WAAzB,EAD1B,EACkE;AAChE,wBAAI,CAACpD,WAAL,CAAiBwC,eAAjB,CAAiCf,GAAG,CAACC,YAAJ,CAAiBxB,IAAlD;AACD,iBAHD,MAGO;AACL,wBAAI,CAACF,WAAL,CAAiBwC,eAAjB,CAAiC,IAAI,+CAAJ,EAAjC;AACD;AACF;AACF,aAXH,EAWK,UAACC,GAAD,EAAc;AACf,oBAAI,CAAC1C,iBAAL,CAAuB2C,KAAvB,CAA6BD,GAA7B;AACD,aAbH,EAaK,YAAM;AACP,kBAAI,MAAI,CAAChC,WAAT,EAAsB;AACpB,sBAAI,CAACR,SAAL,CAAe0C,KAAf,CAAqB,MAAI,CAAC3C,WAAL,CAAiB4C,eAAjB,EAArB;AACD,eAFD,MAEO;AACL,sBAAI,CAACC,kBAAL;;AACA,sBAAI,CAACzB,OAAL;AACD;AACF,aApBH;AAqBD;AAzI0B;AAAA;AAAA,iBA2I3B,4BAAgB;AACd,iBAAKf,OAAL,CAAa6B,MAAb,GAAsB,wDAAgBC,MAAtC;AACA,iBAAKmB,WAAL,GAAmB,KAAKxD,WAAL,CAAiByD,KAAjB,CAAuB;AACxCC,yBAAW,EAAE,CAAC,EAAD,EAAK,0DAAWC,QAAhB,CAD2B;AAExCvB,oBAAM,EAAE,CAAC,EAAD,CAFgC;AAGxCf,mBAAK,EAAE,CAAC,EAAD,EAAK,0DAAWsC,QAAhB,CAHiC;AAIxCzB,sBAAQ,EAAE,CAAC,EAAD,EAAK,0DAAWyB,QAAhB;AAJ8B,aAAvB,CAAnB;AAMD;AAnJ0B;AAAA;AAAA,iBAqJ3B,8BAAkB;AAChB,iBAAKpD,OAAL,GAAe,IAAI,+CAAJ,EAAf;AACA,iBAAKM,oCAAL,GAA4C,KAA5C;AACA,iBAAKN,OAAL,CAAa6B,MAAb,GAAsB,wDAAgBC,MAAtC;AACA,iBAAKmB,WAAL,CAAiBI,eAAjB;AACA,iBAAKJ,WAAL,CAAiBK,cAAjB;AACD;AA3J0B;AAAA;AAAA,iBA6J3B,yBAAgBC,KAAhB,EAA4BC,QAA5B,EAAyC;AACvC,gBAAID,KAAK,IAAIC,QAAb,EAAuB;AACrB,qBAAOD,KAAK,CAACJ,WAAN,KAAsBK,QAAQ,CAACL,WAAtC;AACD;AACF;AAjK0B;AAAA;AAAA,iBAmK3B,sBAAaI,KAAb,EAAyBC,QAAzB,EAAsC;AACpC,gBAAID,KAAK,IAAIC,QAAb,EAAuB;AACrB,qBAAOD,KAAK,CAACJ,WAAN,KAAsBK,QAAQ,CAACL,WAAtC;AACD;AACF;AAvK0B;AAAA;AAAA,iBAyK3B,mBAAS;AAAA;;AAEP,gEAAKM,IAAL,CAAU;AACRC,kBAAI,EAAE,+CADE;AAERC,kBAAI,EAAE,UAFE;AAGRC,8BAAgB,EAAE,IAHV;AAIRC,gCAAkB,EAAE,SAJZ;AAKRC,+BAAiB,EAAE,MALX;AAMRC,+BAAiB,EAAE;AANX,aAAV,EAOGC,IAPH,CAOQ,UAACC,MAAD,EAAY;AAClB,kBAAIA,MAAM,CAACV,KAAX,EAAkB;AAChB,sBAAI,CAAC/D,UAAL,CAAgB0E,UAAhB,CAA2B,kDAAUlE,OAArC,EAA8C,MAAI,CAACA,OAAL,CAAamE,EAA3D,EAA+DhD,SAA/D,CACE,YAAM;AACJ,wBAAI,CAACzB,iBAAL,CAAuB0E,oBAAvB,CAA4C,+BAA5C;;AACA,wBAAI,CAAC5B,kBAAL;;AACA,wBAAI,CAACzB,OAAL;AACD,iBALH;AAOD;AACF,aAjBD;AAkBD;AA7L0B;AAAA;AAAA,iBA+L3B,mBAAU;AACR,iBAAKf,OAAL,CAAa6B,MAAb,GAAsB,UAAtB;AACA,iBAAKgB,MAAL;AACD;AAlM0B;AAAA;AAAA,iBAoM3B,kBAAS;AACP,iBAAK7C,OAAL,CAAa6B,MAAb,GAAsB,aAAtB;AACA,iBAAKgB,MAAL;AACD;AAvM0B;;AAAA;AAAA,S;;;;gBAXpB;;gBAHA;;gBAGgC;;gBAApB;;gBAIZ,sE;AAAc,oBAAF;AAAA,kBA+BhB;AA/BgB;;;;kBAgChB;aAAQ;AAAA,kBAAI,oDAAJ;AAAU,mBAAC,yEAAD;AAAV,W;;;;;;gBAvBV,uD;AAAS,iBAAC,4DAAD;;;AAFCtD,sBAAgB,6DAL5B,gEAAU;AACT8E,gBAAQ,EAAE,aADD;AAETC,gBAAQ,EAAR,0EAFS;;AAAA,OAAV,CAK4B,GAAhB/E,gBAAgB,CAAhB","file":"default~applications-applications-module~product-product-module-es5.js","sourcesContent":["export default \"<form>\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12 title\\\">\\r\\n        <mat-label>\\r\\n          Product\\r\\n        </mat-label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <hr>\\r\\n\\r\\n    <form [formGroup]=\\\"productForm\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label> Brand </mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"product.brand\\\" name=\\\"brand\\\" formControlName=\\\"brand\\\" [compareWith]=\\\"compareBrand\\\"\\r\\n            [disabled]=\\\"isFromModal\\\">\\r\\n            <mat-option *ngFor=\\\"let i of brandList\\\" [value]=\\\"i\\\">\\r\\n              {{i.description}}\\r\\n            </mat-option>\\r\\n            <mat-option *ngIf=\\\"isFromModal\\\">\\r\\n              {{ product?.brand?.description }}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field class=\\\"col-md-10\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Product <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <input matInput [(ngModel)]=\\\"product.description\\\" name=\\\"description\\\" formControlName=\\\"description\\\">\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Category <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"product.category\\\" name=\\\"category\\\" formControlName=\\\"category\\\"\\r\\n            [compareWith]=\\\"compareCategory\\\">\\r\\n            <mat-option *ngFor=\\\"let i of categoryList\\\" [value]=\\\"i\\\">\\r\\n              {{i.description}}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field class=\\\"col-md-2\\\" appearance=\\\"outline\\\" [hidden]=\\\"isFromModal\\\"\\r\\n          *ngIf=\\\"(userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' || userRole === 'ROLE_ENCODER') && product.id\\\">\\r\\n          <mat-label>Status</mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"product.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n            <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n              {{i.status}}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n    </form>\\r\\n\\r\\n    <app-form-action-buttons [showApproveRejectButton]=\\\"showApproveRejectButton\\\" [isFromModal]=\\\"isFromModal\\\"\\r\\n      [childObject]=\\\"product\\\" [childForm]=\\\"productForm\\\" (saveFunction)=\\\"save()\\\" (updateFunction)=\\\"update()\\\"\\r\\n      (approveFunction)=\\\"approve()\\\" (rejectFunction)=\\\"reject()\\\" (cancelFunction)=\\\"resetFormValidator()\\\"\\r\\n      (closeModalFunction)=\\\"resetFormValidator()\\\" (deleteFunction)=\\\"delete()\\\" [isShowApproveDisapproveButton]=\\\"isShowApproveDisapproveButtonByAdmin\\\">\\r\\n    </app-form-action-buttons>\\r\\n    <br>\\r\\n    <ng-container\\r\\n      *ngIf=\\\"(!showApproveRejectButton && !isFromModal) || userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' \\\">\\r\\n      <app-form-list [dataSource]=\\\"dataSource\\\" [displayedColumns]=\\\"displayedColumns\\\"\\r\\n        (selectInListFunction)=\\\"getProduct()\\\" [hidden]=\\\"isFromModal\\\"></app-form-list>\\r\\n    </ng-container>\\r\\n\\r\\n  </div>\\r\\n</form>\\r\\n\\r\\n\\r\\n<!-- <form>\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-12 title\\\">\\r\\n          <mat-label>\\r\\n            Product\\r\\n          </mat-label>\\r\\n        </div>\\r\\n      </div>\\r\\n      <hr>\\r\\n\\r\\n      <form [formGroup]=\\\"productForm\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label>Category</mat-label>\\r\\n                <mat-select [(ngModel)]=\\\"product.category\\\" name=\\\"category\\\" formControlName=\\\"category\\\">\\r\\n                  <mat-option *ngFor=\\\"let i of categoryList\\\" [value]=\\\"i\\\">\\r\\n                    {{i.description}}\\r\\n                  </mat-option>\\r\\n                </mat-select>\\r\\n              </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n          <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Description: <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"product.description\\\" name=\\\"description\\\" formControlName=\\\"description\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Status</mat-label>\\r\\n            <mat-select [(ngModel)]=\\\"product.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n              <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n                {{i.status}}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n      </form>\\r\\n\\r\\n      <app-form-action-buttons [childObject]=\\\"product\\\" [childForm]=\\\"productForm\\\" (saveFunction)=\\\"save()\\\"\\r\\n        (updateFunction)=\\\"update()\\\" (cancelFunction)=\\\"resetFormValidator()\\\"></app-form-action-buttons>\\r\\n      <br> -->\\r\\n<!-- <app-form-list [dataSource]=\\\"dataSource\\\" [displayedColumns]=\\\"displayedColumns\\\"\\r\\n        (selectInListFunction)=\\\"getProduct)\\\"></app-form-list> -->\\r\\n\\r\\n<!-- </div>\\r\\n  </form> -->\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvbWFpbnRlbmFuY2UvcHJvZHVjdC9wcm9kdWN0LmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, Inject, OnInit, Optional, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, OTHER_STATUS, STATUSES } from '@shared';\r\nimport { Product } from '@models';\r\nimport Swal from 'sweetalert2';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-product',\r\n  templateUrl: './product.component.html',\r\n  styleUrls: ['./product.component.scss']\r\n})\r\nexport class ProductComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent\r\n  dataSource: MatTableDataSource<Product>;\r\n  displayedColumns: string[] = ['brand', 'productDescription', 'category', 'status'];\r\n  statusList = [...STATUSES];\r\n\r\n  product = new Product();\r\n  productList = [];\r\n  brandList = [];\r\n  categoryList = [];\r\n\r\n  isFromModal = false;\r\n  showApproveRejectButton = false;\r\n  isShowApproveDisapproveButtonByAdmin = false;\r\n\r\n  userRole = '';\r\n\r\n  productForm: FormGroup;\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n    private dataStorage: DataStorageService,\r\n    @Optional() public dialogRef: MatDialogRef<ProductComponent>,\r\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any,\r\n  ) {\r\n    this.userRole = this.dataStorage.getUserRole();\r\n    if (data) {\r\n      if (data.dataForModal) {\r\n        const dataFromModal = data.dataForModal;\r\n\r\n        console.log(dataFromModal);\r\n\r\n        this.isFromModal = dataFromModal.isFromModal;\r\n        this.showApproveRejectButton = dataFromModal.isUpdate;\r\n\r\n        if (dataFromModal.isUpdate) {\r\n          this.product = dataFromModal.product;\r\n        } else {\r\n          this.product.brand = dataFromModal.brand;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.isFromModal) {\r\n      this.getList();\r\n    }\r\n    this.setFormValidator();\r\n    this.getDropdownList();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.product).subscribe((res: any) => {\r\n      this.productList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<Product>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  getDropdownList() {\r\n    this.apiService.findAll(ENDPOINTS.activeBrands).subscribe((res: any) => {\r\n      this.brandList = res.responseData.data;\r\n    });\r\n\r\n    this.apiService.findAll(ENDPOINTS.category).subscribe((res: any) => {\r\n      this.categoryList = res.responseData.data;\r\n      this.categoryList = res.responseData.data.filter(\r\n        (category: any) => category.status === COMMON_FUNCTION.ACTIVE);\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    if (this.isFromModal) {\r\n      this.product.status = OTHER_STATUS.FOR_APPROVAL;\r\n    }\r\n    this.apiService.save(ENDPOINTS.product, this.product).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n          this.dataStorage.setS1NewProduct(res.responseData.data);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.dataStorage.getS1NewProduct());\r\n        } else {\r\n          this.resetFormValidator();\r\n          this.getList();\r\n        }\r\n      });\r\n  }\r\n\r\n  getProduct(): void {\r\n    this.apiService.findById(ENDPOINTS.product, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.product = res.responseData.data;\r\n\r\n        this.isShowApproveDisapproveButtonByAdmin = this.product.status === 'FOR_APPROVAL' ?\r\n          true : false;\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    if (this.data?.dataForModal?.currentStatus === OTHER_STATUS.FOR_APPROVAL && this.product.status !== COMMON_FUNCTION.APPROVED) {\r\n      this.product.status = OTHER_STATUS.FOR_APPROVAL;\r\n    } else if (this.product.status === COMMON_FUNCTION.APPROVED) {\r\n      this.product.status = COMMON_FUNCTION.ACTIVE;\r\n    }\r\n\r\n    this.apiService.update(ENDPOINTS.product, this.product).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n          if (this.product.status !== COMMON_FUNCTION.DISAPPROVED.toUpperCase() &&\r\n            this.product.status !== COMMON_FUNCTION.INACTIVE.toUpperCase()) {\r\n            this.dataStorage.setS1NewProduct(res.responseData.data);\r\n          } else {\r\n            this.dataStorage.setS1NewProduct(new Product());\r\n          }\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.dataStorage.getS1NewProduct());\r\n        } else {\r\n          this.resetFormValidator();\r\n          this.getList();\r\n        }\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.product.status = COMMON_FUNCTION.ACTIVE;\r\n    this.productForm = this.formBuilder.group({\r\n      description: ['', Validators.required],\r\n      status: [''],\r\n      brand: ['', Validators.required],\r\n      category: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.product = new Product();\r\n    this.isShowApproveDisapproveButtonByAdmin = false;\r\n    this.product.status = COMMON_FUNCTION.ACTIVE;\r\n    this.productForm.markAsUntouched();\r\n    this.productForm.markAsPristine();\r\n  }\r\n\r\n  compareCategory(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  compareBrand(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  delete() {\r\n\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this product?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.product, this.product.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Product successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  approve() {\r\n    this.product.status = 'APPROVED';\r\n    this.update();\r\n  }\r\n\r\n  reject() {\r\n    this.product.status = 'DISAPPROVED';\r\n    this.update();\r\n  }\r\n\r\n}\r\n"]}