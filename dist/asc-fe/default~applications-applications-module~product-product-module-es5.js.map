{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/product/product.component.ts","webpack:///src/app/modules/pages/maintenance/product/product.component.html"],"names":["ProductComponent","apiService","formBuilder","sweetAlertService","dataStorage","dialogRef","data","displayedColumns","statusList","product","productList","brandList","categoryList","isFromModal","showApproveRejectButton","isShowApproveDisapproveButtonByAdmin","userRole","getUserRole","dataForModal","dataFromModal","console","log","isUpdate","brand","getList","setFormValidator","getDropdownList","findAll","subscribe","res","responseData","dataSource","paginator","formListComponent","sort","activeBrands","category","filter","status","ACTIVE","FOR_APPROVAL","save","undefined","success","setS1NewProduct","err","error","close","getS1NewProduct","resetFormValidator","findById","idForUpdate","currentStatus","APPROVED","update","DISAPPROVED","toUpperCase","INACTIVE","productForm","group","description","required","markAsUntouched","markAsPristine","value","selected","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","deleteById","id","customSuccessMessage","approve","reject"],"mappings":"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","file":"default~applications-applications-module~product-product-module-es5.js","sourcesContent":["import { Component, Inject, OnInit, Optional, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { FormListComponent } from '@fragments';\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\nimport { COMMON_FUNCTION, ENDPOINTS, OTHER_STATUS, STATUSES } from '@shared';\nimport { Product } from '@models';\nimport Swal from 'sweetalert2';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.scss']\n})\nexport class ProductComponent implements OnInit {\n\n  @ViewChild(FormListComponent) formListComponent: FormListComponent\n  dataSource: MatTableDataSource<Product>;\n  displayedColumns: string[] = ['brand', 'productDescription', 'category', 'status'];\n  statusList = [...STATUSES];\n\n  product = new Product();\n  productList = [];\n  brandList = [];\n  categoryList = [];\n\n  isFromModal = false;\n  showApproveRejectButton = false;\n  isShowApproveDisapproveButtonByAdmin = false;\n\n  userRole = '';\n\n  productForm: FormGroup;\n  constructor(\n    private apiService: ApiService,\n    private formBuilder: FormBuilder,\n    private sweetAlertService: SweetAlertService,\n    private dataStorage: DataStorageService,\n    @Optional() public dialogRef: MatDialogRef<ProductComponent>,\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any,\n  ) {\n    this.userRole = this.dataStorage.getUserRole();\n    if (data) {\n      if (data.dataForModal) {\n        const dataFromModal = data.dataForModal;\n\n        console.log(dataFromModal);\n\n        this.isFromModal = dataFromModal.isFromModal;\n        this.showApproveRejectButton = dataFromModal.isUpdate;\n\n        if (dataFromModal.isUpdate) {\n          this.product = dataFromModal.product;\n        } else {\n          this.product.brand = dataFromModal.brand;\n        }\n      }\n    }\n  }\n\n  ngOnInit() {\n    if (!this.isFromModal) {\n      this.getList();\n    }\n    this.setFormValidator();\n    this.getDropdownList();\n  }\n\n  getList(): void {\n    this.apiService.findAll(ENDPOINTS.product).subscribe((res: any) => {\n      this.productList = res.responseData.data;\n      this.dataSource = new MatTableDataSource<Product>(res.responseData.data);\n      this.dataSource.paginator = this.formListComponent.paginator;\n      this.dataSource.sort = this.formListComponent.sort;\n    });\n  }\n\n  getDropdownList() {\n    this.apiService.findAll(ENDPOINTS.activeBrands).subscribe((res: any) => {\n      this.brandList = res.responseData.data;\n    });\n\n    this.apiService.findAll(ENDPOINTS.category).subscribe((res: any) => {\n      this.categoryList = res.responseData.data;\n      this.categoryList = res.responseData.data.filter(\n        (category: any) => category.status === COMMON_FUNCTION.ACTIVE);\n    });\n  }\n\n  save(): void {\n    if (this.isFromModal) {\n      this.product.status = OTHER_STATUS.FOR_APPROVAL;\n    }\n    this.apiService.save(ENDPOINTS.product, this.product).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.success(res);\n          this.dataStorage.setS1NewProduct(res.responseData.data);\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        // actions after subscription\n        if (this.isFromModal) {\n          this.dialogRef.close(this.dataStorage.getS1NewProduct());\n        } else {\n          this.resetFormValidator();\n          this.getList();\n        }\n      });\n  }\n\n  getProduct(): void {\n    this.apiService.findById(ENDPOINTS.product, this.formListComponent.idForUpdate).subscribe((res: any) => {\n      if (res) {\n        this.product = res.responseData.data;\n\n        this.isShowApproveDisapproveButtonByAdmin = this.product.status === 'FOR_APPROVAL' ?\n          true : false;\n      }\n    });\n  }\n\n  update(): void {\n    if (this.data?.dataForModal?.currentStatus === OTHER_STATUS.FOR_APPROVAL && this.product.status !== COMMON_FUNCTION.APPROVED) {\n      this.product.status = OTHER_STATUS.FOR_APPROVAL;\n    } else if (this.product.status === COMMON_FUNCTION.APPROVED) {\n      this.product.status = COMMON_FUNCTION.ACTIVE;\n    }\n\n    this.apiService.update(ENDPOINTS.product, this.product).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.success(res);\n          if (this.product.status !== COMMON_FUNCTION.DISAPPROVED.toUpperCase() &&\n            this.product.status !== COMMON_FUNCTION.INACTIVE.toUpperCase()) {\n            this.dataStorage.setS1NewProduct(res.responseData.data);\n          } else {\n            this.dataStorage.setS1NewProduct(new Product());\n          }\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        if (this.isFromModal) {\n          this.dialogRef.close(this.dataStorage.getS1NewProduct());\n        } else {\n          this.resetFormValidator();\n          this.getList();\n        }\n      });\n  }\n\n  setFormValidator(): void {\n    this.product.status = COMMON_FUNCTION.ACTIVE;\n    this.productForm = this.formBuilder.group({\n      description: ['', Validators.required],\n      status: [''],\n      brand: ['', Validators.required],\n      category: ['', Validators.required]\n    });\n  }\n\n  resetFormValidator(): void {\n    this.product = new Product();\n    this.isShowApproveDisapproveButtonByAdmin = false;\n    this.product.status = COMMON_FUNCTION.ACTIVE;\n    this.productForm.markAsUntouched();\n    this.productForm.markAsPristine();\n  }\n\n  compareCategory(value: any, selected: any): boolean {\n    if (value && selected) {\n      return value.description === selected.description;\n    }\n  }\n\n  compareBrand(value: any, selected: any): boolean {\n    if (value && selected) {\n      return value.description === selected.description;\n    }\n  }\n\n  delete() {\n\n    Swal.fire({\n      text: 'Are you sure you want to delete this product?',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Confirm'\n    }).then((result) => {\n      if (result.value) {\n        this.apiService.deleteById(ENDPOINTS.product, this.product.id).subscribe(\n          () => {\n            this.sweetAlertService.customSuccessMessage('Product successfully deleted.');\n            this.resetFormValidator();\n            this.getList();\n          }\n        );\n      }\n    });\n  }\n\n  approve() {\n    this.product.status = 'APPROVED';\n    this.update();\n  }\n\n  reject() {\n    this.product.status = 'DISAPPROVED';\n    this.update();\n  }\n\n}\n","<form>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-12 title\">\n        <mat-label>\n          Product\n        </mat-label>\n      </div>\n    </div>\n    <hr>\n\n    <form [formGroup]=\"productForm\">\n      <div class=\"row\">\n        <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n          <mat-label> Brand </mat-label>\n          <mat-select [(ngModel)]=\"product.brand\" name=\"brand\" formControlName=\"brand\" [compareWith]=\"compareBrand\"\n            [disabled]=\"isFromModal\">\n            <mat-option *ngFor=\"let i of brandList\" [value]=\"i\">\n              {{i.description}}\n            </mat-option>\n            <mat-option *ngIf=\"isFromModal\">\n              {{ product?.brand?.description }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field class=\"col-md-10\" appearance=\"outline\">\n          <mat-label>Product <span class=\"required-field\">*</span></mat-label>\n          <input matInput [(ngModel)]=\"product.description\" name=\"description\" formControlName=\"description\">\n        </mat-form-field>\n\n        <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n          <mat-label>Category <span class=\"required-field\">*</span></mat-label>\n          <mat-select [(ngModel)]=\"product.category\" name=\"category\" formControlName=\"category\"\n            [compareWith]=\"compareCategory\">\n            <mat-option *ngFor=\"let i of categoryList\" [value]=\"i\">\n              {{i.description}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field class=\"col-md-2\" appearance=\"outline\" [hidden]=\"isFromModal\"\n          *ngIf=\"(userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' || userRole === 'ROLE_ENCODER') && product.id\">\n          <mat-label>Status</mat-label>\n          <mat-select [(ngModel)]=\"product.status\" name=\"status\" formControlName=\"status\">\n            <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\n              {{i.status}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </form>\n\n    <app-form-action-buttons [showApproveRejectButton]=\"showApproveRejectButton\" [isFromModal]=\"isFromModal\"\n      [childObject]=\"product\" [childForm]=\"productForm\" (saveFunction)=\"save()\" (updateFunction)=\"update()\"\n      (approveFunction)=\"approve()\" (rejectFunction)=\"reject()\" (cancelFunction)=\"resetFormValidator()\"\n      (closeModalFunction)=\"resetFormValidator()\" (deleteFunction)=\"delete()\" [isShowApproveDisapproveButton]=\"isShowApproveDisapproveButtonByAdmin\">\n    </app-form-action-buttons>\n    <br>\n    <ng-container\n      *ngIf=\"(!showApproveRejectButton && !isFromModal) || userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' \">\n      <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\n        (selectInListFunction)=\"getProduct()\" [hidden]=\"isFromModal\"></app-form-list>\n    </ng-container>\n\n  </div>\n</form>\n\n\n<!-- <form>\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-md-12 title\">\n          <mat-label>\n            Product\n          </mat-label>\n        </div>\n      </div>\n      <hr>\n\n      <form [formGroup]=\"productForm\">\n        <div class=\"row\">\n            <mat-form-field class=\"col-md-4\" appearance=\"outline\">\n                <mat-label>Category</mat-label>\n                <mat-select [(ngModel)]=\"product.category\" name=\"category\" formControlName=\"category\">\n                  <mat-option *ngFor=\"let i of categoryList\" [value]=\"i\">\n                    {{i.description}}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n        </div>\n\n        <div class=\"row\">\n          <mat-form-field class=\"col-md-8\" appearance=\"outline\">\n            <mat-label>Description: <span class=\"required-field\">*</span></mat-label>\n            <input matInput [(ngModel)]=\"product.description\" name=\"description\" formControlName=\"description\">\n          </mat-form-field>\n\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\">\n            <mat-label>Status</mat-label>\n            <mat-select [(ngModel)]=\"product.status\" name=\"status\" formControlName=\"status\">\n              <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\n                {{i.status}}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n      </form>\n\n      <app-form-action-buttons [childObject]=\"product\" [childForm]=\"productForm\" (saveFunction)=\"save()\"\n        (updateFunction)=\"update()\" (cancelFunction)=\"resetFormValidator()\"></app-form-action-buttons>\n      <br> -->\n<!-- <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\n        (selectInListFunction)=\"getProduct)\"></app-form-list> -->\n\n<!-- </div>\n  </form> -->"]}