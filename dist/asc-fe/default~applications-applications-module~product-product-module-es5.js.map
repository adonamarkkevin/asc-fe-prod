<<<<<<< HEAD
{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/product/product.component.ts","webpack:///src/app/modules/pages/maintenance/product/product.component.html"],"names":["ProductComponent","apiService","formBuilder","sweetAlertService","dataStorage","dialogRef","data","displayedColumns","statusList","product","productList","brandList","categoryList","isFromModal","showApproveRejectButton","isShowApproveDisapproveButtonByAdmin","userRole","getUserRole","dataForModal","dataFromModal","console","log","isUpdate","brand","getList","setFormValidator","getDropdownList","findAll","subscribe","res","responseData","dataSource","paginator","formListComponent","sort","activeBrands","category","filter","status","ACTIVE","FOR_APPROVAL","save","undefined","success","setS1NewProduct","err","error","close","getS1NewProduct","resetFormValidator","findById","idForUpdate","currentStatus","APPROVED","update","DISAPPROVED","toUpperCase","INACTIVE","productForm","group","description","required","markAsUntouched","markAsPristine","value","selected","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","deleteById","id","customSuccessMessage","approve","reject"],"mappings":"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","file":"default~applications-applications-module~product-product-module-es5.js","sourcesContent":["import { Component, Inject, OnInit, Optional, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, OTHER_STATUS, STATUSES } from '@shared';\r\nimport { Product } from '@models';\r\nimport Swal from 'sweetalert2';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-product',\r\n  templateUrl: './product.component.html',\r\n  styleUrls: ['./product.component.scss']\r\n})\r\nexport class ProductComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent\r\n  dataSource: MatTableDataSource<Product>;\r\n  displayedColumns: string[] = ['brand', 'productDescription', 'category', 'status'];\r\n  statusList = [...STATUSES];\r\n\r\n  product = new Product();\r\n  productList = [];\r\n  brandList = [];\r\n  categoryList = [];\r\n\r\n  isFromModal = false;\r\n  showApproveRejectButton = false;\r\n  isShowApproveDisapproveButtonByAdmin = false;\r\n\r\n  userRole = '';\r\n\r\n  productForm: FormGroup;\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n    private dataStorage: DataStorageService,\r\n    @Optional() public dialogRef: MatDialogRef<ProductComponent>,\r\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any,\r\n  ) {\r\n    this.userRole = this.dataStorage.getUserRole();\r\n    if (data) {\r\n      if (data.dataForModal) {\r\n        const dataFromModal = data.dataForModal;\r\n\r\n        console.log(dataFromModal);\r\n\r\n        this.isFromModal = dataFromModal.isFromModal;\r\n        this.showApproveRejectButton = dataFromModal.isUpdate;\r\n\r\n        if (dataFromModal.isUpdate) {\r\n          this.product = dataFromModal.product;\r\n        } else {\r\n          this.product.brand = dataFromModal.brand;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.isFromModal) {\r\n      this.getList();\r\n    }\r\n    this.setFormValidator();\r\n    this.getDropdownList();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.product).subscribe((res: any) => {\r\n      this.productList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<Product>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  getDropdownList() {\r\n    this.apiService.findAll(ENDPOINTS.activeBrands).subscribe((res: any) => {\r\n      this.brandList = res.responseData.data;\r\n    });\r\n\r\n    this.apiService.findAll(ENDPOINTS.category).subscribe((res: any) => {\r\n      this.categoryList = res.responseData.data;\r\n      this.categoryList = res.responseData.data.filter(\r\n        (category: any) => category.status === COMMON_FUNCTION.ACTIVE);\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    if (this.isFromModal) {\r\n      this.product.status = OTHER_STATUS.FOR_APPROVAL;\r\n    }\r\n    this.apiService.save(ENDPOINTS.product, this.product).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n          this.dataStorage.setS1NewProduct(res.responseData.data);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.dataStorage.getS1NewProduct());\r\n        } else {\r\n          this.resetFormValidator();\r\n          this.getList();\r\n        }\r\n      });\r\n  }\r\n\r\n  getProduct(): void {\r\n    this.apiService.findById(ENDPOINTS.product, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.product = res.responseData.data;\r\n\r\n        this.isShowApproveDisapproveButtonByAdmin = this.product.status === 'FOR_APPROVAL' ?\r\n          true : false;\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    if (this.data?.dataForModal?.currentStatus === OTHER_STATUS.FOR_APPROVAL && this.product.status !== COMMON_FUNCTION.APPROVED) {\r\n      this.product.status = OTHER_STATUS.FOR_APPROVAL;\r\n    } else if (this.product.status === COMMON_FUNCTION.APPROVED) {\r\n      this.product.status = COMMON_FUNCTION.ACTIVE;\r\n    }\r\n\r\n    this.apiService.update(ENDPOINTS.product, this.product).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n          if (this.product.status !== COMMON_FUNCTION.DISAPPROVED.toUpperCase() &&\r\n            this.product.status !== COMMON_FUNCTION.INACTIVE.toUpperCase()) {\r\n            this.dataStorage.setS1NewProduct(res.responseData.data);\r\n          } else {\r\n            this.dataStorage.setS1NewProduct(new Product());\r\n          }\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.dataStorage.getS1NewProduct());\r\n        } else {\r\n          this.resetFormValidator();\r\n          this.getList();\r\n        }\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.product.status = COMMON_FUNCTION.ACTIVE;\r\n    this.productForm = this.formBuilder.group({\r\n      description: ['', Validators.required],\r\n      status: [''],\r\n      brand: ['', Validators.required],\r\n      category: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.product = new Product();\r\n    this.isShowApproveDisapproveButtonByAdmin = false;\r\n    this.product.status = COMMON_FUNCTION.ACTIVE;\r\n    this.productForm.markAsUntouched();\r\n    this.productForm.markAsPristine();\r\n  }\r\n\r\n  compareCategory(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  compareBrand(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  delete() {\r\n\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this product?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.product, this.product.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Product successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  approve() {\r\n    this.product.status = 'APPROVED';\r\n    this.update();\r\n  }\r\n\r\n  reject() {\r\n    this.product.status = 'DISAPPROVED';\r\n    this.update();\r\n  }\r\n\r\n}\r\n","<form>\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 title\">\r\n        <mat-label>\r\n          Product\r\n        </mat-label>\r\n      </div>\r\n    </div>\r\n    <hr>\r\n\r\n    <form [formGroup]=\"productForm\">\r\n      <div class=\"row\">\r\n        <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n          <mat-label> Brand </mat-label>\r\n          <mat-select [(ngModel)]=\"product.brand\" name=\"brand\" formControlName=\"brand\" [compareWith]=\"compareBrand\"\r\n            [disabled]=\"isFromModal\">\r\n            <mat-option *ngFor=\"let i of brandList\" [value]=\"i\">\r\n              {{i.description}}\r\n            </mat-option>\r\n            <mat-option *ngIf=\"isFromModal\">\r\n              {{ product?.brand?.description }}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field class=\"col-md-10\" appearance=\"outline\">\r\n          <mat-label>Product <span class=\"required-field\">*</span></mat-label>\r\n          <input matInput [(ngModel)]=\"product.description\" name=\"description\" formControlName=\"description\">\r\n        </mat-form-field>\r\n\r\n        <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n          <mat-label>Category <span class=\"required-field\">*</span></mat-label>\r\n          <mat-select [(ngModel)]=\"product.category\" name=\"category\" formControlName=\"category\"\r\n            [compareWith]=\"compareCategory\">\r\n            <mat-option *ngFor=\"let i of categoryList\" [value]=\"i\">\r\n              {{i.description}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field class=\"col-md-2\" appearance=\"outline\" [hidden]=\"isFromModal\"\r\n          *ngIf=\"(userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' || userRole === 'ROLE_ENCODER') && product.id\">\r\n          <mat-label>Status</mat-label>\r\n          <mat-select [(ngModel)]=\"product.status\" name=\"status\" formControlName=\"status\">\r\n            <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n              {{i.status}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n    </form>\r\n\r\n    <app-form-action-buttons [showApproveRejectButton]=\"showApproveRejectButton\" [isFromModal]=\"isFromModal\"\r\n      [childObject]=\"product\" [childForm]=\"productForm\" (saveFunction)=\"save()\" (updateFunction)=\"update()\"\r\n      (approveFunction)=\"approve()\" (rejectFunction)=\"reject()\" (cancelFunction)=\"resetFormValidator()\"\r\n      (closeModalFunction)=\"resetFormValidator()\" (deleteFunction)=\"delete()\" [isShowApproveDisapproveButton]=\"isShowApproveDisapproveButtonByAdmin\">\r\n    </app-form-action-buttons>\r\n    <br>\r\n    <ng-container\r\n      *ngIf=\"(!showApproveRejectButton && !isFromModal) || userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' \">\r\n      <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\r\n        (selectInListFunction)=\"getProduct()\" [hidden]=\"isFromModal\"></app-form-list>\r\n    </ng-container>\r\n\r\n  </div>\r\n</form>\r\n\r\n\r\n<!-- <form>\r\n    <div class=\"container\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12 title\">\r\n          <mat-label>\r\n            Product\r\n          </mat-label>\r\n        </div>\r\n      </div>\r\n      <hr>\r\n\r\n      <form [formGroup]=\"productForm\">\r\n        <div class=\"row\">\r\n            <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                <mat-label>Category</mat-label>\r\n                <mat-select [(ngModel)]=\"product.category\" name=\"category\" formControlName=\"category\">\r\n                  <mat-option *ngFor=\"let i of categoryList\" [value]=\"i\">\r\n                    {{i.description}}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <mat-form-field class=\"col-md-8\" appearance=\"outline\">\r\n            <mat-label>Description: <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"product.description\" name=\"description\" formControlName=\"description\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n            <mat-label>Status</mat-label>\r\n            <mat-select [(ngModel)]=\"product.status\" name=\"status\" formControlName=\"status\">\r\n              <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n                {{i.status}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n      </form>\r\n\r\n      <app-form-action-buttons [childObject]=\"product\" [childForm]=\"productForm\" (saveFunction)=\"save()\"\r\n        (updateFunction)=\"update()\" (cancelFunction)=\"resetFormValidator()\"></app-form-action-buttons>\r\n      <br> -->\r\n<!-- <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\r\n        (selectInListFunction)=\"getProduct)\"></app-form-list> -->\r\n\r\n<!-- </div>\r\n  </form> -->"]}
=======
{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/product/product.component.ts","webpack:///src/app/modules/pages/maintenance/product/product.component.html"],"names":["ProductComponent","apiService","formBuilder","sweetAlertService","dataStorage","dialogRef","data","displayedColumns","statusList","product","productList","brandList","categoryList","isFromModal","showApproveRejectButton","isShowApproveDisapproveButtonByAdmin","userRole","getUserRole","dataForModal","dataFromModal","console","log","isUpdate","brand","getList","setFormValidator","getDropdownList","findAll","subscribe","res","responseData","dataSource","paginator","formListComponent","sort","activeBrands","category","filter","status","ACTIVE","FOR_APPROVAL","save","undefined","success","setS1NewProduct","err","error","close","getS1NewProduct","resetFormValidator","findById","idForUpdate","currentStatus","APPROVED","update","DISAPPROVED","toUpperCase","INACTIVE","productForm","group","description","required","markAsUntouched","markAsPristine","value","selected","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","deleteById","id","customSuccessMessage","approve","reject"],"mappings":"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","file":"default~applications-applications-module~product-product-module-es5.js","sourcesContent":["import { Component, Inject, OnInit, Optional, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, OTHER_STATUS, STATUSES } from '@shared';\r\nimport { Product } from '@models';\r\nimport Swal from 'sweetalert2';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-product',\r\n  templateUrl: './product.component.html',\r\n  styleUrls: ['./product.component.scss']\r\n})\r\nexport class ProductComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent\r\n  dataSource: MatTableDataSource<Product>;\r\n  displayedColumns: string[] = ['brand', 'productDescription', 'category', 'status'];\r\n  statusList = [...STATUSES];\r\n\r\n  product = new Product();\r\n  productList = [];\r\n  brandList = [];\r\n  categoryList = [];\r\n\r\n  isFromModal = false;\r\n  showApproveRejectButton = false;\r\n  isShowApproveDisapproveButtonByAdmin = false;\r\n\r\n  userRole = '';\r\n\r\n  productForm: FormGroup;\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n    private dataStorage: DataStorageService,\r\n    @Optional() public dialogRef: MatDialogRef<ProductComponent>,\r\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any,\r\n  ) {\r\n    this.userRole = this.dataStorage.getUserRole();\r\n    if (data) {\r\n      if (data.dataForModal) {\r\n        const dataFromModal = data.dataForModal;\r\n\r\n        console.log(dataFromModal);\r\n\r\n        this.isFromModal = dataFromModal.isFromModal;\r\n        this.showApproveRejectButton = dataFromModal.isUpdate;\r\n\r\n        if (dataFromModal.isUpdate) {\r\n          this.product = dataFromModal.product;\r\n        } else {\r\n          this.product.brand = dataFromModal.brand;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.isFromModal) {\r\n      this.getList();\r\n    }\r\n    this.setFormValidator();\r\n    this.getDropdownList();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.product).subscribe((res: any) => {\r\n      this.productList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<Product>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  getDropdownList() {\r\n    this.apiService.findAll(ENDPOINTS.activeBrands).subscribe((res: any) => {\r\n      this.brandList = res.responseData.data;\r\n    });\r\n\r\n    this.apiService.findAll(ENDPOINTS.category).subscribe((res: any) => {\r\n      this.categoryList = res.responseData.data;\r\n      this.categoryList = res.responseData.data.filter(\r\n        (category: any) => category.status === COMMON_FUNCTION.ACTIVE);\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    if (this.isFromModal) {\r\n      this.product.status = OTHER_STATUS.FOR_APPROVAL;\r\n    }\r\n    this.apiService.save(ENDPOINTS.product, this.product).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n          this.dataStorage.setS1NewProduct(res.responseData.data);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.dataStorage.getS1NewProduct());\r\n        } else {\r\n          this.resetFormValidator();\r\n          this.getList();\r\n        }\r\n      });\r\n  }\r\n\r\n  getProduct(): void {\r\n    this.apiService.findById(ENDPOINTS.product, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.product = res.responseData.data;\r\n\r\n        this.isShowApproveDisapproveButtonByAdmin = this.product.status === 'FOR_APPROVAL' ?\r\n          true : false;\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    if (this.data?.dataForModal?.currentStatus === OTHER_STATUS.FOR_APPROVAL && this.product.status !== COMMON_FUNCTION.APPROVED) {\r\n      this.product.status = OTHER_STATUS.FOR_APPROVAL;\r\n    } else if (this.product.status === COMMON_FUNCTION.APPROVED) {\r\n      this.product.status = COMMON_FUNCTION.ACTIVE;\r\n    }\r\n\r\n    this.apiService.update(ENDPOINTS.product, this.product).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n          if (this.product.status !== COMMON_FUNCTION.DISAPPROVED.toUpperCase() &&\r\n            this.product.status !== COMMON_FUNCTION.INACTIVE.toUpperCase()) {\r\n            this.dataStorage.setS1NewProduct(res.responseData.data);\r\n          } else {\r\n            this.dataStorage.setS1NewProduct(new Product());\r\n          }\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.dataStorage.getS1NewProduct());\r\n        } else {\r\n          this.resetFormValidator();\r\n          this.getList();\r\n        }\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.product.status = COMMON_FUNCTION.ACTIVE;\r\n    this.productForm = this.formBuilder.group({\r\n      description: ['', Validators.required],\r\n      status: [''],\r\n      brand: ['', Validators.required],\r\n      category: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.product = new Product();\r\n    this.isShowApproveDisapproveButtonByAdmin = false;\r\n    this.product.status = COMMON_FUNCTION.ACTIVE;\r\n    this.productForm.markAsUntouched();\r\n    this.productForm.markAsPristine();\r\n  }\r\n\r\n  compareCategory(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  compareBrand(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  delete() {\r\n\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this product?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.product, this.product.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Product successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  approve() {\r\n    this.product.status = 'APPROVED';\r\n    this.update();\r\n  }\r\n\r\n  reject() {\r\n    this.product.status = 'DISAPPROVED';\r\n    this.update();\r\n  }\r\n\r\n}\r\n","<form>\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 title\">\r\n        <mat-label>\r\n          Product\r\n        </mat-label>\r\n      </div>\r\n    </div>\r\n    <hr>\r\n\r\n    <form [formGroup]=\"productForm\">\r\n      <div class=\"row\">\r\n        <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n          <mat-label> Brand </mat-label>\r\n          <mat-select [(ngModel)]=\"product.brand\" name=\"brand\" formControlName=\"brand\" [compareWith]=\"compareBrand\"\r\n            [disabled]=\"isFromModal\">\r\n            <mat-option *ngFor=\"let i of brandList\" [value]=\"i\">\r\n              {{i.description}}\r\n            </mat-option>\r\n            <mat-option *ngIf=\"isFromModal\">\r\n              {{ product?.brand?.description }}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field class=\"col-md-10\" appearance=\"outline\">\r\n          <mat-label>Product <span class=\"required-field\">*</span></mat-label>\r\n          <input matInput [(ngModel)]=\"product.description\" name=\"description\" formControlName=\"description\">\r\n        </mat-form-field>\r\n\r\n        <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n          <mat-label>Category <span class=\"required-field\">*</span></mat-label>\r\n          <mat-select [(ngModel)]=\"product.category\" name=\"category\" formControlName=\"category\"\r\n            [compareWith]=\"compareCategory\">\r\n            <mat-option *ngFor=\"let i of categoryList\" [value]=\"i\">\r\n              {{i.description}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field class=\"col-md-2\" appearance=\"outline\" [hidden]=\"isFromModal\"\r\n          *ngIf=\"(userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' || userRole === 'ROLE_ENCODER') && product.id\">\r\n          <mat-label>Status</mat-label>\r\n          <mat-select [(ngModel)]=\"product.status\" name=\"status\" formControlName=\"status\">\r\n            <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n              {{i.status}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n    </form>\r\n\r\n    <app-form-action-buttons [showApproveRejectButton]=\"showApproveRejectButton\" [isFromModal]=\"isFromModal\"\r\n      [childObject]=\"product\" [childForm]=\"productForm\" (saveFunction)=\"save()\" (updateFunction)=\"update()\"\r\n      (approveFunction)=\"approve()\" (rejectFunction)=\"reject()\" (cancelFunction)=\"resetFormValidator()\"\r\n      (closeModalFunction)=\"resetFormValidator()\" (deleteFunction)=\"delete()\" [isShowApproveDisapproveButton]=\"isShowApproveDisapproveButtonByAdmin\">\r\n    </app-form-action-buttons>\r\n    <br>\r\n    <ng-container\r\n      *ngIf=\"(!showApproveRejectButton && !isFromModal) || userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' \">\r\n      <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\r\n        (selectInListFunction)=\"getProduct()\" [hidden]=\"isFromModal\"></app-form-list>\r\n    </ng-container>\r\n\r\n  </div>\r\n</form>\r\n\r\n\r\n<!-- <form>\r\n    <div class=\"container\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12 title\">\r\n          <mat-label>\r\n            Product\r\n          </mat-label>\r\n        </div>\r\n      </div>\r\n      <hr>\r\n\r\n      <form [formGroup]=\"productForm\">\r\n        <div class=\"row\">\r\n            <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                <mat-label>Category</mat-label>\r\n                <mat-select [(ngModel)]=\"product.category\" name=\"category\" formControlName=\"category\">\r\n                  <mat-option *ngFor=\"let i of categoryList\" [value]=\"i\">\r\n                    {{i.description}}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <mat-form-field class=\"col-md-8\" appearance=\"outline\">\r\n            <mat-label>Description: <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"product.description\" name=\"description\" formControlName=\"description\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n            <mat-label>Status</mat-label>\r\n            <mat-select [(ngModel)]=\"product.status\" name=\"status\" formControlName=\"status\">\r\n              <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n                {{i.status}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n      </form>\r\n\r\n      <app-form-action-buttons [childObject]=\"product\" [childForm]=\"productForm\" (saveFunction)=\"save()\"\r\n        (updateFunction)=\"update()\" (cancelFunction)=\"resetFormValidator()\"></app-form-action-buttons>\r\n      <br> -->\r\n<!-- <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\r\n        (selectInListFunction)=\"getProduct)\"></app-form-list> -->\r\n\r\n<!-- </div>\r\n  </form> -->"]}
>>>>>>> 53dc5baaa640736d2cc27f9eee7c34fe4a9274c2
