{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/type-of-reason/type-of-reason.component.ts","webpack:///src/app/modules/pages/maintenance/type-of-reason/type-of-reason.component.html"],"names":["TypeOfReasonComponent","apiService","formBuilder","sweetAlertService","displayedColumns","statusList","typeOfReason","typeOfReasonList","getList","setFormValidator","findAll","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","save","undefined","success","err","error","resetFormValidator","findById","idForUpdate","update","status","ACTIVE","typeOfReasonForm","group","reason","required","markAsUntouched","markAsPristine","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","deleteById","id","customSuccessMessage","getTypeOfReason"],"mappings":"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","file":"default~applications-applications-module~type-of-reason-type-of-reason-module-es5.js","sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { TypeOfReason } from '@models';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-type-of-reason',\r\n  templateUrl: './type-of-reason.component.html',\r\n  styleUrls: ['./type-of-reason.component.scss']\r\n})\r\nexport class TypeOfReasonComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<TypeOfReason>;\r\n  displayedColumns: string[] = ['reason', 'status'];\r\n  statusList = [...STATUSES];\r\n\r\n  typeOfReason = new TypeOfReason();\r\n  typeOfReasonList = [];\r\n\r\n  typeOfReasonForm: FormGroup;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.typeOfReason).subscribe((res: any) => {\r\n      this.typeOfReasonList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<TypeOfReason>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    this.apiService.save(ENDPOINTS.typeOfReason, this.typeOfReason).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  getTypeOfReason(): void {\r\n    this.apiService.findById(ENDPOINTS.typeOfReason, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.typeOfReason = res.responseData.data;\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.typeOfReason, this.typeOfReason).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.typeOfReason.status = COMMON_FUNCTION.ACTIVE;\r\n    this.typeOfReasonForm = this.formBuilder.group({\r\n      reason: ['', Validators.required],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.typeOfReason = new TypeOfReason();\r\n    this.typeOfReason.status = COMMON_FUNCTION.ACTIVE;\r\n    this.typeOfReasonForm.markAsUntouched();\r\n    this.typeOfReasonForm.markAsPristine();\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this type of reason?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.typeOfReason, this.typeOfReason.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Type of reason successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","<form>\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 title\">\r\n        <mat-label>\r\n          <mat-icon>event_note</mat-icon> Type of Reason\r\n        </mat-label>\r\n      </div>\r\n    </div>\r\n    <hr>\r\n\r\n    <form [formGroup]=\"typeOfReasonForm\">\r\n      <div class=\"row\">\r\n        <mat-form-field class=\"col-md-8\" appearance=\"outline\">\r\n          <mat-label>Reason:<span class=\"required-field\">*</span></mat-label>\r\n          <input matInput [(ngModel)]=\"typeOfReason.reason\" name=\"reason\" formControlName=\"reason\">\r\n        </mat-form-field>\r\n\r\n        <mat-form-field class=\"col-md-4\" appearance=\"outline\" *ngIf=\"typeOfReason.id\">\r\n          <mat-label>Status</mat-label>\r\n          <mat-select [(ngModel)]=\"typeOfReason.status\" name=\"status\" formControlName=\"status\">\r\n            <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n              {{i.status}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n    </form>\r\n\r\n    <app-form-action-buttons [childObject]=\"typeOfReason\" [childForm]=\"typeOfReasonForm\" (saveFunction)=\"save()\"\r\n      (updateFunction)=\"update()\" (cancelFunction)=\"resetFormValidator()\" (deleteFunction)=\"delete()\"></app-form-action-buttons>\r\n      <br>\r\n      <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\r\n        (selectInListFunction)=\"getTypeOfReason()\"></app-form-list>\r\n  </div>\r\n</form>"]}