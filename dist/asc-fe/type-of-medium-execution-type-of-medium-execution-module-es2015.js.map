{"version":3,"sources":["./src/app/modules/fragments/index.ts","./src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution.component.ts","./src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution.component.html","./src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution.module.ts","./src/app/modules/pages/maintenance/type-of-medium-execution/type-of-medium-execution-routing.module.ts"],"names":[],"mappings":"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","file":"type-of-medium-execution-type-of-medium-execution-module-es2015.js","sourcesContent":["export * from './form-action-buttons/form-action-buttons.component';\nexport * from './form-list/form-list.component';","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { FormListComponent } from '@fragments';\nimport { ApiService, SweetAlertService } from '@services';\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\nimport { TypeOfExecution } from 'app/core/models/type-of-execution.model';\nimport { TypeOfMediumExecution } from 'app/core/models/type-of-medium-execution.model';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-type-of-medium-execution',\n  templateUrl: './type-of-medium-execution.component.html',\n  styleUrls: ['./type-of-medium-execution.component.scss']\n})\nexport class TypeOfMediumExecutionComponent implements OnInit {\n\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\n  dataSource: MatTableDataSource<TypeOfExecution>;\n  displayedColumns: string[] = ['typeOfExecution', 'applyForTOA', 'applyForS2', 'status'];\n  statusList = [...STATUSES];\n\n  typeOfExecution = new TypeOfExecution();\n  typeOfExecutionList = [];\n\n  typeOfExecutionForm: FormGroup;\n\n  checked: boolean; // declared in HTML but not in component (feb 14 aot)\n\n  constructor(\n    private apiService: ApiService,\n    private formBuilder: FormBuilder,\n    private sweetAlertService: SweetAlertService,\n  ) { }\n\n  ngOnInit() {\n    this.getList();\n    this.setFormValidator();\n  }\n\n  getList(): void {\n    this.apiService.findAll(ENDPOINTS.typeOfExecutions).subscribe((res: any) => {\n      this.typeOfExecutionList = res.responseData.data;\n      this.dataSource = new MatTableDataSource<TypeOfExecution>(res.responseData.data);\n      this.dataSource.paginator = this.formListComponent.paginator;\n      this.dataSource.sort = this.formListComponent.sort;\n    });\n  }\n\n  save(): void{\n    this.apiService.save(ENDPOINTS.typeOfExecutions, this.typeOfExecution).subscribe(\n        (res: any) => {\n          if (res !== undefined){\n            this.sweetAlertService.success(res);\n          }\n        }, (err: any) => {\n          this.sweetAlertService.error(err);\n        }, () => {\n          this.resetFormValidator(),\n          this.getList();\n        }\n    )\n  }\n\n  getTypeOfExecution(): void {\n    this.apiService.findById(ENDPOINTS.typeOfExecutions, this.formListComponent.idForUpdate).subscribe((res: any) => {\n      if (res) {\n        this.typeOfExecution = res.responseData.data;\n        console.log(res.responseData.data);\n\n      }\n    });\n  }\n\n  update(): void {\n    this.apiService.update(ENDPOINTS.typeOfExecutions, this.typeOfExecution).subscribe(\n      (res: any) => {\n        if (res !== undefined){\n          this.sweetAlertService.success(res);\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        this.resetFormValidator()\n        this.getList();\n      });\n  }\n\n  setFormValidator(): void {\n    this.typeOfExecution.status = COMMON_FUNCTION.ACTIVE;\n    this.typeOfExecutionForm = this.formBuilder.group({\n      typeOfExecution: ['', Validators.required],\n      status: [''],\n    });\n  }\n\n  resetFormValidator(): void {\n    this.typeOfExecution = new TypeOfExecution();\n    this.typeOfExecution.status = COMMON_FUNCTION.ACTIVE;\n    this.typeOfExecutionForm.markAsUntouched();\n    this.typeOfExecutionForm.markAsPristine();\n  }\n\n  delete() {\n    Swal.fire({\n      text: 'Are you sure you want to delete this type of execution?',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Confirm'\n    }).then((result) => {\n      if (result.value) {\n        this.apiService.deleteById(ENDPOINTS.typeOfExecutions, this.typeOfExecution.id).subscribe(\n          () => {\n            this.sweetAlertService.customSuccessMessage('Type of execution successfully deleted.');\n            this.resetFormValidator();\n            this.getList();\n          }\n        );\n      }\n    });\n  }\n\n}\n","<!--\n      THIS IS TYPE OF EXECUTION\n -->\n<form>\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-12 title\">\n                <mat-label>\n                    Type Of Execution\n                </mat-label>\n            </div>\n        </div>\n        <hr>\n\n        <form [formGroup]=\"typeOfExecutionForm\">\n            <div class=\"row\">\n                <mat-form-field class=\"col-md-8\" appearance=\"outline\">\n                    <mat-label>Type Of Execution <span class=\"required-field\">*</span></mat-label>\n                    <input matInput [(ngModel)]=\"typeOfExecution.typeOfExecution\" name=\"typeOfExecution\"\n                        formControlName=\"typeOfExecution\">\n                </mat-form-field>\n\n                <mat-form-field class=\"col-md-4\" appearance=\"outline\">\n                    <mat-label>Status</mat-label>\n                    <mat-select [(ngModel)]=\"typeOfExecution.status\" name=\"status\" formControlName=\"status\">\n                        <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\n                            {{i.status}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-md-2\"></div>\n                <div class=\"col-md-1\"><b>Live</b></div>\n                <div class=\"col-md-1\">\n                    <mat-slide-toggle [(ngModel)]=\"typeOfExecution.live\"\n                        [ngModelOptions]=\"{standalone: true}\" [checked]=\"typeOfExecution?.live\"\n                        name=\"live\" color=\"warn\">\n                    </mat-slide-toggle>\n                </div>\n                <div class=\"col-md-5\">\n                  <b>True:</b> The application is for S1 only.<br>\n                  <b>False:</b> Can apply for Special Clearing Request/S2 Application.\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n\n            <div class=\"row\"><br></div>\n\n            <div class=\"row\">\n              <div class=\"col-md-2\"></div>\n                <div class=\"col-md-1\"> <b>Apply for TOA</b></div>\n                <div class=\"col-md-1\">\n                  <mat-slide-toggle [(ngModel)]=\"typeOfExecution.applyForToa\"\n                      [ngModelOptions]=\"{standalone: true}\" [checked]=\"typeOfExecution?.applyForToa\"\n                      name=\"applyForToa\" color=\"warn\">\n                  </mat-slide-toggle>\n\n                </div>\n                <div class=\"col-md-5\">\n                  <b>True:</b> The application can only apply for TOA.<br>\n                  <b>False:</b> Unable to apply for TOA.\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n        </form>\n\n        <app-form-action-buttons [childObject]=\"typeOfExecution\" [childForm]=\"typeOfExecutionForm\"\n            (saveFunction)=\"save()\" (updateFunction)=\"update()\" (cancelFunction)=\"resetFormValidator()\" (deleteFunction)=\"delete()\">\n        </app-form-action-buttons>\n        <br>\n        <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\n            (selectInListFunction)=\"getTypeOfExecution()\"></app-form-list>\n\n    </div>\n</form>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TypeOfMediumExecutionRoutingModule } from './type-of-medium-execution-routing.module';\nimport { TypeOfMediumExecutionComponent } from './type-of-medium-execution.component';\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\nimport { AngularMaterialModule } from '@shared';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\n\n@NgModule({\n  declarations: [TypeOfMediumExecutionComponent],\n  imports: [\n    CommonModule,\n    TypeOfMediumExecutionRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n    FragmentsModule,\n  ]\n})\nexport class TypeOfMediumExecutionModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { TypeOfMediumExecutionComponent } from './type-of-medium-execution.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TypeOfMediumExecutionComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TypeOfMediumExecutionRoutingModule { }\n"],"sourceRoot":"webpack:///"}