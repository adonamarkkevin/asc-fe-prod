{"version":3,"sources":["webpack:///src/app/modules/fragments/login/forgot-passowrd/reset-password-landing-page/reset-password-landing-page.module.ts","webpack:///src/app/modules/fragments/login/forgot-passowrd/reset-password-landing-page/reset-password-landing-page-routing.module.ts","webpack:///src/app/modules/fragments/login/forgot-passowrd/reset-password-landing-page/reset-password-landing-page.component.ts","webpack:///src/app/modules/fragments/login/forgot-passowrd/reset-password-landing-page/reset-password-landing-page.component.html"],"names":["ResetPasswordLandingPageModule","routes","path","component","ResetPasswordLandingPageRoutingModule","forChild","ResetPasswordLandingPageComponent","apiService","sweetAlertService","route","router","formBuilder","EncrDecr","verificationCode","username","newPassword","confirmNewPassword","hideNewPassword","hideConfirmNewPassword","snapshot","paramMap","get","replace","RegExp","setFormValidator","validateVerificationCode","passwordFormatChecker","group","required","pattern","minLength","findByParam","forgotPasswordVerification","subscribe","res","isShowUpdatePassword","customErrorMessage","account","password","save","newPasswordVerification","console","log","success","setTimeout","goToLogin","err","error","navigate"],"mappings":"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","file":"modules-fragments-login-forgot-passowrd-reset-password-landing-page-reset-password-landing-page-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ResetPasswordLandingPageRoutingModule } from './reset-password-landing-page-routing.module';\nimport { ResetPasswordLandingPageComponent } from './reset-password-landing-page.component';\nimport { AngularMaterialModule } from '@shared';\n\n\n@NgModule({\n  declarations: [\n    ResetPasswordLandingPageComponent\n  ],\n  imports: [\n    CommonModule,\n    ResetPasswordLandingPageRoutingModule,\n    AngularMaterialModule,\n\n    // HttpClientModule,\n    // ReactiveFormsModule,\n    // FragmentsModule\n  ],\n  exports: [\n    ResetPasswordLandingPageComponent\n  ]\n})\nexport class ResetPasswordLandingPageModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ResetPasswordLandingPageComponent } from './reset-password-landing-page.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetPasswordLandingPageComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ResetPasswordLandingPageRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiService, SweetAlertService } from '@services';\nimport { ENDPOINTS } from '@shared';\nimport { EncrDecrService } from 'app/core/services/encr-decr-service.service';\n\n@Component({\n  selector: 'app-reset-password-landing-page',\n  templateUrl: './reset-password-landing-page.component.html',\n  styleUrls: ['./reset-password-landing-page.component.scss']\n})\nexport class ResetPasswordLandingPageComponent implements OnInit {\n\n  verificationCode = '';\n  username = '';\n  newPassword = '';\n  confirmNewPassword = '';\n\n  isShowUpdatePassword: boolean;\n  hideNewPassword = true;\n  hideConfirmNewPassword = true;\n\n  passwordFormatChecker: FormGroup;\n\n  constructor(\n    private apiService: ApiService,\n    private sweetAlertService: SweetAlertService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private EncrDecr: EncrDecrService\n  ) { }\n\n  ngOnInit(): void {\n    this.verificationCode = this.route.snapshot.paramMap.get('code');\n    this.username = this.route.snapshot.paramMap.get('username');\n    this.username = this.EncrDecr.get(this.username.replace(new RegExp('-', 'g'), '/'));\n\n    this.setFormValidator();\n\n    if (this.verificationCode) {\n      this.validateVerificationCode();\n    }\n  }\n\n  setFormValidator() {\n    this.passwordFormatChecker = this.formBuilder.group({\n      username: [''],\n      newPassword: ['', [Validators.required, Validators.pattern('((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'), Validators.minLength(8)]],\n      confirmNewPassword: ['', Validators.required],\n    });\n  }\n\n  validateVerificationCode() {\n    this.apiService.findByParam(ENDPOINTS.forgotPasswordVerification, this.verificationCode).subscribe(\n      res => {\n        this.isShowUpdatePassword = true;\n\n        if (!this.isShowUpdatePassword) {\n          this.sweetAlertService.customErrorMessage('Invalid verification code!');\n        }\n      }\n    );\n  }\n\n  submitNewPassword() {\n    const account = {\n      username: this.username,\n      password: this.newPassword\n    };\n    this.apiService.save(`${ENDPOINTS.newPasswordVerification}/${this.verificationCode}/new-password/`, account).subscribe(\n      res => {\n        console.log(res);\n        this.sweetAlertService.success(res, 5);\n        setTimeout(() => {\n          this.goToLogin();\n        }, 5000);\n      }, err => {\n        this.sweetAlertService.error(err);\n      }\n    );\n  }\n\n  goToLogin() {\n    this.router.navigate(['/login']);\n  }\n\n}\n","<!--Main Navigation-->\n<header>\n    <!--Navbar-->\n    <nav class=\"navbar navbar-expand-lg navbar-dark primary-color fixed-top\">\n        <div class=\"container-fluid\">\n            <!-- Navbar brand -->\n            <a class=\"navbar-brand\">\n                <img src=\"../../../../assets/images/asc-logo.jpg\" alt=\"\">\n            </a>\n        </div>\n    </nav>\n    <!-- Navbar -->\n    <!--Mask-->\n    <div id=\"intro\" class=\"view\">\n        <div class=\"mask\">\n        </div>\n    </div>\n    <!-- Mask-->\n\n</header>\n<!--Main Navigation-->\n<!--Main layout-->\n<main>\n    <div class=\"spinner\">\n        <ngx-spinner bdColor=\"rgba(0, 0, 0, 0.8)\" size=\"large\" color=\"#fff\" type=\"line-spin-fade\" [fullScreen]=\"true\">\n            <p> Logging in... </p>\n        </ngx-spinner>\n    </div>\n    <div class=\"photo-slider\">\n        <img src=\"../../../../assets/images/cover-photo/cover-photo.jpg\" alt=\"\">\n        <hr>\n        <p class=\"text-title\">\n            Sample Title\n        </p>\n        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolorem, saepe quia id iure, beatae porro itaque\n            iusto\n            voluptatem neque obcaecati aliquid adipisci quos quae totam impedit eaque corrupti mollitia suscipit?\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Error, vero ullam. Ex saepe quo molestiae,\n            assumenda labore\n            possimus, praesentium ipsum non voluptatum quia expedita rerum dicta iusto dolorum quidem laboriosam?\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Error, vero ullam. Ex saepe quo molestiae,\n            assumenda labore\n            possimus, praesentium ipsum non voluptatum quia expedita rerum dicta iusto dolorum quidem laboriosam?\n        </p>\n    </div>\n    <mat-card class=\"mat-elevation-z8\" id=\"login\">\n        <mat-card-header>\n            <mat-card-title>\n                <div class=\"image-holder\">\n                    <img src=\"../../../../assets/images/asc-logo.jpg\" alt=\"\">\n                </div>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <span *ngIf=\"isShowUpdatePassword\">\n                <ng-container *ngTemplateOutlet=\"createNewPassword\"></ng-container>\n            </span>\n\n\n\n\n\n            <br>\n            <div class=\"login-action\">\n                <button mat-raised-button (click)=\"submitNewPassword()\" color=\"primary\"\n                    [disabled]=\"!newPassword || newPassword !== confirmNewPassword\" *ngIf=\"isShowUpdatePassword\">\n                    Continue\n                </button>\n                <button mat-raised-button (click)=\"goToLogin()\" color=\"primary\" *ngIf=\"!isShowUpdatePassword\">\n                    Go to Login Page\n                </button>\n            </div>\n        </mat-card-content>\n    </mat-card>\n\n</main>\n<!--Main layout-->\n<!--Footer-->\n<footer>\n    <div class=\"footer-nav\">\n        <ul>\n            <li>Terms and Conditions</li>\n            <li>Privacy Policy</li>\n            <li>Inquiry</li>\n        </ul>\n    </div>\n    <div class=\"footer-details\">\n        <span>Ad Standards Council - Screening System -v 2.0<br>\n            &copy; 2022. Ad Standards Council</span>\n    </div>\n</footer>\n<!--Footer-->\n\n\n<ng-template #createNewPassword>\n    <form [formGroup]=\"passwordFormatChecker\">\n        <table>\n            <tr>\n                <td>\n                    <h1>\n                        <b>\n                            Reset Password\n                        </b>\n                    </h1>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <br>\n                    <mat-form-field class=\"form-field\">\n                        <input matInput placeholder=\"Username\" id=\"username\" [(ngModel)]=\"username\" name=\"username\"\n                            formControlName=\"username\" readonly>\n                    </mat-form-field>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <mat-form-field class=\"form-field\">\n                        <input matInput [type]=\"hideNewPassword ? 'password' : 'text'\" placeholder=\"New Password\"\n                            id=\"newPassword\" [(ngModel)]=\"newPassword\" type=\"password\" name=\"newPassword\"\n                            formControlName=\"newPassword\">\n                        <button type=\"button\" mat-icon-button matSuffix (click)=\"hideNewPassword = !hideNewPassword\"\n                            [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hideNewPassword\">\n                            <mat-icon>{{hideNewPassword ? 'visibility_off' : 'visibility'}}</mat-icon>\n                        </button>\n                    </mat-form-field>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <mat-form-field class=\"form-field\">\n                        <input matInput [type]=\"hideConfirmNewPassword ? 'password' : 'text'\"\n                            placeholder=\"Confirm New Password\" id=\"password\" [(ngModel)]=\"confirmNewPassword\"\n                            type=\"password\" name=\"confirmNewPassword\" formControlName=\"confirmNewPassword\">\n                        <button type=\"button\" mat-icon-button matSuffix\n                            (click)=\"hideConfirmNewPassword = !hideConfirmNewPassword\"\n                            [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hideConfirmNewPassword\">\n                            <mat-icon>{{hideConfirmNewPassword ? 'visibility_off' : 'visibility'}}</mat-icon>\n                        </button>\n                    </mat-form-field>\n                </td>\n            </tr>\n        </table>\n    </form>\n    <div *ngIf=\"passwordFormatChecker.get('newPassword').dirty && passwordFormatChecker.controls['newPassword'].errors\"\n        class=\"warning-message\">\n        <mat-icon>warning</mat-icon>\n        Password must be at least 8 characters long and must contain a number, lower case and upper case\n        characters.\n    </div>\n</ng-template>"]}