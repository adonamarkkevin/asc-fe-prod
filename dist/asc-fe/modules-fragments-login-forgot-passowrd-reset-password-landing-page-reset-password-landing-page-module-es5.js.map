{"version":3,"sources":["webpack:///src/app/modules/fragments/login/forgot-passowrd/reset-password-landing-page/reset-password-landing-page.module.ts","webpack:///src/app/modules/fragments/login/forgot-passowrd/reset-password-landing-page/reset-password-landing-page-routing.module.ts","webpack:///src/app/modules/fragments/login/forgot-passowrd/reset-password-landing-page/reset-password-landing-page.component.ts","webpack:///src/app/modules/fragments/login/forgot-passowrd/reset-password-landing-page/reset-password-landing-page.component.html"],"names":["ResetPasswordLandingPageModule","routes","path","component","ResetPasswordLandingPageRoutingModule","forChild","ResetPasswordLandingPageComponent","apiService","sweetAlertService","route","router","formBuilder","EncrDecr","verificationCode","username","newPassword","confirmNewPassword","hideNewPassword","hideConfirmNewPassword","snapshot","paramMap","get","replace","RegExp","setFormValidator","validateVerificationCode","passwordFormatChecker","group","required","pattern","minLength","findByParam","forgotPasswordVerification","subscribe","res","isShowUpdatePassword","customErrorMessage","account","password","save","newPasswordVerification","console","log","success","setTimeout","goToLogin","err","error","navigate"],"mappings":"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","file":"modules-fragments-login-forgot-passowrd-reset-password-landing-page-reset-password-landing-page-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ResetPasswordLandingPageRoutingModule } from './reset-password-landing-page-routing.module';\r\nimport { ResetPasswordLandingPageComponent } from './reset-password-landing-page.component';\r\nimport { AngularMaterialModule } from '@shared';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ResetPasswordLandingPageComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ResetPasswordLandingPageRoutingModule,\r\n    AngularMaterialModule,\r\n\r\n    // HttpClientModule,\r\n    // ReactiveFormsModule,\r\n    // FragmentsModule\r\n  ],\r\n  exports: [\r\n    ResetPasswordLandingPageComponent\r\n  ]\r\n})\r\nexport class ResetPasswordLandingPageModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ResetPasswordLandingPageComponent } from './reset-password-landing-page.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ResetPasswordLandingPageComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ResetPasswordLandingPageRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { ENDPOINTS } from '@shared';\r\nimport { EncrDecrService } from 'app/core/services/encr-decr-service.service';\r\n\r\n@Component({\r\n  selector: 'app-reset-password-landing-page',\r\n  templateUrl: './reset-password-landing-page.component.html',\r\n  styleUrls: ['./reset-password-landing-page.component.scss']\r\n})\r\nexport class ResetPasswordLandingPageComponent implements OnInit {\r\n\r\n  verificationCode = '';\r\n  username = '';\r\n  newPassword = '';\r\n  confirmNewPassword = '';\r\n\r\n  isShowUpdatePassword: boolean;\r\n  hideNewPassword = true;\r\n  hideConfirmNewPassword = true;\r\n\r\n  passwordFormatChecker: FormGroup;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private sweetAlertService: SweetAlertService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private EncrDecr: EncrDecrService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.verificationCode = this.route.snapshot.paramMap.get('code');\r\n    this.username = this.route.snapshot.paramMap.get('username');\r\n    this.username = this.EncrDecr.get(this.username.replace(new RegExp('-', 'g'), '/'));\r\n\r\n    this.setFormValidator();\r\n\r\n    if (this.verificationCode) {\r\n      this.validateVerificationCode();\r\n    }\r\n  }\r\n\r\n  setFormValidator() {\r\n    this.passwordFormatChecker = this.formBuilder.group({\r\n      username: [''],\r\n      newPassword: ['', [Validators.required, Validators.pattern('((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'), Validators.minLength(8)]],\r\n      confirmNewPassword: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  validateVerificationCode() {\r\n    this.apiService.findByParam(ENDPOINTS.forgotPasswordVerification, this.verificationCode).subscribe(\r\n      res => {\r\n        this.isShowUpdatePassword = true;\r\n\r\n        if (!this.isShowUpdatePassword) {\r\n          this.sweetAlertService.customErrorMessage('Invalid verification code!');\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  submitNewPassword() {\r\n    const account = {\r\n      username: this.username,\r\n      password: this.newPassword\r\n    };\r\n    this.apiService.save(`${ENDPOINTS.newPasswordVerification}/${this.verificationCode}/new-password/`, account).subscribe(\r\n      res => {\r\n        console.log(res);\r\n        this.sweetAlertService.success(res, 5);\r\n        setTimeout(() => {\r\n          this.goToLogin();\r\n        }, 5000);\r\n      }, err => {\r\n        this.sweetAlertService.error(err);\r\n      }\r\n    );\r\n  }\r\n\r\n  goToLogin() {\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n}\r\n","<!--Main Navigation-->\r\n<header>\r\n    <!--Navbar-->\r\n    <nav class=\"navbar navbar-expand-lg navbar-dark primary-color fixed-top\">\r\n        <div class=\"container-fluid\">\r\n            <!-- Navbar brand -->\r\n            <a class=\"navbar-brand\">\r\n                <img src=\"../../../../assets/images/asc-logo.jpg\" alt=\"\">\r\n            </a>\r\n        </div>\r\n    </nav>\r\n    <!-- Navbar -->\r\n    <!--Mask-->\r\n    <div id=\"intro\" class=\"view\">\r\n        <div class=\"mask\">\r\n        </div>\r\n    </div>\r\n    <!-- Mask-->\r\n\r\n</header>\r\n<!--Main Navigation-->\r\n<!--Main layout-->\r\n<main>\r\n    <div class=\"spinner\">\r\n        <ngx-spinner bdColor=\"rgba(0, 0, 0, 0.8)\" size=\"large\" color=\"#fff\" type=\"line-spin-fade\" [fullScreen]=\"true\">\r\n            <p> Logging in... </p>\r\n        </ngx-spinner>\r\n    </div>\r\n    <div class=\"photo-slider\">\r\n        <img src=\"../../../../assets/images/cover-photo/cover-photo.jpg\" alt=\"\">\r\n        <hr>\r\n        <p class=\"text-title\">\r\n            Sample Title\r\n        </p>\r\n        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolorem, saepe quia id iure, beatae porro itaque\r\n            iusto\r\n            voluptatem neque obcaecati aliquid adipisci quos quae totam impedit eaque corrupti mollitia suscipit?\r\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Error, vero ullam. Ex saepe quo molestiae,\r\n            assumenda labore\r\n            possimus, praesentium ipsum non voluptatum quia expedita rerum dicta iusto dolorum quidem laboriosam?\r\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Error, vero ullam. Ex saepe quo molestiae,\r\n            assumenda labore\r\n            possimus, praesentium ipsum non voluptatum quia expedita rerum dicta iusto dolorum quidem laboriosam?\r\n        </p>\r\n    </div>\r\n    <mat-card class=\"mat-elevation-z8\" id=\"login\">\r\n        <mat-card-header>\r\n            <mat-card-title>\r\n                <div class=\"image-holder\">\r\n                    <img src=\"../../../../assets/images/asc-logo.jpg\" alt=\"\">\r\n                </div>\r\n            </mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n            <span *ngIf=\"isShowUpdatePassword\">\r\n                <ng-container *ngTemplateOutlet=\"createNewPassword\"></ng-container>\r\n            </span>\r\n\r\n\r\n\r\n\r\n\r\n            <br>\r\n            <div class=\"login-action\">\r\n                <button mat-raised-button (click)=\"submitNewPassword()\" color=\"primary\"\r\n                    [disabled]=\"!newPassword || newPassword !== confirmNewPassword\" *ngIf=\"isShowUpdatePassword\">\r\n                    Continue\r\n                </button>\r\n                <button mat-raised-button (click)=\"goToLogin()\" color=\"primary\" *ngIf=\"!isShowUpdatePassword\">\r\n                    Go to Login Page\r\n                </button>\r\n            </div>\r\n        </mat-card-content>\r\n    </mat-card>\r\n\r\n</main>\r\n<!--Main layout-->\r\n<!--Footer-->\r\n<footer>\r\n    <div class=\"footer-nav\">\r\n        <ul>\r\n            <li>Terms and Conditions</li>\r\n            <li>Privacy Policy</li>\r\n            <li>Inquiry</li>\r\n        </ul>\r\n    </div>\r\n    <div class=\"footer-details\">\r\n        <span>Ad Standards Council - Screening System -v 2.0<br>\r\n            &copy; 2022. Ad Standards Council</span>\r\n    </div>\r\n</footer>\r\n<!--Footer-->\r\n\r\n\r\n<ng-template #createNewPassword>\r\n    <form [formGroup]=\"passwordFormatChecker\">\r\n        <table>\r\n            <tr>\r\n                <td>\r\n                    <h1>\r\n                        <b>\r\n                            Reset Password\r\n                        </b>\r\n                    </h1>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                    <br>\r\n                    <mat-form-field class=\"form-field\">\r\n                        <input matInput placeholder=\"Username\" id=\"username\" [(ngModel)]=\"username\" name=\"username\"\r\n                            formControlName=\"username\" readonly>\r\n                    </mat-form-field>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                    <mat-form-field class=\"form-field\">\r\n                        <input matInput [type]=\"hideNewPassword ? 'password' : 'text'\" placeholder=\"New Password\"\r\n                            id=\"newPassword\" [(ngModel)]=\"newPassword\" type=\"password\" name=\"newPassword\"\r\n                            formControlName=\"newPassword\">\r\n                        <button type=\"button\" mat-icon-button matSuffix (click)=\"hideNewPassword = !hideNewPassword\"\r\n                            [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hideNewPassword\">\r\n                            <mat-icon>{{hideNewPassword ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                        </button>\r\n                    </mat-form-field>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                    <mat-form-field class=\"form-field\">\r\n                        <input matInput [type]=\"hideConfirmNewPassword ? 'password' : 'text'\"\r\n                            placeholder=\"Confirm New Password\" id=\"password\" [(ngModel)]=\"confirmNewPassword\"\r\n                            type=\"password\" name=\"confirmNewPassword\" formControlName=\"confirmNewPassword\">\r\n                        <button type=\"button\" mat-icon-button matSuffix\r\n                            (click)=\"hideConfirmNewPassword = !hideConfirmNewPassword\"\r\n                            [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hideConfirmNewPassword\">\r\n                            <mat-icon>{{hideConfirmNewPassword ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                        </button>\r\n                    </mat-form-field>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </form>\r\n    <div *ngIf=\"passwordFormatChecker.get('newPassword').dirty && passwordFormatChecker.controls['newPassword'].errors\"\r\n        class=\"warning-message\">\r\n        <mat-icon>warning</mat-icon>\r\n        Password must be at least 8 characters long and must contain a number, lower case and upper case\r\n        characters.\r\n    </div>\r\n</ng-template>"]}