{"version":3,"sources":["webpack:///src/app/modules/pages/account/user-role/user-role.module.ts","webpack:///src/app/modules/pages/account/user-role/user-role-routing.module.ts","webpack:///src/app/modules/pages/account/user-role/user-role.component.ts","webpack:///src/app/modules/pages/account/user-role/user-role.component.html"],"names":["UserRoleModule","routes","path","component","UserRoleRoutingModule","forChild","UserRoleComponent","apiService","formBuilder","sweetAlertService","displayedColumns","statusList","roleList","userRole","userRoleList","getList","setFormValidator","findAll","roles","subscribe","res","console","log","responseData","data","dataSource","paginator","sort","err","save","undefined","success","error","resetFormValidator","name","update","status","ACTIVE","userRoleForm","group","required","markAsUntouched","markAsPristine"],"mappings":"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","file":"default~modules-pages-landing-page-landing-page-module~user-role-user-role-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UserRoleRoutingModule } from './user-role-routing.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { UserRoleComponent } from './user-role.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [UserRoleComponent],\r\n  imports: [\r\n    CommonModule,\r\n    UserRoleRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule\r\n  ]\r\n})\r\nexport class UserRoleModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UserRoleComponent } from './user-role.component';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserRoleComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UserRoleRoutingModule { }\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\nimport { UserRole } from '@models';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, ROLES, STATUSES } from '@shared';\r\n\r\n@Component({\r\n  selector: 'app-user-role',\r\n  templateUrl: './user-role.component.html',\r\n  styleUrls: ['./user-role.component.scss']\r\n})\r\nexport class UserRoleComponent implements OnInit {\r\n\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  @ViewChild(MatTable, { static: false }) table: MatTable<UserRole>;\r\n  dataSource: MatTableDataSource<UserRole>;\r\n  displayedColumns: string[] = ['name', 'status'];\r\n  statusList = [...STATUSES];\r\n  roleList = [...ROLES];\r\n\r\n  userRole = new UserRole();\r\n  userRoleList = [];\r\n\r\n  userRoleForm: FormGroup;\r\n\r\n  name: any; // in html but not existing in component -- encountered during \"ng serve --aot\"\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.roles).subscribe((res: any) => {\r\n      console.log(res.responseData.data);\r\n\r\n      this.userRoleList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<UserRole>(this.userRoleList);\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n    }, (err: any) => {\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    this.apiService.save(ENDPOINTS.roles, this.userRole).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  getUserRole(name): void {\r\n    this.apiService.findAll(ENDPOINTS.roles+'/role-name/'+ name).subscribe((res: any) => {\r\n      if (res) {\r\n        this.userRole = res;\r\n      }\r\n    }, (err: any) => {\r\n      this.userRole = err.error;\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.roles, this.userRole).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.userRole.status = COMMON_FUNCTION.ACTIVE;\r\n    this.userRoleForm = this.formBuilder.group({\r\n      name: ['', Validators.required],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.userRole = new UserRole();\r\n    this.userRole.status = COMMON_FUNCTION.ACTIVE;\r\n    this.userRoleForm.markAsUntouched();\r\n    this.userRoleForm.markAsPristine();\r\n  }\r\n\r\n}\r\n","<form>\r\n    <div class=\"container-fluid\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12 title\">\r\n          <mat-label>\r\n            <mat-icon>settings_accessibility</mat-icon> User Role\r\n          </mat-label>\r\n        </div>\r\n      </div>\r\n      <hr>\r\n\r\n      <form [formGroup]=\"userRoleForm\">\r\n        <div class=\"row\">\r\n          <mat-form-field class=\"col-md-8\" appearance=\"outline\">\r\n            <!-- <mat-label>User Role: <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"userRole.name\" name=\"name\" formControlName=\"name\"> -->\r\n            <mat-label>User Role</mat-label>\r\n            <mat-select [(ngModel)]=\"userRole.name\" name=\"name\" formControlName=\"name\">\r\n              <mat-option *ngFor=\"let i of roleList\" [value]=\"i.role\">\r\n                {{ i?.role?.replaceAll('_', (' '))?.replace('ENCODER', 'EVALUATOR') }}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n            <mat-label>Status</mat-label>\r\n            <mat-select [(ngModel)]=\"userRole.status\" name=\"status\" formControlName=\"status\">\r\n              <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n                {{i.status}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n      </form>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n          <!-- <button mat-raised-button color=\"primary\" (click)=\"save()\" *ngIf=\"!name?.id\" [disabled]=\"!(userRoleForm.valid)\">\r\n            <mat-icon>save</mat-icon> SAVE\r\n          </button> -->\r\n          <button mat-raised-button color=\"primary\" (click)=\"update()\" *ngIf=\"userRole?.id\" [disabled]=\"!(userRoleForm.valid)\">\r\n            <mat-icon>task_alt </mat-icon> UPDATE\r\n          </button>\r\n          <button mat-raised-button color=\"warn\" (click)=\"resetFormValidator()\" *ngIf=\"userRole?.id || userRole?.name\">\r\n            <mat-icon>{{ userRole?.id ? 'cancel' : 'refresh' }}</mat-icon> {{ userRole?.id ? 'CANCEL' : 'RESET' }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <br>\r\n\r\n      <div class=\"mat-elevation-z8\">\r\n        <table mat-table [dataSource]=\"dataSource\" matSort>\r\n\r\n          <!--- Note that these columns can be defined in any order.\r\n                  The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n          <!-- Position Column -->\r\n          <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef> User Role </th>\r\n            <td mat-cell *matCellDef=\"let element\" (click)=\"getUserRole(element?.name)\"> {{ element?.name?.replaceAll('_', ' ')?.replace('ENCODER', 'EVALUATOR') }} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"status\">\r\n            <th mat-header-cell *matHeaderCellDef> Status </th>\r\n            <td mat-cell *matCellDef=\"let element\" (click)=\"getUserRole(element?.name)\">\r\n              <span *ngIf=\"element?.status == 'ACTIVE'\" class=\"badge rounded-pill bg-success\">{{ element?.status }}</span>\r\n              <span *ngIf=\"element?.status != 'ACTIVE'\" class=\"badge rounded-pill bg-danger\">{{ element?.status }}</span>\r\n            </td>\r\n          </ng-container>\r\n\r\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n        </table>\r\n        <div class=\"no-record\" [hidden]=\"dataSource && dataSource?.data?.length > 0\">\r\n          No record found.\r\n        </div>\r\n        <mat-paginator [pageSizeOptions]=\"[10, 20, 30]\" showFirstLastButtons></mat-paginator>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  </form>\r\n"]}