{"version":3,"sources":["webpack:///src/app/modules/pages/account/user-role/user-role.module.ts","webpack:///src/app/modules/pages/account/user-role/user-role-routing.module.ts","webpack:///src/app/modules/pages/account/user-role/user-role.component.ts","webpack:///src/app/modules/pages/account/user-role/user-role.component.html"],"names":["UserRoleModule","routes","path","component","UserRoleRoutingModule","forChild","UserRoleComponent","apiService","formBuilder","sweetAlertService","displayedColumns","statusList","roleList","userRole","userRoleList","getList","setFormValidator","findAll","roles","subscribe","res","console","log","responseData","data","dataSource","paginator","sort","err","save","undefined","success","error","resetFormValidator","name","update","status","ACTIVE","userRoleForm","group","required","markAsUntouched","markAsPristine"],"mappings":"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","file":"default~modules-pages-landing-page-landing-page-module~user-role-user-role-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UserRoleRoutingModule } from './user-role-routing.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { UserRoleComponent } from './user-role.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [UserRoleComponent],\r\n  imports: [\r\n    CommonModule,\r\n    UserRoleRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule\r\n  ]\r\n})\r\nexport class UserRoleModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UserRoleComponent } from './user-role.component';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserRoleComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UserRoleRoutingModule { }\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\nimport { UserRole } from '@models';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, ROLES, STATUSES } from '@shared';\r\n\r\n@Component({\r\n  selector: 'app-user-role',\r\n  templateUrl: './user-role.component.html',\r\n  styleUrls: ['./user-role.component.scss']\r\n})\r\nexport class UserRoleComponent implements OnInit {\r\n\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  @ViewChild(MatTable, { static: false }) table: MatTable<UserRole>;\r\n  dataSource: MatTableDataSource<UserRole>;\r\n  displayedColumns: string[] = ['name', 'status'];\r\n  statusList = [...STATUSES];\r\n  roleList = [...ROLES];\r\n\r\n  userRole = new UserRole();\r\n  userRoleList = [];\r\n\r\n  userRoleForm: FormGroup;\r\n\r\n  name: any; // in html but not existing in component -- encountered during \"ng serve --aot\"\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.roles).subscribe((res: any) => {\r\n      console.log(res.responseData.data);\r\n\r\n      this.userRoleList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<UserRole>(this.userRoleList);\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n    }, (err: any) => {\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    this.apiService.save(ENDPOINTS.roles, this.userRole).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  getUserRole(name): void {\r\n    this.apiService.findAll(ENDPOINTS.roles+'/role-name/'+ name).subscribe((res: any) => {\r\n      if (res) {\r\n        this.userRole = res;\r\n      }\r\n    }, (err: any) => {\r\n      this.userRole = err.error;\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.roles, this.userRole).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.userRole.status = COMMON_FUNCTION.ACTIVE;\r\n    this.userRoleForm = this.formBuilder.group({\r\n      name: ['', Validators.required],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.userRole = new UserRole();\r\n    this.userRole.status = COMMON_FUNCTION.ACTIVE;\r\n    this.userRoleForm.markAsUntouched();\r\n    this.userRoleForm.markAsPristine();\r\n  }\r\n\r\n}\r\n","<form>\r\n    <div class=\"container-fluid\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12 title\">\r\n          <mat-label>\r\n            <mat-icon>settings_accessibility</mat-icon> User Role\r\n          </mat-label>\r\n        </div>\r\n      </div>\r\n      <hr>\r\n\r\n      <form [formGroup]=\"userRoleForm\">\r\n        <div class=\"row\">\r\n          <mat-form-field class=\"col-md-8\" appearance=\"outline\">\r\n            <!-- <mat-label>User Role: <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"userRole.name\" name=\"name\" formControlName=\"name\"> -->\r\n            <mat-label>User Role</mat-label>\r\n            <mat-select [(ngModel)]=\"userRole.name\" name=\"name\" formControlName=\"name\">\r\n              <mat-option *ngFor=\"let i of roleList\" [value]=\"i.role\">\r\n                {{ i?.role?.replaceAll('_', (' '))?.replace('ENCODER', 'EVALUATOR') }}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n            <mat-label>Status</mat-label>\r\n            <mat-select [(ngModel)]=\"userRole.status\" name=\"status\" formControlName=\"status\">\r\n              <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n                {{i.status}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n      </form>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n          <!-- <button mat-raised-button color=\"primary\" (click)=\"save()\" *ngIf=\"!name?.id\" [disabled]=\"!(userRoleForm.valid)\">\r\n            <mat-icon>save</mat-icon> SAVE\r\n          </button> -->\r\n          <button mat-raised-button color=\"primary\" (click)=\"update()\" *ngIf=\"userRole?.id\" [disabled]=\"!(userRoleForm.valid)\">\r\n            <mat-icon>task_alt </mat-icon> UPDATE\r\n          </button>\r\n          <button mat-raised-button color=\"warn\" (click)=\"resetFormValidator()\" *ngIf=\"userRole?.id || userRole?.name\">\r\n            <mat-icon>{{ userRole?.id ? 'cancel' : 'refresh' }}</mat-icon> {{ userRole?.id ? 'CANCEL' : 'RESET' }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <br>\r\n\r\n      <div class=\"mat-elevation-z8\">\r\n        <table mat-table [dataSource]=\"dataSource\" matSort>\r\n\r\n          <!--- Note that these columns can be defined in any order.\r\n                  The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n          <!-- Position Column -->\r\n          <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef> User Role </th>\r\n            <td mat-cell *matCellDef=\"let element\" (click)=\"getUserRole(element?.name)\"> {{ element?.name?.replaceAll('_', ' ')?.replace('ENCODER', 'EVALUATOR') }} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"status\">\r\n            <th mat-header-cell *matHeaderCellDef> Status </th>\r\n            <td mat-cell *matCellDef=\"let element\" (click)=\"getUserRole(element?.name)\">\r\n              <span *ngIf=\"element?.status == 'ACTIVE'\" class=\"badge rounded-pill bg-success\">{{ element?.status }}</span>\r\n              <span *ngIf=\"element?.status != 'ACTIVE'\" class=\"badge rounded-pill bg-danger\">{{ element?.status }}</span>\r\n            </td>\r\n          </ng-container>\r\n\r\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n        </table>\r\n        <div class=\"no-record\" [hidden]=\"dataSource && dataSource?.data?.length > 0\">\r\n          No record found.\r\n        </div>\r\n        <mat-paginator [pageSizeOptions]=\"[10, 20, 30]\" showFirstLastButtons></mat-paginator>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  </form>\r\n"]}