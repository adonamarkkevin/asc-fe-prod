{"version":3,"sources":["webpack:///src/app/modules/pages/account/user-role/user-role.module.ts","webpack:///src/app/modules/pages/account/user-role/user-role-routing.module.ts","webpack:///src/app/modules/pages/account/user-role/user-role.component.ts","webpack:///src/app/modules/pages/account/user-role/user-role.component.html"],"names":["UserRoleModule","routes","path","component","UserRoleRoutingModule","forChild","UserRoleComponent","apiService","formBuilder","sweetAlertService","displayedColumns","statusList","roleList","userRole","userRoleList","getList","setFormValidator","findAll","roles","subscribe","res","console","log","responseData","data","dataSource","paginator","sort","err","save","undefined","success","error","resetFormValidator","name","update","status","ACTIVE","userRoleForm","group","required","markAsUntouched","markAsPristine"],"mappings":"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","file":"default~modules-pages-landing-page-landing-page-module~user-role-user-role-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UserRoleRoutingModule } from './user-role-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AngularMaterialModule } from '@shared';\nimport { UserRoleComponent } from './user-role.component';\n\n\n\n@NgModule({\n  declarations: [UserRoleComponent],\n  imports: [\n    CommonModule,\n    UserRoleRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    AngularMaterialModule\n  ]\n})\nexport class UserRoleModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { UserRoleComponent } from './user-role.component';\n\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UserRoleComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class UserRoleRoutingModule { }\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\nimport { UserRole } from '@models';\nimport { ApiService, SweetAlertService } from '@services';\nimport { COMMON_FUNCTION, ENDPOINTS, ROLES, STATUSES } from '@shared';\n\n@Component({\n  selector: 'app-user-role',\n  templateUrl: './user-role.component.html',\n  styleUrls: ['./user-role.component.scss']\n})\nexport class UserRoleComponent implements OnInit {\n\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\n  @ViewChild(MatTable, { static: false }) table: MatTable<UserRole>;\n  dataSource: MatTableDataSource<UserRole>;\n  displayedColumns: string[] = ['name', 'status'];\n  statusList = [...STATUSES];\n  roleList = [...ROLES];\n\n  userRole = new UserRole();\n  userRoleList = [];\n\n  userRoleForm: FormGroup;\n\n  name: any; // in html but not existing in component -- encountered during \"ng serve --aot\"\n\n  constructor(\n    private apiService: ApiService,\n    private formBuilder: FormBuilder,\n    private sweetAlertService: SweetAlertService\n  ) { }\n\n  ngOnInit(): void {\n    this.getList();\n    this.setFormValidator();\n  }\n\n  getList(): void {\n    this.apiService.findAll(ENDPOINTS.roles).subscribe((res: any) => {\n      console.log(res.responseData.data);\n\n      this.userRoleList = res.responseData.data;\n      this.dataSource = new MatTableDataSource<UserRole>(this.userRoleList);\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n    }, (err: any) => {\n    });\n  }\n\n  save(): void {\n    this.apiService.save(ENDPOINTS.roles, this.userRole).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.success(res);\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        // actions after subscription\n        this.resetFormValidator();\n        this.getList();\n      });\n  }\n\n  getUserRole(name): void {\n    this.apiService.findAll(ENDPOINTS.roles+'/role-name/'+ name).subscribe((res: any) => {\n      if (res) {\n        this.userRole = res;\n      }\n    }, (err: any) => {\n      this.userRole = err.error;\n    });\n  }\n\n  update(): void {\n    this.apiService.update(ENDPOINTS.roles, this.userRole).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.success(res);\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        // actions after subscription\n        this.resetFormValidator();\n        this.getList();\n      });\n  }\n\n  setFormValidator(): void {\n    this.userRole.status = COMMON_FUNCTION.ACTIVE;\n    this.userRoleForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      status: [''],\n    });\n  }\n\n  resetFormValidator(): void {\n    this.userRole = new UserRole();\n    this.userRole.status = COMMON_FUNCTION.ACTIVE;\n    this.userRoleForm.markAsUntouched();\n    this.userRoleForm.markAsPristine();\n  }\n\n}\n","<form>\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-md-12 title\">\n          <mat-label>\n            <mat-icon>settings_accessibility</mat-icon> User Role\n          </mat-label>\n        </div>\n      </div>\n      <hr>\n\n      <form [formGroup]=\"userRoleForm\">\n        <div class=\"row\">\n          <mat-form-field class=\"col-md-8\" appearance=\"outline\">\n            <!-- <mat-label>User Role: <span class=\"required-field\">*</span></mat-label>\n            <input matInput [(ngModel)]=\"userRole.name\" name=\"name\" formControlName=\"name\"> -->\n            <mat-label>User Role</mat-label>\n            <mat-select [(ngModel)]=\"userRole.name\" name=\"name\" formControlName=\"name\">\n              <mat-option *ngFor=\"let i of roleList\" [value]=\"i.role\">\n                {{ i?.role?.replaceAll('_', (' '))?.replace('ENCODER', 'EVALUATOR') }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\">\n            <mat-label>Status</mat-label>\n            <mat-select [(ngModel)]=\"userRole.status\" name=\"status\" formControlName=\"status\">\n              <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\n                {{i.status}}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n      </form>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <!-- <button mat-raised-button color=\"primary\" (click)=\"save()\" *ngIf=\"!name?.id\" [disabled]=\"!(userRoleForm.valid)\">\n            <mat-icon>save</mat-icon> SAVE\n          </button> -->\n          <button mat-raised-button color=\"primary\" (click)=\"update()\" *ngIf=\"userRole?.id\" [disabled]=\"!(userRoleForm.valid)\">\n            <mat-icon>task_alt </mat-icon> UPDATE\n          </button>\n          <button mat-raised-button color=\"warn\" (click)=\"resetFormValidator()\" *ngIf=\"userRole?.id || userRole?.name\">\n            <mat-icon>{{ userRole?.id ? 'cancel' : 'refresh' }}</mat-icon> {{ userRole?.id ? 'CANCEL' : 'RESET' }}\n          </button>\n        </div>\n      </div>\n\n      <br>\n\n      <div class=\"mat-elevation-z8\">\n        <table mat-table [dataSource]=\"dataSource\" matSort>\n\n          <!--- Note that these columns can be defined in any order.\n                  The actual rendered columns are set as a property on the row definition\" -->\n\n          <!-- Position Column -->\n          <ng-container matColumnDef=\"name\">\n            <th mat-header-cell *matHeaderCellDef> User Role </th>\n            <td mat-cell *matCellDef=\"let element\" (click)=\"getUserRole(element?.name)\"> {{ element?.name?.replaceAll('_', ' ')?.replace('ENCODER', 'EVALUATOR') }} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"status\">\n            <th mat-header-cell *matHeaderCellDef> Status </th>\n            <td mat-cell *matCellDef=\"let element\" (click)=\"getUserRole(element?.name)\">\n              <span *ngIf=\"element?.status == 'ACTIVE'\" class=\"badge rounded-pill bg-success\">{{ element?.status }}</span>\n              <span *ngIf=\"element?.status != 'ACTIVE'\" class=\"badge rounded-pill bg-danger\">{{ element?.status }}</span>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n        <div class=\"no-record\" [hidden]=\"dataSource && dataSource?.data?.length > 0\">\n          No record found.\n        </div>\n        <mat-paginator [pageSizeOptions]=\"[10, 20, 30]\" showFirstLastButtons></mat-paginator>\n\n      </div>\n\n    </div>\n  </form>\n"]}