{"version":3,"sources":["./src/app/modules/pages/account/user-registration/user-registration-routing.module.ts","./src/app/core/models/email.model.ts","./src/app/modules/pages/company/company-routing.module.ts","./src/app/modules/pages/company/add-company/add-company-routing.module.ts","./src/app/modules/pages/account/user-registration/user-registration.component.ts","./src/app/modules/pages/account/user-registration/user-registration.component.html","./src/app/modules/pages/account/user-registration/user-registration.module.ts","./src/app/modules/pages/company/add-company/add-company.module.ts","./src/app/modules/pages/company/company.module.ts","./src/app/modules/pages/company/index.ts"],"names":[],"mappings":"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","file":"default~modules-pages-landing-page-landing-page-module~user-profile-user-profile-module~user-registr~2e1d3186-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UserRegistrationComponent } from './user-registration.component';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserRegistrationComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UserRegistrationRoutingModule { }\r\n","export class Email {\r\n    mailTo: String;\r\n    user: String;\r\n    verificationCode: Number;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { URL_PATHS } from '@shared';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: URL_PATHS.LIST_COMPANY,\r\n        loadChildren: () => import('./list-company/list-company.module')\r\n          .then(m => m.ListCompanyModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.ADD_COMPANY,\r\n        loadChildren: () => import('./add-company/add-company.module')\r\n          .then(m => m.AddCompanyModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.UPDATE_COMPANY + '/:id',\r\n        loadChildren: () => import('./add-company/add-company.module')\r\n          .then(m => m.AddCompanyModule)\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CompanyRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AddCompanyComponent } from './add-company.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AddCompanyComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AddCompanyRoutingModule { }\r\n","import { Component, Inject, OnDestroy, OnInit, Optional, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AddCompanyComponent } from '@company';\r\nimport { Affiliation, Company, UserAccount, UserRole } from '@models';\r\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\r\nimport { ENDPOINTS, STATUSES } from '@shared';\r\nimport { ValidateFieldService } from 'app/core/services/validate-field.service';\r\nimport { Email } from '../../../../core/models/email.model';\r\n\r\n@Component({\r\n  selector: 'app-user-registration',\r\n  templateUrl: './user-registration.component.html',\r\n  styleUrls: ['./user-registration.component.scss']\r\n})\r\nexport class UserRegistrationComponent implements OnInit, OnDestroy {\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  @ViewChild(MatTable, { static: false }) table: MatTable<UserAccount>;\r\n  dataSource: MatTableDataSource<UserAccount>;\r\n  // displayedColumns: string[] = ['name', 'status'];\r\n  statusList = [...STATUSES];\r\n\r\n  company = new Company();\r\n  userRole = new UserRole();\r\n  affiliation = new Affiliation();\r\n  userAccount = new UserAccount();\r\n  email = new Email();\r\n\r\n  userAccountList = [];\r\n  userRoleList = [];\r\n  companyList = [];\r\n  affiliationList = [];\r\n  dropDownDatasource: string[] = [];\r\n\r\n  userAccountForm: FormGroup;\r\n  acceptTerms: FormGroup;\r\n  userInfo: FormGroup;\r\n  companyInfo: FormGroup;\r\n  accountInfo: FormGroup;\r\n  firstFormGroup: FormGroup;\r\n  secondFormGroup: FormGroup;\r\n  passwordMatch = false;\r\n  process = 'SAVED';\r\n  hidePassword = true;\r\n  hideConfirmPassword = true;\r\n  isUpdate = false;\r\n  registerStatus = '';\r\n  confirmPasswords = '';\r\n  id: any;\r\n  isRegistration: boolean = false;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n    private dataStorage: DataStorageService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private dialog: MatDialog,\r\n    public validateFieldService: ValidateFieldService,\r\n    // @Inject(MAT_DIALOG_DATA) public data: any,\r\n    @Optional() public dialogRef: MatDialogRef<UserRegistrationComponent>,\r\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    // Status for first time register\r\n    // this.registerStatus = data.status;\r\n    // this.registerStatus = 'Registered';\r\n    if(data.isRegister === true){\r\n      this.isRegistration = true;\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.registerStatus = this.data.status;\r\n    this.getList();\r\n    // this.checkProcessStatus();\r\n    this.setFormValidator2();\r\n    this.id = Number(this.route.snapshot.paramMap.get('id'));\r\n    if (this.id !== 0) {\r\n      this.isUpdate = true;\r\n      this.viewUserInformation();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // this.dataStorage.saveUserAccountId(0);\r\n    this.userAccount = new UserAccount();\r\n    this.company = new Company();\r\n    this.registerStatus = '';\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.activeCompanies).subscribe((res: any) => {\r\n      this.companyList = res.responseData.data;\r\n      console.log(this.companyList);\r\n    });\r\n    this.apiService.findAll(ENDPOINTS.activeMembersAffiliation).subscribe(\r\n      (res: any) => {\r\n        this.affiliationList = res.responseData.data;\r\n      });\r\n\r\n  }\r\n\r\n  viewUserInformation(): void {\r\n    this.apiService.findById(ENDPOINTS.userAccount, this.id).subscribe(\r\n      (res: any) => {\r\n        this.userAccount = res.responseData.data;\r\n        this.company = res.responseData.data.company\r\n        // this.affiliation = this.company.membersAffiliation;\r\n        // console.log(this.userAccount);\r\n      });\r\n  }\r\n\r\n  getSelectedCompany(i): void {\r\n    if (i) {\r\n      this.apiService.findById(ENDPOINTS.company, i.value.id).subscribe(\r\n        (res: any) => {\r\n          this.company = res.responseData.data;\r\n          this.userAccount.company = res.responseData.data;\r\n        });\r\n    }\r\n  }\r\n\r\n  openCompanyComponent(): void {\r\n    const dialogRef = this.dialog.open(AddCompanyComponent, {\r\n      width: '80%',\r\n      height: '85%',\r\n      data: {\r\n        isFromModal: true,\r\n        isUserRegistration: true\r\n      }\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      console.log('The dialog was closed', result);\r\n      this.getList();\r\n      if (result) {\r\n        this.company = result;\r\n        this.userAccount.company = result;\r\n      }\r\n    });\r\n  }\r\n\r\n  confirmPassword(password): void {\r\n    if (this.userAccount.password === password) {\r\n      this.passwordMatch = true;\r\n    } else {\r\n      this.passwordMatch = false;\r\n    }\r\n  }\r\n\r\n  save(): void {\r\n    this.userAccount.username = this.userAccount.username.toLowerCase();\r\n    this.apiService.save(ENDPOINTS.addUserAccount, this.userAccount).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          // this.sweetAlertService.success(res);\r\n          this.sweetAlertService.customSuccessMessage('Your account was successfully created. Please check your email for verification.');\r\n          this.dialog.closeAll();\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n        console.log('ERROR:::', err);\r\n\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n        // this.dialogRef.close();\r\n      });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.updateUserAccount, this.userAccount).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n          this.router.navigate(['/asc/page/account/user-list']);\r\n        }\r\n      }, (err: any) => {\r\n        console.log(err);\r\n\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.userAccountForm = this.formBuilder.group({\r\n      firstName: ['', Validators.required],\r\n      lastName: ['', Validators.required],\r\n      userName: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  setFormValidator2(): void {\r\n    this.acceptTerms = this.formBuilder.group({\r\n      acceptTerms: ['', Validators.required]\r\n    });\r\n    this.userInfo = this.formBuilder.group({\r\n      firstName: ['', Validators.required],\r\n      middleName: [''],\r\n      lastName: ['', Validators.required],\r\n      mobileNumber: ['', Validators.required]\r\n    });\r\n    this.companyInfo = this.formBuilder.group({\r\n      company: ['', Validators.required],\r\n      companyAddress: [''],\r\n      companyMobileNo: [''],\r\n      companyTelephoneNo: [''],\r\n      companyTelephoneNo2: [''],\r\n      companyFaxNumber: [''],\r\n      contactPersonName:[''],\r\n      contactPersonEmail:[''],\r\n      membersAffiliation:[''],\r\n      // membershipAffiliation: ['',Validators.required],\r\n    });\r\n    this.accountInfo = this.formBuilder.group({\r\n      userName: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.pattern('((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'), Validators.minLength(8)]],\r\n      confirmPasswords: ['', Validators.required],\r\n    });\r\n    this.userAccountForm = new FormGroup({\r\n      acceptTerms: new FormControl(),\r\n      userInfo: new FormControl(),\r\n      companyInfo: new FormControl(),\r\n      accountInfo: new FormControl()\r\n    });\r\n  }\r\n\r\n  checkProcessStatus(): void {\r\n    if (this.dataStorage.getUserAccount().id !== 0) {\r\n      this.process = 'UPDATE';\r\n      this.apiService.findById(ENDPOINTS.userAccount, this.dataStorage.getUserAccount().id).subscribe(\r\n        (res: any) => {\r\n          this.userAccount = res.responseData.data;\r\n          this.apiService.findById(ENDPOINTS.company, this.userAccount.company.id).subscribe(\r\n            (res1: any) => {\r\n              this.company = res1.responseData.data;\r\n            })\r\n        })\r\n    }\r\n  }\r\n\r\n  applyFilter(event: Event): void {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    // this.companyList.filter = filterValue.trim().toLowerCase();\r\n    // this.companyList = this.companyList.filter(cl => cl.companyName === event);\r\n  }\r\n\r\n  compareMembersAffiliation(value: any, selected: any): boolean {\r\n    // return value.description === selected.description;\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  compareCompany(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.id === selected.id;\r\n    }\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.userAccount = new UserAccount();\r\n    this.userAccountForm.markAsUntouched();\r\n    this.userAccountForm.markAsPristine();\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n","<form>\r\n  <div class=\"container-fluid\"><br>\r\n    <div class=\"col-md-12 title\" *ngIf=\"!isUpdate\">\r\n      <mat-label>\r\n        Account Registration\r\n        <p> <i style=\"color: red;\"><i class=\"material-icons\" style=\"color: red;\">error_outline</i> All fields with\r\n          <span class=\"required-field\">*</span> are required,\r\n          </i> <i>Please provide all required\r\n            details to register.</i></p>\r\n        <p></p>\r\n      </mat-label>\r\n    </div>\r\n    <div class=\"col-md-12 title\" *ngIf=\"isUpdate\">\r\n      <mat-label>\r\n        Update Account\r\n      </mat-label>\r\n      <button class=\"button-right button-red\" mat-raised-button [routerLink]=\"['/asc/page/account/user-list']\">\r\n        <mat-icon>list</mat-icon> VIEW USER LIST\r\n      </button>\r\n      <p>Please provide all required details.</p>\r\n    </div>\r\n\r\n\r\n    <mat-horizontal-stepper linear #stepper>\r\n\r\n      <mat-step [stepControl]=\"acceptTerms\" *ngIf=\"isRegistration\">\r\n        <form [formGroup]=\"acceptTerms\">\r\n          <ng-template matStepLabel> Privacy Notice</ng-template>\r\n          <h4>\r\n            <mat-icon>label_important</mat-icon> Terms and Agreements\r\n          </h4>\r\n          <div class=\"row message-body\">\r\n            <p>Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical\r\n              Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at\r\n              Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a\r\n              Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the\r\n              undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\"\r\n              (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of\r\n              ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit\r\n              amet..\", comes from a line in section 1.10.32.\r\n\r\n              The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections\r\n              1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact\r\n              original form, accompanied by English versions from the 1914 translation by H. Rackham.</p>\r\n          </div>\r\n          <div class=\"row\">\r\n            <section class=\"example-section\">\r\n              <mat-checkbox class=\"example-margin\" [(ngModel)]=\"userAccount.acceptTerms\" name=\"acceptTerms\"\r\n                formControlName=\"acceptTerms\">\r\n                Accept Terms and Agreement\r\n              </mat-checkbox>\r\n            </section>\r\n          </div><br>\r\n          <div>\r\n            <button mat-raised-button color=\"primary\" matStepperNext\r\n              *ngIf=\"userAccount.acceptTerms === true\">Next</button>\r\n          </div>\r\n        </form>\r\n      </mat-step>\r\n\r\n      <mat-step [stepControl]=\"userInfo\">\r\n        <form [formGroup]=\"userInfo\">\r\n          <ng-template matStepLabel>Personal Information</ng-template>\r\n          <div class=\"row fields\">\r\n            <h4>\r\n              <mat-icon>label_important</mat-icon> Personal Information:\r\n            </h4>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Given name:  <span class=\"required-field\">*</span></mat-label>\r\n                <input matInput [(ngModel)]=\"userAccount.firstName\" name=\"firstName\" formControlName=\"firstName\">\r\n              </mat-form-field>\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Middle name: <span class=\"required-field\">\r\n                    <!-- <mat-icon>notification_important</mat-icon> -->\r\n                  </span></mat-label>\r\n                <input matInput [(ngModel)]=\"userAccount.middleName\" name=\"middleName\" formControlName=\"middleName\">\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Last name:  <span class=\"required-field\">*</span></mat-label>\r\n                <input matInput [(ngModel)]=\"userAccount.lastName\" name=\"lastName\" formControlName=\"lastName\">\r\n              </mat-form-field>\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Mobile Number: <span class=\"required-field\">*</span></mat-label>\r\n                <input matInput [(ngModel)]=\"userAccount.mobileNumber\" name=\"mobileNumber\" placeholder=\"09xxxxxxxxx\"\r\n                  formControlName=\"mobileNumber\" (keydown)=\"validateFieldService.numbersOnly($event)\" maxlength=\"11\">\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"row\">\r\n\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <button mat-raised-button matStepperPrevious>Back</button>\r\n            <button mat-raised-button color=\"primary\" matStepperNext>Next</button>\r\n          </div>\r\n        </form>\r\n      </mat-step>\r\n\r\n      <mat-step [stepControl]=\"companyInfo\"\r\n        *ngIf=\"userAccount?.userRole?.name=='ROLE_APPLICANT'||registerStatus==='Register'\">\r\n        <form [formGroup]=\"companyInfo\">\r\n          <ng-template matStepLabel>Company Information</ng-template>\r\n          <div class=\"row fields\">\r\n            <h4>\r\n              <mat-icon>label_important</mat-icon> Company Information:\r\n            </h4>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-12\" appearance=\"outline\">\r\n                <mat-label> Company  <span class=\"required-field\">*</span>\r\n                  <span class=\"badge rounded-pill bg-warning\" *ngIf=\"userAccount?.company?.status === 'FOR_APPROVAL'\">\r\n                    For Approval\r\n                  </span>\r\n                  <span class=\"badge rounded-pill bg-danger\" *ngIf=\"userAccount?.company?.delinquent \">\r\n                    With Penalty\r\n                  </span>\r\n                </mat-label>\r\n                <mat-select [(ngModel)]=\"userAccount.company\" name=\"company\" [compareWith]=\"compareCompany\"\r\n                  formControlName=\"company\" matNativeControl (selectionChange)=\"getSelectedCompany($event)\">\r\n                  <mat-option (click)=\"openCompanyComponent()\">\r\n                    <span class=\"badge bg-success dd\">Add New Company</span>\r\n                  </mat-option>\r\n                  <mat-option *ngFor=\"let i of companyList\" [value]=\"i\">\r\n                    {{i.companyName}}\r\n                  </mat-option>\r\n\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-10\" appearance=\"outline\">\r\n                <mat-label> Member Affiliation</mat-label>\r\n                <input matInput [value]=\"company?.membersAffiliation?.description\" name=\"membersAffiliation\"\r\n                  formControlName=\"membersAffiliation\" readonly>\r\n              </mat-form-field>\r\n              <!-- <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Company Number: </mat-label>\r\n                <input matInput [(ngModel)]=\"company.companyMobileNo\" name=\"companyMobileNo\"\r\n                  formControlName=\"companyMobileNo\" readonly>\r\n              </mat-form-field> -->\r\n\r\n              <!-- <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Telephone Number: </mat-label>\r\n                <input matInput [value]=\"company?.companyTelephoneNo\" name=\"companyTelephoneNo\"\r\n                  formControlName=\"companyTelephoneNo\" readonly>\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                <mat-label> Alternate Telephone Number: </mat-label>\r\n                <input matInput [(ngModel)]=\"company.companyTelephoneNo2\" name=\"companyTelephoneNo2\"\r\n                  formControlName=\"companyTelephoneNo2\" readonly>\r\n              </mat-form-field>\r\n\r\n              <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                <mat-label> Contact Person: </mat-label>\r\n                <input matInput [(ngModel)]=\"company.contactPersonName\" name=\"contactPersonName\"\r\n                  formControlName=\"contactPersonName\" readonly>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                <mat-label> Company Email Address: </mat-label>\r\n                <input matInput [(ngModel)]=\"company.contactPersonEmail\" name=\"contactPersonEmail\"\r\n                  formControlName=\"contactPersonEmail\" readonly>\r\n              </mat-form-field> -->\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <button mat-raised-button matStepperPrevious>Back</button>\r\n            <button mat-raised-button color=\"primary\" matStepperNext>Next</button>\r\n          </div>\r\n        </form>\r\n      </mat-step>\r\n\r\n      <mat-step [stepControl]=\"accountInfo\">\r\n        <form [formGroup]=\"accountInfo\">\r\n          <ng-template matStepLabel>Account Information</ng-template>\r\n          <div class=\"row fields\">\r\n            <h4>\r\n              <mat-icon>label_important</mat-icon> Account Information:\r\n            </h4>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-12\" appearance=\"outline\">\r\n                <mat-label> Email Address:  <span class=\"required-field\">*</span></mat-label>\r\n                <input matInput [(ngModel)]=\"userAccount.username\" name=\"userName\" formControlName=\"userName\"\r\n                  [readonly]=\"process === 'UPDATE'\" type=\"email\" pattern=\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\">\r\n              </mat-form-field>\r\n              <p *ngIf=\"accountInfo.get('userName').dirty && accountInfo.controls['userName'].errors\" class=\"badge\">\r\n                <mat-icon>warning</mat-icon>\r\n                Please provide a valid email address.\r\n              </p>\r\n            </div>\r\n            <div\r\n              [ngClass]=\"accountInfo.get('password').dirty && accountInfo.controls['password'].errors ? 'row credential-creation' : 'row' \">\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Password:  <span class=\"required-field\">*</span>\r\n                </mat-label>\r\n                <input matInput [type]=\"hidePassword ? 'password' : 'text'\" [(ngModel)]=\"userAccount.password\"\r\n                  name=\"password\" formControlName=\"password\" (keyup)=\"confirmPassword(confirmPasswords)\">\r\n                <button type=\"button\" mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\"\r\n                  [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hidePassword\">\r\n                  <mat-icon>{{hidePassword ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                </button>\r\n                <mat-hint *ngIf=\"accountInfo.get('password').dirty && accountInfo.controls['password'].errors\">\r\n                  <mat-icon>warning</mat-icon>\r\n                  Password must be at least 8 characters long and must contain a number, lower case and upper case\r\n                  characters.\r\n                </mat-hint>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Confirm Password:\r\n                  <span class=\"required-field\">*</span>\r\n                </mat-label>\r\n                <input matInput [type]=\"hideConfirmPassword ? 'password' : 'text'\" [(ngModel)]=\"confirmPasswords\"\r\n                  name=\"confirmPasswords\" formControlName=\"confirmPasswords\"\r\n                  (keyup)=\"confirmPassword(confirmPasswords)\">\r\n                <button type=\"button\" mat-icon-button matSuffix (click)=\"hideConfirmPassword = !hideConfirmPassword\"\r\n                  [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hideConfirmPassword\">\r\n                  <mat-icon>{{hideConfirmPassword ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                </button>\r\n                <mat-hint *ngIf=\"accountInfo.get('confirmPasswords').dirty && !passwordMatch\">\r\n                  <mat-icon>warning</mat-icon>\r\n                  Password does not match\r\n                </mat-hint>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <mat-hint *ngIf=\"(accountInfo.valid || passwordMatch) && userAccount.acceptTerms===false\">\r\n             <p><i style=\"color: red;\"> <mat-icon>warning</mat-icon>Need to Accept Terms and Agreement!</i></p>\r\n            </mat-hint>\r\n            <button mat-raised-button color=\"primary\" *ngIf=\"!isUpdate\" (click)=\"save()\"\r\n              [disabled]=\"(!accountInfo.valid || !passwordMatch) || userAccount.acceptTerms===false\">Register</button>\r\n            <button mat-raised-button color=\"primary\" *ngIf=\"isUpdate\" (click)=\"update()\"\r\n              [disabled]=\"!accountInfo.valid || !passwordMatch\">Update</button>\r\n            <button mat-raised-button matStepperPrevious>Back</button>\r\n            <button mat-raised-button color=\"warn\" (click)=\"stepper.reset()\">Reset</button>\r\n          </div>\r\n        </form>\r\n      </mat-step>\r\n    </mat-horizontal-stepper>\r\n  </div>\r\n</form>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { UserRegistrationRoutingModule } from './user-registration-routing.module';\r\nimport { UserRegistrationComponent } from './user-registration.component';\r\nimport { FragmentsModule } from '../../../fragments/fragments.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [UserRegistrationComponent],\r\n  imports: [\r\n    CommonModule,\r\n    UserRegistrationRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule\r\n  ],\r\n  exports: [\r\n    UserRegistrationComponent\r\n  ]\r\n})\r\nexport class UserRegistrationModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AddCompanyRoutingModule } from './add-company-routing.module';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { AddCompanyComponent } from './add-company.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ AddCompanyComponent ],\r\n  imports: [\r\n    CommonModule,\r\n    AddCompanyRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n  ]\r\n})\r\nexport class AddCompanyModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { CompanyRoutingModule } from './company-routing.module';;\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    CompanyRoutingModule,\r\n  ]\r\n})\r\nexport class CompanyModule { }\r\n","export * from './company.module';\r\nexport * from './add-company/add-company.component';\r\nexport * from './add-company/add-company.module';\r\nexport * from './list-company/list-company.component';\r\nexport * from './list-company/list-company.module';"],"sourceRoot":"webpack:///"}