{"version":3,"sources":["webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/maintenance/company-penalties/company-penalties.component.ts","webpack:///src/app/modules/pages/maintenance/company-penalties/company-penalties.component.html","webpack:///src/app/modules/pages/maintenance/company-penalties/company-penalties-routing.module.ts","webpack:///src/app/modules/pages/maintenance/company-penalties/company-penalties.module.ts"],"names":["CompanyPenaltiesComponent","apiService","formBuilder","sweetAlertService","datepipe","displayedColumns","companyPenalties","companyPenaltiesList","companyList","setFormValidator","getCompanyList","getCompanyPenaltiesList","findAll","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","findById","idForUpdate","console","log","activeCompanies","formatDate","save","success","error","resetFormValidator","update","companyPenaltiesForm","group","company","required","penaltyAmount","markAsUntouched","markAsPristine","value","selected","description","transform","penaltyDate","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","deleteById","id","customSuccessMessage","getCompanyPenalties","routes","path","component","CompanyPenaltiesRoutingModule","forChild","CompanyPenaltiesModule"],"mappings":"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","file":"company-penalties-company-penalties-module-es5.js","sourcesContent":["export * from './form-action-buttons/form-action-buttons.component';\nexport * from './form-list/form-list.component';","import { DatePipe } from '@angular/common';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { FormListComponent } from '@fragments';\nimport { ApiService, SweetAlertService } from '@services';\nimport { ENDPOINTS } from '@shared';\nimport { CompanyPenalties } from 'app/core/models/company-penalties.model';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-company-penalties',\n  templateUrl: './company-penalties.component.html',\n  styleUrls: ['./company-penalties.component.scss']\n})\nexport class CompanyPenaltiesComponent implements OnInit {\n\n  @ViewChild(FormListComponent) formListComponent: FormListComponent\n  dataSource: MatTableDataSource<CompanyPenalties>;\n  // displayedColumns: string[] = ['companyDescription', 'companyPenaltyAmount', 'deleteIcon'];\n  displayedColumns: string[] = ['companyDescription', 'companyPenaltyAmount'];\n  companyPenalties = new CompanyPenalties();\n  companyPenaltiesList = [];\n  companyList = [];\n  companyPenaltiesForm: FormGroup;\n\n  constructor(\n    private apiService: ApiService,\n    private formBuilder: FormBuilder,\n    private sweetAlertService: SweetAlertService,\n    public datepipe: DatePipe\n  ) { }\n\n  ngOnInit(): void {\n    this.setFormValidator();\n    this.getCompanyList();\n    this.getCompanyPenaltiesList();\n  }\n\n  getCompanyPenaltiesList(): void {\n    this.apiService.findAll(ENDPOINTS.companyPenalties).subscribe(\n      (res: any) => {\n      if (res) {\n        this.companyPenaltiesList = res.responseData.data;\n        this.dataSource = new MatTableDataSource<CompanyPenalties>(res.responseData.data);\n        this.dataSource.paginator = this.formListComponent.paginator;\n        this.dataSource.sort = this.formListComponent.sort;\n      }\n    });\n  }\n\n  getCompanyPenalties(): void {\n    this.apiService.findById(ENDPOINTS.companyPenalties, this.formListComponent.idForUpdate).subscribe((res: any) => {\n      if (res) {\n\n        this.companyPenalties = res.responseData.data;\n        console.log(this.companyPenalties);\n      }\n    });\n  }\n\n  getCompanyList(): void {\n    this.apiService.findAll(ENDPOINTS.activeCompanies).subscribe(\n      (res: any) => {\n      if (res) {\n        this.companyList = res.responseData.data;\n      }\n    });\n  }\n\n  save(): void {\n    this.formatDate();\n    this.apiService.save(ENDPOINTS.companyPenalties, this.companyPenalties).subscribe(\n      (res: any) => {\n      if (res) {\n        this.sweetAlertService.success(res);\n      }else{\n        this.sweetAlertService.error(res);\n      }\n      this.getCompanyPenaltiesList();\n      this.resetFormValidator();\n    });\n  }\n\n  update(): void {\n    this.apiService.update(ENDPOINTS.companyPenalties, this.companyPenalties).subscribe(\n      (res: any) => {\n      if (res) {\n        this.sweetAlertService.success(res);\n      }else{\n        this.sweetAlertService.error(res);\n      }\n      this.getCompanyPenaltiesList();\n      this.resetFormValidator();\n    });\n  }\n\n  setFormValidator(): void {\n    this.companyPenaltiesForm = this.formBuilder.group({\n      company: ['', Validators.required],\n      penaltyAmount: ['', Validators.required],\n      // penaltyDate: ['', Validators.required],\n    });\n  }\n\n  resetFormValidator(): void {\n    this.companyPenalties = new CompanyPenalties();\n    this.companyPenaltiesForm.markAsUntouched();\n    this.companyPenaltiesForm.markAsPristine();\n  }\n\n  compareCompanyPenalties(value: any, selected: any): boolean {\n    if (value && selected) {\n      return value.description === selected.description;\n    }\n  }\n\n  formatDate(): void {\n    // this.brandPenalties.penaltyDate = this.datepipe.transform(new Date(), 'yyyy-MM-dd')\n    this.datepipe.transform(this.companyPenalties.penaltyDate, 'yyyy-MM-dd')\n  }\n\n  delete() {\n    Swal.fire({\n      text: 'Are you sure you want to delete this company penalty?',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Confirm'\n    }).then((result) => {\n      if (result.value) {\n        this.apiService.deleteById(ENDPOINTS.companyPenalties, this.companyPenalties.id).subscribe(\n          () => {\n            this.sweetAlertService.customSuccessMessage('Company penalty successfully deleted.');\n            this.resetFormValidator();\n            this.getCompanyList();\n            this.getCompanyPenaltiesList();\n          }\n        );\n      }\n    });\n  }\n\n}\n","<form>\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-md-12 title\">\n          <mat-label>\n            <mat-icon>turned_in</mat-icon> Company Penalties\n          </mat-label>\n        </div>\n      </div>\n      <hr>\n\n      <form [formGroup]=\"companyPenaltiesForm\">\n\n        <div class=\"row\">\n          <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n            <mat-label>Company <span class=\"required-field\">*</span></mat-label>\n            <mat-select [(ngModel)]=\"companyPenalties.company\" name=\"company\" formControlName=\"company\" [compareWith]=\"compareCompanyPenalties\">\n              <mat-option *ngFor=\"let i of companyList\" [value]=\"i\">\n                {{i.companyName}}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n            <mat-label>Penalty Amount <span class=\"required-field\">*</span></mat-label>\n            <input matInput [(ngModel)]=\"companyPenalties.penaltyAmount\" name=\"penaltyAmount\" formControlName=\"penaltyAmount\">\n        </mat-form-field>\n        </div>\n\n        <div class=\"row\">\n            <!-- <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n            <mat-label>Choose date penalty</mat-label>\n            <input matInput [matDatepicker]=\"picker\" readonly [(ngModel)]=\"brandPenalties.penaltyDate\" name=\"penaltyDate\"\n              formControlName=\"penaltyDate\" (dateChange)=\"test()\">\n            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n            <mat-datepicker #picker disabled=\"false\" color=\"warn\"></mat-datepicker>\n          </mat-form-field> -->\n        </div>\n      </form>\n\n      <app-form-action-buttons [childObject]=\"companyPenalties\" [childForm]=\"companyPenaltiesForm\" (saveFunction)=\"save()\" (updateFunction)=\"update()\"\n              (cancelFunction)=\"resetFormValidator()\" (deleteFunction)=\"delete()\">\n      </app-form-action-buttons>\n      <br>\n      <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\n          (selectInListFunction)=\"getCompanyPenalties()\">\n          <!-- (deleteInListFunction)=\"delete()\" -->\n      </app-form-list>\n\n    </div>\n  </form>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CompanyPenaltiesComponent } from './company-penalties.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CompanyPenaltiesComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CompanyPenaltiesRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CompanyPenaltiesRoutingModule } from './company-penalties-routing.module';\nimport { CompanyPenaltiesComponent } from './company-penalties.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AngularMaterialModule } from '@shared';\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\n\n\n@NgModule({\n  declarations: [CompanyPenaltiesComponent],\n  imports: [\n    CommonModule,\n    CompanyPenaltiesRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n    FragmentsModule\n  ]\n})\nexport class CompanyPenaltiesModule { }\n"]}