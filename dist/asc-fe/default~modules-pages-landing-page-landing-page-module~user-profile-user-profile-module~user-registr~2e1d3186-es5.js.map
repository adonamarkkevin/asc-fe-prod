{"version":3,"sources":["webpack:///src/app/modules/pages/account/user-registration/user-registration-routing.module.ts","webpack:///src/app/core/models/email.model.ts","webpack:///src/app/modules/pages/company/company-routing.module.ts","webpack:///src/app/modules/pages/company/add-company/add-company-routing.module.ts","webpack:///src/app/modules/pages/account/user-registration/user-registration.component.ts","webpack:///src/app/modules/pages/account/user-registration/user-registration.component.html","webpack:///src/app/modules/pages/account/user-registration/user-registration.module.ts","webpack:///src/app/modules/pages/company/add-company/add-company.module.ts","webpack:///src/app/modules/pages/company/company.module.ts","webpack:///src/app/modules/pages/company/index.ts"],"names":["routes","path","component","UserRegistrationRoutingModule","forChild","Email","children","LIST_COMPANY","loadChildren","then","m","ListCompanyModule","ADD_COMPANY","AddCompanyModule","UPDATE_COMPANY","CompanyRoutingModule","AddCompanyRoutingModule","UserRegistrationComponent","apiService","formBuilder","sweetAlertService","dataStorage","router","route","dialog","validateFieldService","dialogRef","data","statusList","company","userRole","affiliation","userAccount","email","userAccountList","userRoleList","companyList","affiliationList","dropDownDatasource","passwordMatch","process","hidePassword","hideConfirmPassword","isUpdate","registerStatus","confirmPasswords","isRegistration","isRegister","status","getList","setFormValidator2","id","Number","snapshot","paramMap","get","viewUserInformation","findAll","activeCompanies","subscribe","res","responseData","console","log","activeMembersAffiliation","findById","i","value","open","width","height","isFromModal","isUserRegistration","afterClosed","result","password","username","toLowerCase","save","addUserAccount","undefined","customSuccessMessage","closeAll","err","error","resetFormValidator","update","updateUserAccount","success","navigate","userAccountForm","group","firstName","required","lastName","userName","acceptTerms","userInfo","middleName","mobileNumber","companyInfo","companyAddress","companyMobileNo","companyTelephoneNo","companyTelephoneNo2","companyFaxNumber","contactPersonName","contactPersonEmail","membersAffiliation","accountInfo","pattern","minLength","getUserAccount","res1","event","filterValue","target","selected","description","markAsUntouched","markAsPristine","confirmPassword","UserRegistrationModule","CompanyModule"],"mappings":"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","file":"default~modules-pages-landing-page-landing-page-module~user-profile-user-profile-module~user-registr~2e1d3186-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UserRegistrationComponent } from './user-registration.component';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserRegistrationComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UserRegistrationRoutingModule { }\r\n","export class Email {\r\n    mailTo: String;\r\n    user: String;\r\n    verificationCode: Number;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { URL_PATHS } from '@shared';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: URL_PATHS.LIST_COMPANY,\r\n        loadChildren: () => import('./list-company/list-company.module')\r\n          .then(m => m.ListCompanyModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.ADD_COMPANY,\r\n        loadChildren: () => import('./add-company/add-company.module')\r\n          .then(m => m.AddCompanyModule)\r\n      },\r\n      {\r\n        path: URL_PATHS.UPDATE_COMPANY + '/:id',\r\n        loadChildren: () => import('./add-company/add-company.module')\r\n          .then(m => m.AddCompanyModule)\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CompanyRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AddCompanyComponent } from './add-company.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AddCompanyComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AddCompanyRoutingModule { }\r\n","import { Component, Inject, OnDestroy, OnInit, Optional, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AddCompanyComponent } from '@company';\r\nimport { Affiliation, Company, UserAccount, UserRole } from '@models';\r\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\r\nimport { ENDPOINTS, STATUSES } from '@shared';\r\nimport { ValidateFieldService } from 'app/core/services/validate-field.service';\r\nimport { Email } from '../../../../core/models/email.model';\r\n\r\n@Component({\r\n  selector: 'app-user-registration',\r\n  templateUrl: './user-registration.component.html',\r\n  styleUrls: ['./user-registration.component.scss']\r\n})\r\nexport class UserRegistrationComponent implements OnInit, OnDestroy {\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  @ViewChild(MatTable, { static: false }) table: MatTable<UserAccount>;\r\n  dataSource: MatTableDataSource<UserAccount>;\r\n  // displayedColumns: string[] = ['name', 'status'];\r\n  statusList = [...STATUSES];\r\n\r\n  company = new Company();\r\n  userRole = new UserRole();\r\n  affiliation = new Affiliation();\r\n  userAccount = new UserAccount();\r\n  email = new Email();\r\n\r\n  userAccountList = [];\r\n  userRoleList = [];\r\n  companyList = [];\r\n  affiliationList = [];\r\n  dropDownDatasource: string[] = [];\r\n\r\n  userAccountForm: FormGroup;\r\n  acceptTerms: FormGroup;\r\n  userInfo: FormGroup;\r\n  companyInfo: FormGroup;\r\n  accountInfo: FormGroup;\r\n  firstFormGroup: FormGroup;\r\n  secondFormGroup: FormGroup;\r\n  passwordMatch = false;\r\n  process = 'SAVED';\r\n  hidePassword = true;\r\n  hideConfirmPassword = true;\r\n  isUpdate = false;\r\n  registerStatus = '';\r\n  confirmPasswords = '';\r\n  id: any;\r\n  isRegistration: boolean = false;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n    private dataStorage: DataStorageService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private dialog: MatDialog,\r\n    public validateFieldService: ValidateFieldService,\r\n    // @Inject(MAT_DIALOG_DATA) public data: any,\r\n    @Optional() public dialogRef: MatDialogRef<UserRegistrationComponent>,\r\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    // Status for first time register\r\n    // this.registerStatus = data.status;\r\n    // this.registerStatus = 'Registered';\r\n    if(data.isRegister === true){\r\n      this.isRegistration = true;\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.registerStatus = this.data.status;\r\n    this.getList();\r\n    // this.checkProcessStatus();\r\n    this.setFormValidator2();\r\n    this.id = Number(this.route.snapshot.paramMap.get('id'));\r\n    if (this.id !== 0) {\r\n      this.isUpdate = true;\r\n      this.viewUserInformation();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // this.dataStorage.saveUserAccountId(0);\r\n    this.userAccount = new UserAccount();\r\n    this.company = new Company();\r\n    this.registerStatus = '';\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.activeCompanies).subscribe((res: any) => {\r\n      this.companyList = res.responseData.data;\r\n      console.log(this.companyList);\r\n    });\r\n    this.apiService.findAll(ENDPOINTS.activeMembersAffiliation).subscribe(\r\n      (res: any) => {\r\n        this.affiliationList = res.responseData.data;\r\n      });\r\n\r\n  }\r\n\r\n  viewUserInformation(): void {\r\n    this.apiService.findById(ENDPOINTS.userAccount, this.id).subscribe(\r\n      (res: any) => {\r\n        this.userAccount = res.responseData.data;\r\n        this.company = res.responseData.data.company\r\n        // this.affiliation = this.company.membersAffiliation;\r\n        // console.log(this.userAccount);\r\n      });\r\n  }\r\n\r\n  getSelectedCompany(i): void {\r\n    if (i) {\r\n      this.apiService.findById(ENDPOINTS.company, i.value.id).subscribe(\r\n        (res: any) => {\r\n          this.company = res.responseData.data;\r\n          this.userAccount.company = res.responseData.data;\r\n        });\r\n    }\r\n  }\r\n\r\n  openCompanyComponent(): void {\r\n    const dialogRef = this.dialog.open(AddCompanyComponent, {\r\n      width: '80%',\r\n      height: '85%',\r\n      data: {\r\n        isFromModal: true,\r\n        isUserRegistration: true\r\n      }\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      console.log('The dialog was closed', result);\r\n      this.getList();\r\n      if (result) {\r\n        this.company = result;\r\n        this.userAccount.company = result;\r\n      }\r\n    });\r\n  }\r\n\r\n  confirmPassword(password): void {\r\n    if (this.userAccount.password === password) {\r\n      this.passwordMatch = true;\r\n    } else {\r\n      this.passwordMatch = false;\r\n    }\r\n  }\r\n\r\n  save(): void {\r\n    this.userAccount.username = this.userAccount.username.toLowerCase();\r\n    this.apiService.save(ENDPOINTS.addUserAccount, this.userAccount).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          // this.sweetAlertService.success(res);\r\n          this.sweetAlertService.customSuccessMessage('Your account was successfully created. Please check your email for verification.');\r\n          this.dialog.closeAll();\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n        console.log('ERROR:::', err);\r\n\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n        // this.dialogRef.close();\r\n      });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.updateUserAccount, this.userAccount).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n          this.router.navigate(['/asc/page/account/user-list']);\r\n        }\r\n      }, (err: any) => {\r\n        console.log(err);\r\n\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.userAccountForm = this.formBuilder.group({\r\n      firstName: ['', Validators.required],\r\n      lastName: ['', Validators.required],\r\n      userName: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  setFormValidator2(): void {\r\n    this.acceptTerms = this.formBuilder.group({\r\n      acceptTerms: ['', Validators.required]\r\n    });\r\n    this.userInfo = this.formBuilder.group({\r\n      firstName: ['', Validators.required],\r\n      middleName: [''],\r\n      lastName: ['', Validators.required],\r\n      mobileNumber: ['', Validators.required]\r\n    });\r\n    this.companyInfo = this.formBuilder.group({\r\n      company: ['', Validators.required],\r\n      companyAddress: [''],\r\n      companyMobileNo: [''],\r\n      companyTelephoneNo: [''],\r\n      companyTelephoneNo2: [''],\r\n      companyFaxNumber: [''],\r\n      contactPersonName:[''],\r\n      contactPersonEmail:[''],\r\n      membersAffiliation:[''],\r\n      // membershipAffiliation: ['',Validators.required],\r\n    });\r\n    this.accountInfo = this.formBuilder.group({\r\n      userName: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.pattern('((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'), Validators.minLength(8)]],\r\n      confirmPasswords: ['', Validators.required],\r\n    });\r\n    this.userAccountForm = new FormGroup({\r\n      acceptTerms: new FormControl(),\r\n      userInfo: new FormControl(),\r\n      companyInfo: new FormControl(),\r\n      accountInfo: new FormControl()\r\n    });\r\n  }\r\n\r\n  checkProcessStatus(): void {\r\n    if (this.dataStorage.getUserAccount().id !== 0) {\r\n      this.process = 'UPDATE';\r\n      this.apiService.findById(ENDPOINTS.userAccount, this.dataStorage.getUserAccount().id).subscribe(\r\n        (res: any) => {\r\n          this.userAccount = res.responseData.data;\r\n          this.apiService.findById(ENDPOINTS.company, this.userAccount.company.id).subscribe(\r\n            (res1: any) => {\r\n              this.company = res1.responseData.data;\r\n            })\r\n        })\r\n    }\r\n  }\r\n\r\n  applyFilter(event: Event): void {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    // this.companyList.filter = filterValue.trim().toLowerCase();\r\n    // this.companyList = this.companyList.filter(cl => cl.companyName === event);\r\n  }\r\n\r\n  compareMembersAffiliation(value: any, selected: any): boolean {\r\n    // return value.description === selected.description;\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  compareCompany(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.id === selected.id;\r\n    }\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.userAccount = new UserAccount();\r\n    this.userAccountForm.markAsUntouched();\r\n    this.userAccountForm.markAsPristine();\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n","<form>\r\n  <div class=\"container-fluid\"><br>\r\n    <div class=\"col-md-12 title\" *ngIf=\"!isUpdate\">\r\n      <mat-label>\r\n        Account Registration\r\n        <p> <i style=\"color: red;\"><i class=\"material-icons\" style=\"color: red;\">error_outline</i> All fields with\r\n          <span class=\"required-field\">*</span> are required,\r\n          </i> <i>Please provide all required\r\n            details to register.</i></p>\r\n        <p></p>\r\n      </mat-label>\r\n    </div>\r\n    <div class=\"col-md-12 title\" *ngIf=\"isUpdate\">\r\n      <mat-label>\r\n        Update Account\r\n      </mat-label>\r\n      <button class=\"button-right button-red\" mat-raised-button [routerLink]=\"['/asc/page/account/user-list']\">\r\n        <mat-icon>list</mat-icon> VIEW USER LIST\r\n      </button>\r\n      <p>Please provide all required details.</p>\r\n    </div>\r\n\r\n\r\n    <mat-horizontal-stepper linear #stepper>\r\n\r\n      <mat-step [stepControl]=\"acceptTerms\" *ngIf=\"isRegistration\">\r\n        <form [formGroup]=\"acceptTerms\">\r\n          <ng-template matStepLabel> Privacy Notice</ng-template>\r\n          <h4>\r\n            <mat-icon>label_important</mat-icon> Terms and Agreements\r\n          </h4>\r\n          <div class=\"row message-body\">\r\n            <p>Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical\r\n              Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at\r\n              Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a\r\n              Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the\r\n              undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\"\r\n              (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of\r\n              ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit\r\n              amet..\", comes from a line in section 1.10.32.\r\n\r\n              The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections\r\n              1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact\r\n              original form, accompanied by English versions from the 1914 translation by H. Rackham.</p>\r\n          </div>\r\n          <div class=\"row\">\r\n            <section class=\"example-section\">\r\n              <mat-checkbox class=\"example-margin\" [(ngModel)]=\"userAccount.acceptTerms\" name=\"acceptTerms\"\r\n                formControlName=\"acceptTerms\">\r\n                Accept Terms and Agreement\r\n              </mat-checkbox>\r\n            </section>\r\n          </div><br>\r\n          <div>\r\n            <button mat-raised-button color=\"primary\" matStepperNext\r\n              *ngIf=\"userAccount.acceptTerms === true\">Next</button>\r\n          </div>\r\n        </form>\r\n      </mat-step>\r\n\r\n      <mat-step [stepControl]=\"userInfo\">\r\n        <form [formGroup]=\"userInfo\">\r\n          <ng-template matStepLabel>Personal Information</ng-template>\r\n          <div class=\"row fields\">\r\n            <h4>\r\n              <mat-icon>label_important</mat-icon> Personal Information:\r\n            </h4>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Given name:  <span class=\"required-field\">*</span></mat-label>\r\n                <input matInput [(ngModel)]=\"userAccount.firstName\" name=\"firstName\" formControlName=\"firstName\">\r\n              </mat-form-field>\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Middle name: <span class=\"required-field\">\r\n                    <!-- <mat-icon>notification_important</mat-icon> -->\r\n                  </span></mat-label>\r\n                <input matInput [(ngModel)]=\"userAccount.middleName\" name=\"middleName\" formControlName=\"middleName\">\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Last name:  <span class=\"required-field\">*</span></mat-label>\r\n                <input matInput [(ngModel)]=\"userAccount.lastName\" name=\"lastName\" formControlName=\"lastName\">\r\n              </mat-form-field>\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Mobile Number: <span class=\"required-field\">*</span></mat-label>\r\n                <input matInput [(ngModel)]=\"userAccount.mobileNumber\" name=\"mobileNumber\" placeholder=\"09xxxxxxxxx\"\r\n                  formControlName=\"mobileNumber\" (keydown)=\"validateFieldService.numbersOnly($event)\" maxlength=\"11\">\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"row\">\r\n\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <button mat-raised-button matStepperPrevious>Back</button>\r\n            <button mat-raised-button color=\"primary\" matStepperNext>Next</button>\r\n          </div>\r\n        </form>\r\n      </mat-step>\r\n\r\n      <mat-step [stepControl]=\"companyInfo\"\r\n        *ngIf=\"userAccount?.userRole?.name=='ROLE_APPLICANT'||registerStatus==='Register'\">\r\n        <form [formGroup]=\"companyInfo\">\r\n          <ng-template matStepLabel>Company Information</ng-template>\r\n          <div class=\"row fields\">\r\n            <h4>\r\n              <mat-icon>label_important</mat-icon> Company Information:\r\n            </h4>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-12\" appearance=\"outline\">\r\n                <mat-label> Company  <span class=\"required-field\">*</span>\r\n                  <span class=\"badge rounded-pill bg-warning\" *ngIf=\"userAccount?.company?.status === 'FOR_APPROVAL'\">\r\n                    For Approval\r\n                  </span>\r\n                  <span class=\"badge rounded-pill bg-danger\" *ngIf=\"userAccount?.company?.delinquent \">\r\n                    With Penalty\r\n                  </span>\r\n                </mat-label>\r\n                <mat-select [(ngModel)]=\"userAccount.company\" name=\"company\" [compareWith]=\"compareCompany\"\r\n                  formControlName=\"company\" matNativeControl (selectionChange)=\"getSelectedCompany($event)\">\r\n                  <mat-option (click)=\"openCompanyComponent()\">\r\n                    <span class=\"badge bg-success dd\">Add New Company</span>\r\n                  </mat-option>\r\n                  <mat-option *ngFor=\"let i of companyList\" [value]=\"i\">\r\n                    {{i.companyName}}\r\n                  </mat-option>\r\n\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-10\" appearance=\"outline\">\r\n                <mat-label> Member Affiliation</mat-label>\r\n                <input matInput [value]=\"company?.membersAffiliation?.description\" name=\"membersAffiliation\"\r\n                  formControlName=\"membersAffiliation\" readonly>\r\n              </mat-form-field>\r\n              <!-- <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Company Number: </mat-label>\r\n                <input matInput [(ngModel)]=\"company.companyMobileNo\" name=\"companyMobileNo\"\r\n                  formControlName=\"companyMobileNo\" readonly>\r\n              </mat-form-field> -->\r\n\r\n              <!-- <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Telephone Number: </mat-label>\r\n                <input matInput [value]=\"company?.companyTelephoneNo\" name=\"companyTelephoneNo\"\r\n                  formControlName=\"companyTelephoneNo\" readonly>\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                <mat-label> Alternate Telephone Number: </mat-label>\r\n                <input matInput [(ngModel)]=\"company.companyTelephoneNo2\" name=\"companyTelephoneNo2\"\r\n                  formControlName=\"companyTelephoneNo2\" readonly>\r\n              </mat-form-field>\r\n\r\n              <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                <mat-label> Contact Person: </mat-label>\r\n                <input matInput [(ngModel)]=\"company.contactPersonName\" name=\"contactPersonName\"\r\n                  formControlName=\"contactPersonName\" readonly>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                <mat-label> Company Email Address: </mat-label>\r\n                <input matInput [(ngModel)]=\"company.contactPersonEmail\" name=\"contactPersonEmail\"\r\n                  formControlName=\"contactPersonEmail\" readonly>\r\n              </mat-form-field> -->\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <button mat-raised-button matStepperPrevious>Back</button>\r\n            <button mat-raised-button color=\"primary\" matStepperNext>Next</button>\r\n          </div>\r\n        </form>\r\n      </mat-step>\r\n\r\n      <mat-step [stepControl]=\"accountInfo\">\r\n        <form [formGroup]=\"accountInfo\">\r\n          <ng-template matStepLabel>Account Information</ng-template>\r\n          <div class=\"row fields\">\r\n            <h4>\r\n              <mat-icon>label_important</mat-icon> Account Information:\r\n            </h4>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-12\" appearance=\"outline\">\r\n                <mat-label> Email Address:  <span class=\"required-field\">*</span></mat-label>\r\n                <input matInput [(ngModel)]=\"userAccount.username\" name=\"userName\" formControlName=\"userName\"\r\n                  [readonly]=\"process === 'UPDATE'\" type=\"email\" pattern=\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\">\r\n              </mat-form-field>\r\n              <p *ngIf=\"accountInfo.get('userName').dirty && accountInfo.controls['userName'].errors\" class=\"badge\">\r\n                <mat-icon>warning</mat-icon>\r\n                Please provide a valid email address.\r\n              </p>\r\n            </div>\r\n            <div\r\n              [ngClass]=\"accountInfo.get('password').dirty && accountInfo.controls['password'].errors ? 'row credential-creation' : 'row' \">\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Password:  <span class=\"required-field\">*</span>\r\n                </mat-label>\r\n                <input matInput [type]=\"hidePassword ? 'password' : 'text'\" [(ngModel)]=\"userAccount.password\"\r\n                  name=\"password\" formControlName=\"password\" (keyup)=\"confirmPassword(confirmPasswords)\">\r\n                <button type=\"button\" mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\"\r\n                  [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hidePassword\">\r\n                  <mat-icon>{{hidePassword ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                </button>\r\n                <mat-hint *ngIf=\"accountInfo.get('password').dirty && accountInfo.controls['password'].errors\">\r\n                  <mat-icon>warning</mat-icon>\r\n                  Password must be at least 8 characters long and must contain a number, lower case and upper case\r\n                  characters.\r\n                </mat-hint>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Confirm Password:\r\n                  <span class=\"required-field\">*</span>\r\n                </mat-label>\r\n                <input matInput [type]=\"hideConfirmPassword ? 'password' : 'text'\" [(ngModel)]=\"confirmPasswords\"\r\n                  name=\"confirmPasswords\" formControlName=\"confirmPasswords\"\r\n                  (keyup)=\"confirmPassword(confirmPasswords)\">\r\n                <button type=\"button\" mat-icon-button matSuffix (click)=\"hideConfirmPassword = !hideConfirmPassword\"\r\n                  [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hideConfirmPassword\">\r\n                  <mat-icon>{{hideConfirmPassword ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                </button>\r\n                <mat-hint *ngIf=\"accountInfo.get('confirmPasswords').dirty && !passwordMatch\">\r\n                  <mat-icon>warning</mat-icon>\r\n                  Password does not match\r\n                </mat-hint>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <mat-hint *ngIf=\"(accountInfo.valid || passwordMatch) && userAccount.acceptTerms===false\">\r\n             <p><i style=\"color: red;\"> <mat-icon>warning</mat-icon>Need to Accept Terms and Agreement!</i></p>\r\n            </mat-hint>\r\n            <button mat-raised-button color=\"primary\" *ngIf=\"!isUpdate\" (click)=\"save()\"\r\n              [disabled]=\"(!accountInfo.valid || !passwordMatch) || userAccount.acceptTerms===false\">Register</button>\r\n            <button mat-raised-button color=\"primary\" *ngIf=\"isUpdate\" (click)=\"update()\"\r\n              [disabled]=\"!accountInfo.valid || !passwordMatch\">Update</button>\r\n            <button mat-raised-button matStepperPrevious>Back</button>\r\n            <button mat-raised-button color=\"warn\" (click)=\"stepper.reset()\">Reset</button>\r\n          </div>\r\n        </form>\r\n      </mat-step>\r\n    </mat-horizontal-stepper>\r\n  </div>\r\n</form>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { UserRegistrationRoutingModule } from './user-registration-routing.module';\r\nimport { UserRegistrationComponent } from './user-registration.component';\r\nimport { FragmentsModule } from '../../../fragments/fragments.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [UserRegistrationComponent],\r\n  imports: [\r\n    CommonModule,\r\n    UserRegistrationRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule\r\n  ],\r\n  exports: [\r\n    UserRegistrationComponent\r\n  ]\r\n})\r\nexport class UserRegistrationModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AddCompanyRoutingModule } from './add-company-routing.module';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { AddCompanyComponent } from './add-company.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ AddCompanyComponent ],\r\n  imports: [\r\n    CommonModule,\r\n    AddCompanyRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n  ]\r\n})\r\nexport class AddCompanyModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { CompanyRoutingModule } from './company-routing.module';;\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    CompanyRoutingModule,\r\n  ]\r\n})\r\nexport class CompanyModule { }\r\n","export * from './company.module';\r\nexport * from './add-company/add-company.component';\r\nexport * from './add-company/add-company.module';\r\nexport * from './list-company/list-company.component';\r\nexport * from './list-company/list-company.module';"]}