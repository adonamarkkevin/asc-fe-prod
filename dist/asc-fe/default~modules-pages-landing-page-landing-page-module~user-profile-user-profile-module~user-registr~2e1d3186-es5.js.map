{"version":3,"sources":["webpack:///src/app/modules/pages/account/user-registration/user-registration-routing.module.ts","webpack:///src/app/core/models/email.model.ts","webpack:///src/app/modules/pages/company/company-routing.module.ts","webpack:///src/app/modules/pages/company/add-company/add-company-routing.module.ts","webpack:///src/app/modules/pages/account/user-registration/user-registration.component.ts","webpack:///src/app/modules/pages/account/user-registration/user-registration.component.html","webpack:///src/app/modules/pages/account/user-registration/user-registration.module.ts","webpack:///src/app/modules/pages/company/add-company/add-company.module.ts","webpack:///src/app/modules/pages/company/company.module.ts","webpack:///src/app/modules/pages/company/index.ts"],"names":["routes","path","component","UserRegistrationRoutingModule","forChild","Email","children","LIST_COMPANY","loadChildren","then","m","ListCompanyModule","ADD_COMPANY","AddCompanyModule","UPDATE_COMPANY","CompanyRoutingModule","AddCompanyRoutingModule","UserRegistrationComponent","apiService","formBuilder","sweetAlertService","dataStorage","router","route","dialog","validateFieldService","dialogRef","data","statusList","company","userRole","affiliation","userAccount","email","userAccountList","userRoleList","companyList","affiliationList","dropDownDatasource","passwordMatch","process","hidePassword","hideConfirmPassword","isUpdate","registerStatus","confirmPasswords","isRegistration","isRegister","status","getList","setFormValidator2","id","Number","snapshot","paramMap","get","viewUserInformation","findAll","activeCompanies","subscribe","res","responseData","console","log","activeMembersAffiliation","findById","i","value","open","width","height","isFromModal","isUserRegistration","afterClosed","result","password","username","toLowerCase","save","addUserAccount","undefined","customSuccessMessage","closeAll","err","error","resetFormValidator","update","updateUserAccount","success","navigate","userAccountForm","group","firstName","required","lastName","userName","acceptTerms","userInfo","middleName","mobileNumber","companyInfo","companyAddress","companyMobileNo","companyTelephoneNo","companyTelephoneNo2","companyFaxNumber","contactPersonName","contactPersonEmail","membersAffiliation","accountInfo","pattern","minLength","getUserAccount","res1","event","filterValue","target","selected","description","markAsUntouched","markAsPristine","confirmPassword","UserRegistrationModule","CompanyModule"],"mappings":"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","file":"default~modules-pages-landing-page-landing-page-module~user-profile-user-profile-module~user-registr~2e1d3186-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { UserRegistrationComponent } from './user-registration.component';\n\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UserRegistrationComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class UserRegistrationRoutingModule { }\n","export class Email {\n    mailTo: String;\n    user: String;\n    verificationCode: Number;\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { URL_PATHS } from '@shared';\n\nconst routes: Routes = [\n  {\n    path: '',\n    children: [\n      {\n        path: URL_PATHS.LIST_COMPANY,\n        loadChildren: () => import('./list-company/list-company.module')\n          .then(m => m.ListCompanyModule)\n      },\n      {\n        path: URL_PATHS.ADD_COMPANY,\n        loadChildren: () => import('./add-company/add-company.module')\n          .then(m => m.AddCompanyModule)\n      },\n      {\n        path: URL_PATHS.UPDATE_COMPANY + '/:id',\n        loadChildren: () => import('./add-company/add-company.module')\n          .then(m => m.AddCompanyModule)\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CompanyRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AddCompanyComponent } from './add-company.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AddCompanyComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AddCompanyRoutingModule { }\n","import { Component, Inject, OnDestroy, OnInit, Optional, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AddCompanyComponent } from '@company';\nimport { Affiliation, Company, UserAccount, UserRole } from '@models';\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\nimport { ENDPOINTS, STATUSES } from '@shared';\nimport { ValidateFieldService } from 'app/core/services/validate-field.service';\nimport { Email } from '../../../../core/models/email.model';\n\n@Component({\n  selector: 'app-user-registration',\n  templateUrl: './user-registration.component.html',\n  styleUrls: ['./user-registration.component.scss']\n})\nexport class UserRegistrationComponent implements OnInit, OnDestroy {\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\n  @ViewChild(MatTable, { static: false }) table: MatTable<UserAccount>;\n  dataSource: MatTableDataSource<UserAccount>;\n  // displayedColumns: string[] = ['name', 'status'];\n  statusList = [...STATUSES];\n\n  company = new Company();\n  userRole = new UserRole();\n  affiliation = new Affiliation();\n  userAccount = new UserAccount();\n  email = new Email();\n\n  userAccountList = [];\n  userRoleList = [];\n  companyList = [];\n  affiliationList = [];\n  dropDownDatasource: string[] = [];\n\n  userAccountForm: FormGroup;\n  acceptTerms: FormGroup;\n  userInfo: FormGroup;\n  companyInfo: FormGroup;\n  accountInfo: FormGroup;\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n  passwordMatch = false;\n  process = 'SAVED';\n  hidePassword = true;\n  hideConfirmPassword = true;\n  isUpdate = false;\n  registerStatus = '';\n  confirmPasswords = '';\n  id: any;\n  isRegistration: boolean = false;\n\n  constructor(\n    private apiService: ApiService,\n    private formBuilder: FormBuilder,\n    private sweetAlertService: SweetAlertService,\n    private dataStorage: DataStorageService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private dialog: MatDialog,\n    public validateFieldService: ValidateFieldService,\n    // @Inject(MAT_DIALOG_DATA) public data: any,\n    @Optional() public dialogRef: MatDialogRef<UserRegistrationComponent>,\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    // Status for first time register\n    // this.registerStatus = data.status;\n    // this.registerStatus = 'Registered';\n    if(data.isRegister === true){\n      this.isRegistration = true;\n    }\n  }\n\n  ngOnInit(): void {\n    this.registerStatus = this.data.status;\n    this.getList();\n    // this.checkProcessStatus();\n    this.setFormValidator2();\n    this.id = Number(this.route.snapshot.paramMap.get('id'));\n    if (this.id !== 0) {\n      this.isUpdate = true;\n      this.viewUserInformation();\n    }\n  }\n\n  ngOnDestroy(): void {\n    // this.dataStorage.saveUserAccountId(0);\n    this.userAccount = new UserAccount();\n    this.company = new Company();\n    this.registerStatus = '';\n  }\n\n  getList(): void {\n    this.apiService.findAll(ENDPOINTS.activeCompanies).subscribe((res: any) => {\n      this.companyList = res.responseData.data;\n      console.log(this.companyList);\n    });\n    this.apiService.findAll(ENDPOINTS.activeMembersAffiliation).subscribe(\n      (res: any) => {\n        this.affiliationList = res.responseData.data;\n      });\n\n  }\n\n  viewUserInformation(): void {\n    this.apiService.findById(ENDPOINTS.userAccount, this.id).subscribe(\n      (res: any) => {\n        this.userAccount = res.responseData.data;\n        this.company = res.responseData.data.company\n        // this.affiliation = this.company.membersAffiliation;\n        // console.log(this.userAccount);\n      });\n  }\n\n  getSelectedCompany(i): void {\n    if (i) {\n      this.apiService.findById(ENDPOINTS.company, i.value.id).subscribe(\n        (res: any) => {\n          this.company = res.responseData.data;\n          this.userAccount.company = res.responseData.data;\n        });\n    }\n  }\n\n  openCompanyComponent(): void {\n    const dialogRef = this.dialog.open(AddCompanyComponent, {\n      width: '80%',\n      height: '85%',\n      data: {\n        isFromModal: true,\n        isUserRegistration: true\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed', result);\n      this.getList();\n      if (result) {\n        this.company = result;\n        this.userAccount.company = result;\n      }\n    });\n  }\n\n  confirmPassword(password): void {\n    if (this.userAccount.password === password) {\n      this.passwordMatch = true;\n    } else {\n      this.passwordMatch = false;\n    }\n  }\n\n  save(): void {\n    this.userAccount.username = this.userAccount.username.toLowerCase();\n    this.apiService.save(ENDPOINTS.addUserAccount, this.userAccount).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          // this.sweetAlertService.success(res);\n          this.sweetAlertService.customSuccessMessage('Your account was successfully created. Please check your email for verification.');\n          this.dialog.closeAll();\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n        console.log('ERROR:::', err);\n\n      }, () => {\n        // actions after subscription\n        this.resetFormValidator();\n        this.getList();\n        // this.dialogRef.close();\n      });\n  }\n\n  update(): void {\n    this.apiService.update(ENDPOINTS.updateUserAccount, this.userAccount).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.success(res);\n          this.router.navigate(['/asc/page/account/user-list']);\n        }\n      }, (err: any) => {\n        console.log(err);\n\n        this.sweetAlertService.error(err);\n      }, () => {\n        // actions after subscription\n        this.resetFormValidator();\n        this.getList();\n      });\n  }\n\n  setFormValidator(): void {\n    this.userAccountForm = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      userName: ['', Validators.required]\n    });\n  }\n\n  setFormValidator2(): void {\n    this.acceptTerms = this.formBuilder.group({\n      acceptTerms: ['', Validators.required]\n    });\n    this.userInfo = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      middleName: [''],\n      lastName: ['', Validators.required],\n      mobileNumber: ['', Validators.required]\n    });\n    this.companyInfo = this.formBuilder.group({\n      company: ['', Validators.required],\n      companyAddress: [''],\n      companyMobileNo: [''],\n      companyTelephoneNo: [''],\n      companyTelephoneNo2: [''],\n      companyFaxNumber: [''],\n      contactPersonName:[''],\n      contactPersonEmail:[''],\n      membersAffiliation:[''],\n      // membershipAffiliation: ['',Validators.required],\n    });\n    this.accountInfo = this.formBuilder.group({\n      userName: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.pattern('((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'), Validators.minLength(8)]],\n      confirmPasswords: ['', Validators.required],\n    });\n    this.userAccountForm = new FormGroup({\n      acceptTerms: new FormControl(),\n      userInfo: new FormControl(),\n      companyInfo: new FormControl(),\n      accountInfo: new FormControl()\n    });\n  }\n\n  checkProcessStatus(): void {\n    if (this.dataStorage.getUserAccount().id !== 0) {\n      this.process = 'UPDATE';\n      this.apiService.findById(ENDPOINTS.userAccount, this.dataStorage.getUserAccount().id).subscribe(\n        (res: any) => {\n          this.userAccount = res.responseData.data;\n          this.apiService.findById(ENDPOINTS.company, this.userAccount.company.id).subscribe(\n            (res1: any) => {\n              this.company = res1.responseData.data;\n            })\n        })\n    }\n  }\n\n  applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    // this.companyList.filter = filterValue.trim().toLowerCase();\n    // this.companyList = this.companyList.filter(cl => cl.companyName === event);\n  }\n\n  compareMembersAffiliation(value: any, selected: any): boolean {\n    // return value.description === selected.description;\n    if (value && selected) {\n      return value.description === selected.description;\n    }\n  }\n\n  compareCompany(value: any, selected: any): boolean {\n    if (value && selected) {\n      return value.id === selected.id;\n    }\n  }\n\n  resetFormValidator(): void {\n    this.userAccount = new UserAccount();\n    this.userAccountForm.markAsUntouched();\n    this.userAccountForm.markAsPristine();\n  }\n\n}\n\n\n\n","<form>\n  <div class=\"container-fluid\"><br>\n    <div class=\"col-md-12 title\" *ngIf=\"!isUpdate\">\n      <mat-label>\n        Account Registration\n        <p> <i style=\"color: red;\"><i class=\"material-icons\" style=\"color: red;\">error_outline</i> All fields with\n          <span class=\"required-field\">*</span> are required,\n          </i> <i>Please provide all required\n            details to register.</i></p>\n        <p></p>\n      </mat-label>\n    </div>\n    <div class=\"col-md-12 title\" *ngIf=\"isUpdate\">\n      <mat-label>\n        Update Account\n      </mat-label>\n      <button class=\"button-right button-red\" mat-raised-button [routerLink]=\"['/asc/page/account/user-list']\">\n        <mat-icon>list</mat-icon> VIEW USER LIST\n      </button>\n      <p>Please provide all required details.</p>\n    </div>\n\n\n    <mat-horizontal-stepper linear #stepper>\n\n      <mat-step [stepControl]=\"acceptTerms\" *ngIf=\"isRegistration\">\n        <form [formGroup]=\"acceptTerms\">\n          <ng-template matStepLabel> Privacy Notice</ng-template>\n          <h4>\n            <mat-icon>label_important</mat-icon> Terms and Agreements\n          </h4>\n          <div class=\"row message-body\">\n            <p>Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical\n              Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at\n              Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a\n              Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the\n              undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\"\n              (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of\n              ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit\n              amet..\", comes from a line in section 1.10.32.\n\n              The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections\n              1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact\n              original form, accompanied by English versions from the 1914 translation by H. Rackham.</p>\n          </div>\n          <div class=\"row\">\n            <section class=\"example-section\">\n              <mat-checkbox class=\"example-margin\" [(ngModel)]=\"userAccount.acceptTerms\" name=\"acceptTerms\"\n                formControlName=\"acceptTerms\">\n                Accept Terms and Agreement\n              </mat-checkbox>\n            </section>\n          </div><br>\n          <div>\n            <button mat-raised-button color=\"primary\" matStepperNext\n              *ngIf=\"userAccount.acceptTerms === true\">Next</button>\n          </div>\n        </form>\n      </mat-step>\n\n      <mat-step [stepControl]=\"userInfo\">\n        <form [formGroup]=\"userInfo\">\n          <ng-template matStepLabel>Personal Information</ng-template>\n          <div class=\"row fields\">\n            <h4>\n              <mat-icon>label_important</mat-icon> Personal Information:\n            </h4>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Given name:  <span class=\"required-field\">*</span></mat-label>\n                <input matInput [(ngModel)]=\"userAccount.firstName\" name=\"firstName\" formControlName=\"firstName\">\n              </mat-form-field>\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Middle name: <span class=\"required-field\">\n                    <!-- <mat-icon>notification_important</mat-icon> -->\n                  </span></mat-label>\n                <input matInput [(ngModel)]=\"userAccount.middleName\" name=\"middleName\" formControlName=\"middleName\">\n              </mat-form-field>\n            </div>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Last name:  <span class=\"required-field\">*</span></mat-label>\n                <input matInput [(ngModel)]=\"userAccount.lastName\" name=\"lastName\" formControlName=\"lastName\">\n              </mat-form-field>\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Mobile Number: <span class=\"required-field\">*</span></mat-label>\n                <input matInput [(ngModel)]=\"userAccount.mobileNumber\" name=\"mobileNumber\" placeholder=\"09xxxxxxxxx\"\n                  formControlName=\"mobileNumber\" (keydown)=\"validateFieldService.numbersOnly($event)\" maxlength=\"11\">\n              </mat-form-field>\n            </div>\n            <div class=\"row\">\n\n            </div>\n          </div>\n          <div>\n            <button mat-raised-button matStepperPrevious>Back</button>\n            <button mat-raised-button color=\"primary\" matStepperNext>Next</button>\n          </div>\n        </form>\n      </mat-step>\n\n      <mat-step [stepControl]=\"companyInfo\"\n        *ngIf=\"userAccount?.userRole?.name=='ROLE_APPLICANT'||registerStatus==='Register'\">\n        <form [formGroup]=\"companyInfo\">\n          <ng-template matStepLabel>Company Information</ng-template>\n          <div class=\"row fields\">\n            <h4>\n              <mat-icon>label_important</mat-icon> Company Information:\n            </h4>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-12\" appearance=\"outline\">\n                <mat-label> Company  <span class=\"required-field\">*</span>\n                  <span class=\"badge rounded-pill bg-warning\" *ngIf=\"userAccount?.company?.status === 'FOR_APPROVAL'\">\n                    For Approval\n                  </span>\n                  <span class=\"badge rounded-pill bg-danger\" *ngIf=\"userAccount?.company?.delinquent \">\n                    With Penalty\n                  </span>\n                </mat-label>\n                <mat-select [(ngModel)]=\"userAccount.company\" name=\"company\" [compareWith]=\"compareCompany\"\n                  formControlName=\"company\" matNativeControl (selectionChange)=\"getSelectedCompany($event)\">\n                  <mat-option (click)=\"openCompanyComponent()\">\n                    <span class=\"badge bg-success dd\">Add New Company</span>\n                  </mat-option>\n                  <mat-option *ngFor=\"let i of companyList\" [value]=\"i\">\n                    {{i.companyName}}\n                  </mat-option>\n\n                </mat-select>\n              </mat-form-field>\n            </div>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-10\" appearance=\"outline\">\n                <mat-label> Member Affiliation</mat-label>\n                <input matInput [value]=\"company?.membersAffiliation?.description\" name=\"membersAffiliation\"\n                  formControlName=\"membersAffiliation\" readonly>\n              </mat-form-field>\n              <!-- <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Company Number: </mat-label>\n                <input matInput [(ngModel)]=\"company.companyMobileNo\" name=\"companyMobileNo\"\n                  formControlName=\"companyMobileNo\" readonly>\n              </mat-form-field> -->\n\n              <!-- <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Telephone Number: </mat-label>\n                <input matInput [value]=\"company?.companyTelephoneNo\" name=\"companyTelephoneNo\"\n                  formControlName=\"companyTelephoneNo\" readonly>\n              </mat-form-field>\n            </div>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-4\" appearance=\"outline\">\n                <mat-label> Alternate Telephone Number: </mat-label>\n                <input matInput [(ngModel)]=\"company.companyTelephoneNo2\" name=\"companyTelephoneNo2\"\n                  formControlName=\"companyTelephoneNo2\" readonly>\n              </mat-form-field>\n\n              <mat-form-field class=\"col-md-4\" appearance=\"outline\">\n                <mat-label> Contact Person: </mat-label>\n                <input matInput [(ngModel)]=\"company.contactPersonName\" name=\"contactPersonName\"\n                  formControlName=\"contactPersonName\" readonly>\n              </mat-form-field>\n              <mat-form-field class=\"col-md-4\" appearance=\"outline\">\n                <mat-label> Company Email Address: </mat-label>\n                <input matInput [(ngModel)]=\"company.contactPersonEmail\" name=\"contactPersonEmail\"\n                  formControlName=\"contactPersonEmail\" readonly>\n              </mat-form-field> -->\n            </div>\n          </div>\n          <div>\n            <button mat-raised-button matStepperPrevious>Back</button>\n            <button mat-raised-button color=\"primary\" matStepperNext>Next</button>\n          </div>\n        </form>\n      </mat-step>\n\n      <mat-step [stepControl]=\"accountInfo\">\n        <form [formGroup]=\"accountInfo\">\n          <ng-template matStepLabel>Account Information</ng-template>\n          <div class=\"row fields\">\n            <h4>\n              <mat-icon>label_important</mat-icon> Account Information:\n            </h4>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-12\" appearance=\"outline\">\n                <mat-label> Email Address:  <span class=\"required-field\">*</span></mat-label>\n                <input matInput [(ngModel)]=\"userAccount.username\" name=\"userName\" formControlName=\"userName\"\n                  [readonly]=\"process === 'UPDATE'\" type=\"email\" pattern=\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\">\n              </mat-form-field>\n              <p *ngIf=\"accountInfo.get('userName').dirty && accountInfo.controls['userName'].errors\" class=\"badge\">\n                <mat-icon>warning</mat-icon>\n                Please provide a valid email address.\n              </p>\n            </div>\n            <div\n              [ngClass]=\"accountInfo.get('password').dirty && accountInfo.controls['password'].errors ? 'row credential-creation' : 'row' \">\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Password:  <span class=\"required-field\">*</span>\n                </mat-label>\n                <input matInput [type]=\"hidePassword ? 'password' : 'text'\" [(ngModel)]=\"userAccount.password\"\n                  name=\"password\" formControlName=\"password\" (keyup)=\"confirmPassword(confirmPasswords)\">\n                <button type=\"button\" mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\"\n                  [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hidePassword\">\n                  <mat-icon>{{hidePassword ? 'visibility_off' : 'visibility'}}</mat-icon>\n                </button>\n                <mat-hint *ngIf=\"accountInfo.get('password').dirty && accountInfo.controls['password'].errors\">\n                  <mat-icon>warning</mat-icon>\n                  Password must be at least 8 characters long and must contain a number, lower case and upper case\n                  characters.\n                </mat-hint>\n              </mat-form-field>\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Confirm Password:\n                  <span class=\"required-field\">*</span>\n                </mat-label>\n                <input matInput [type]=\"hideConfirmPassword ? 'password' : 'text'\" [(ngModel)]=\"confirmPasswords\"\n                  name=\"confirmPasswords\" formControlName=\"confirmPasswords\"\n                  (keyup)=\"confirmPassword(confirmPasswords)\">\n                <button type=\"button\" mat-icon-button matSuffix (click)=\"hideConfirmPassword = !hideConfirmPassword\"\n                  [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hideConfirmPassword\">\n                  <mat-icon>{{hideConfirmPassword ? 'visibility_off' : 'visibility'}}</mat-icon>\n                </button>\n                <mat-hint *ngIf=\"accountInfo.get('confirmPasswords').dirty && !passwordMatch\">\n                  <mat-icon>warning</mat-icon>\n                  Password does not match\n                </mat-hint>\n              </mat-form-field>\n            </div>\n          </div>\n          <div>\n            <mat-hint *ngIf=\"(accountInfo.valid || passwordMatch) && userAccount.acceptTerms===false\">\n             <p><i style=\"color: red;\"> <mat-icon>warning</mat-icon>Need to Accept Terms and Agreement!</i></p>\n            </mat-hint>\n            <button mat-raised-button color=\"primary\" *ngIf=\"!isUpdate\" (click)=\"save()\"\n              [disabled]=\"(!accountInfo.valid || !passwordMatch) || userAccount.acceptTerms===false\">Register</button>\n            <button mat-raised-button color=\"primary\" *ngIf=\"isUpdate\" (click)=\"update()\"\n              [disabled]=\"!accountInfo.valid || !passwordMatch\">Update</button>\n            <button mat-raised-button matStepperPrevious>Back</button>\n            <button mat-raised-button color=\"warn\" (click)=\"stepper.reset()\">Reset</button>\n          </div>\n        </form>\n      </mat-step>\n    </mat-horizontal-stepper>\n  </div>\n</form>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AngularMaterialModule } from '@shared';\nimport { UserRegistrationRoutingModule } from './user-registration-routing.module';\nimport { UserRegistrationComponent } from './user-registration.component';\nimport { FragmentsModule } from '../../../fragments/fragments.module';\n\n\n\n@NgModule({\n  declarations: [UserRegistrationComponent],\n  imports: [\n    CommonModule,\n    UserRegistrationRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n    FragmentsModule\n  ],\n  exports: [\n    UserRegistrationComponent\n  ]\n})\nexport class UserRegistrationModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AddCompanyRoutingModule } from './add-company-routing.module';\nimport { AngularMaterialModule } from '@shared';\nimport { AddCompanyComponent } from './add-company.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [ AddCompanyComponent ],\n  imports: [\n    CommonModule,\n    AddCompanyRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n  ]\n})\nexport class AddCompanyModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CompanyRoutingModule } from './company-routing.module';;\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    CompanyRoutingModule,\n  ]\n})\nexport class CompanyModule { }\n","export * from './company.module';\nexport * from './add-company/add-company.component';\nexport * from './add-company/add-company.module';\nexport * from './list-company/list-company.component';\nexport * from './list-company/list-company.module';"]}