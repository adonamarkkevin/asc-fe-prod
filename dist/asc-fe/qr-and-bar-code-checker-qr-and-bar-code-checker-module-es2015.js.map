{"version":3,"sources":["./src/app/modules/pages/maintenance/qr-and-bar-code-checker/qr-and-bar-code-checker.module.ts","./src/app/modules/pages/maintenance/qr-and-bar-code-checker/qr-and-bar-code-checker-routing.module.ts","./src/app/modules/pages/maintenance/qr-and-bar-code-checker/qr-and-bar-code-checker.component.ts","./src/app/modules/pages/maintenance/qr-and-bar-code-checker/qr-and-bar-code-checker.component.html"],"names":[],"mappings":"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","file":"qr-and-bar-code-checker-qr-and-bar-code-checker-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { QrAndBarCodeCheckerRoutingModule } from './qr-and-bar-code-checker-routing.module';\nimport { QrAndBarCodeCheckerComponent } from './qr-and-bar-code-checker.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AngularMaterialModule } from '@shared';\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\n\n\n@NgModule({\n  declarations: [QrAndBarCodeCheckerComponent],\n  imports: [\n    CommonModule,\n    QrAndBarCodeCheckerRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n    FragmentsModule,\n  ]\n})\nexport class QrAndBarCodeCheckerModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { QrAndBarCodeCheckerComponent } from './qr-and-bar-code-checker.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: QrAndBarCodeCheckerComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class QrAndBarCodeCheckerRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ApiService, SweetAlertService } from '@services';\nimport { ENDPOINTS } from '@shared';\nimport { QrAndBarCodeChecker } from 'app/core/models/qrAndBarCodeChecker.model';\n\n@Component({\n  selector: 'app-qr-and-bar-code-checker',\n  templateUrl: './qr-and-bar-code-checker.component.html',\n  styleUrls: ['./qr-and-bar-code-checker.component.scss']\n})\nexport class QrAndBarCodeCheckerComponent implements OnInit {\n\n  qrAndBarCodeChecker = new QrAndBarCodeChecker();\n  qrAndBarCodeCheckerForm: FormGroup;\n  qrAndBarCodeCheckerTypeList = ['S1', 'S2'];\n  qrAndBarCodeCheckerType = '';\n\n  qrBarCodeValid: boolean = false;\n\n  constructor(\n    private apiService: ApiService,\n    private formBuilder: FormBuilder,\n    private sweetAlertService: SweetAlertService,\n  ) { }\n\n  ngOnInit(): void {\n    this.setFormValidator();\n  }\n\n  validate(): void {\n    let endpoint = this.qrAndBarCodeCheckerType === 'S1' ? ENDPOINTS.s1QrCheck : ENDPOINTS.s2QrCheck;\n    endpoint += this.qrAndBarCodeChecker.qrOrBarCode;\n\n    this.apiService.save(endpoint, this.qrAndBarCodeChecker).subscribe(\n      res => {\n        this.qrBarCodeValid = true;\n      }, err => {\n        this.qrBarCodeValid = false;\n        this.sweetAlertService.customErrorMessage('QR or Bar Code is Invalid. Please try again.');\n      }\n    );\n  }\n\n  setFormValidator(): void {\n    this.qrAndBarCodeCheckerForm = this.formBuilder.group({\n      applicationType: ['', Validators.required],\n      qrOrBarCode: ['', Validators.required],\n    });\n  }\n\n  resetFormValidator(): void {\n    this.qrAndBarCodeChecker = new QrAndBarCodeChecker();\n    this.qrAndBarCodeCheckerForm.markAsUntouched();\n    this.qrAndBarCodeCheckerForm.markAsPristine();\n  }\n\n}\n","<form>\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-12 title\">\n                <mat-label>\n                    <span class=\"material-icons\">qr_code_scanner</span> QR and BAR CODE Checker\n                </mat-label>\n            </div>\n        </div>\n        <hr>\n\n        <div class=\"row\">\n            <div class=\"col-md-7 form-group\">\n                <form [formGroup]=\"qrAndBarCodeCheckerForm\">\n                    <div class=\"row\">\n\n                        <mat-form-field appearance=\"outline\">\n                          <mat-label>Application Type</mat-label>\n                          <mat-select [(ngModel)]=\"qrAndBarCodeCheckerType\" name=\"applicationType\" formControlName=\"applicationType\">\n                            <mat-option *ngFor=\"let i of qrAndBarCodeCheckerTypeList\" [value]=\"i\">\n                              {{i}} Application\n                            </mat-option>\n                          </mat-select>\n                        </mat-form-field>\n\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>QR/BAR CODE: <span class=\"required-field\">*</span></mat-label>\n                            <input matInput [(ngModel)]=\"qrAndBarCodeChecker.qrOrBarCode\" name=\"qrOrBarCode\"\n                                formControlName=\"qrOrBarCode\">\n                        </mat-form-field>\n\n                        <app-form-action-buttons [childObject]=\"qrAndBarCodeChecker\" [childForm]=\"qrAndBarCodeCheckerForm\"\n                            (validateFunction)=\"validate()\" (cancelFunction)=\"resetFormValidator()\">\n                        </app-form-action-buttons>\n                    </div>\n                </form>\n            </div>\n            <div class=\"col-md-5 message-output\">\n                <span class=\"badge bg-success\" *ngIf=\"qrBarCodeValid\">VALID</span>\n                <span class=\"badge bg-danger\" *ngIf=\"!qrBarCodeValid\">INVALID</span>\n            </div>\n        </div>\n    </div>\n</form>\n\n"],"sourceRoot":"webpack:///"}