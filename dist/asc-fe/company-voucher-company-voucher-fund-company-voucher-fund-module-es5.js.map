{"version":3,"sources":["webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/accounting/company-voucher/company-voucher-fund/company-voucher-fund-routing.module.ts","webpack:///src/app/core/models/voucher-replenishment.model.ts","webpack:///src/app/modules/pages/accounting/company-voucher/company-voucher-fund/company-voucher-fund.component.ts","webpack:///src/app/modules/pages/accounting/company-voucher/company-voucher-fund/company-voucher-fund.module.ts","webpack:///src/app/modules/pages/accounting/company-voucher/company-voucher-fund/company-voucher-fund.component.html","webpack:///src/app/modules/pages/accounting/company-voucher/company-voucher-fund/company-voucher-fund.component.scss"],"names":["routes","path","component","CompanyVoucherFundRoutingModule","imports","forChild","exports","VoucherReplenishment","CompanyVoucherFundComponent","formBuilder","router","apiService","sweetAlertService","sanitizer","fileStorageService","dataStorage","displayedColumns","displayedReplenishmentColumns","voucherReplenishment","voucher","company","voucherReplenishmentList","companyList","statusList","currentDate","Date","previewDocument","process","remainingVoucherBalance","currentUser","getUserAccount","setFormValidator","getCompanyList","getVoucherTrasnferList","status","ACTIVE","voucherReplenishmentForm","group","amountTransfered","required","transferedDate","markAsUntouched","markAsPristine","findAll","subscribe","res","responseData","data","findById","formListComponent","idForUpdate","voucherAttachmentReference","fundAmount","voucherDate","viewAttachmentFile","getCompanyReplenishmentList","findByParam","attachmentDocument","res1","safeURL","bypassSecurityTrustResourceUrl","fileURL","err","dataSource","paginator","sort","voucherReplenishmentsByCompany","id","dataSourceReplenishments","event","attachmentSize","target","files","size","type","customErrorMessage","value","pdfURL","URL","createObjectURL","reader","FileReader","file","readAsDataURL","onload","selectedFiles","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","saveVoucherReplenishment","setDisplayProgressbar","params","VOUCHER_FUND","ORIGINAL","pushFileToStorage","item","obj","console","log","undefined","error","save","accountingVoucherFundTransfer","success","resetFormValidator","attachment","navigateByUrl","selected","selector","template","CompanyVoucherFundModule","declarations"],"mappings":"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","file":"company-voucher-company-voucher-fund-company-voucher-fund-module-es5.js","sourcesContent":["export * from './form-action-buttons/form-action-buttons.component';\r\nexport * from './form-list/form-list.component';","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CompanyVoucherFundComponent } from './company-voucher-fund.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CompanyVoucherFundComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CompanyVoucherFundRoutingModule { }\r\n","import { Company } from \"./company.model\";\r\n\r\nexport class VoucherReplenishment {\r\n\r\n    id: number;\r\n    amountTransfered: number;\r\n    company: Company;\r\n    status: string;\r\n    transferedDate: Date;\r\n    voucherAttachmentReference: string;\r\n   \r\n}","import { DataStorageService } from './../../../../../core/services/data.storage.service';\r\nimport { Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Router } from '@angular/router';\r\nimport { FormListComponent } from '@fragments';\r\nimport { Company, PaymentType } from '@models';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { ATTACHMENT_TYPE, COMMON_FUNCTION, ENDPOINTS, STATUSES, SUBMISSION_TYPE } from '@shared';\r\nimport { VoucherReplenishment } from 'app/core/models/voucher-replenishment.model';\r\nimport { Voucher } from 'app/core/models/voucher.model';\r\nimport { FileStorageService } from 'app/core/services/file.storage.service';\r\nimport Swal from 'sweetalert2';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\n\r\n\r\n@Component({\r\n  selector: 'app-company-voucher-fund',\r\n  templateUrl: './company-voucher-fund.component.html',\r\n  styleUrls: ['./company-voucher-fund.component.scss']\r\n})\r\nexport class CompanyVoucherFundComponent implements OnInit, OnDestroy {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<Voucher>;\r\n  dataSourceReplenishments: MatTableDataSource<VoucherReplenishment>;\r\n  displayedColumns: string[] = ['company', 'fundAmount', 'voucherDate'];\r\n  displayedReplenishmentColumns: string[] = ['transferedDate', 'amountTransfered', 'status'];\r\n  @Input() safeURL: any;\r\n\r\n  voucherReplenishment = new VoucherReplenishment();\r\n  voucher = new Voucher();\r\n  company = new Company();\r\n\r\n  voucherReplenishmentList = [];\r\n  companyList = [];\r\n  attachmentDocument: any;\r\n  statusList = [...STATUSES];\r\n\r\n  voucherReplenishmentForm: FormGroup;\r\n  currentUser: any;\r\n  currentDate = new Date();\r\n  selectedFiles: any;\r\n  attachment: any;\r\n  // safeURLVoucherReplenishment: any;\r\n  previewDocument = false;\r\n  process = 'save';\r\n  remainingVoucherBalance = 0;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private apiService: ApiService,\r\n    private sweetAlertService: SweetAlertService,\r\n    private sanitizer: DomSanitizer,\r\n    private fileStorageService: FileStorageService,\r\n    private dataStorage: DataStorageService\r\n  ) {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.currentUser = this.dataStorage.getUserAccount();\r\n    this.setFormValidator();\r\n    this.getCompanyList();\r\n    this.getVoucherTrasnferList();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.voucherReplenishment.status = COMMON_FUNCTION.ACTIVE;\r\n    this.voucherReplenishmentForm = this.formBuilder.group({\r\n      amountTransfered: ['', [Validators.required]],\r\n      company: ['', [Validators.required]],\r\n      transferedDate: ['', [Validators.required]],\r\n      // status: ['', [Validators.required]],\r\n    })\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.voucherReplenishment = new VoucherReplenishment();\r\n    this.voucherReplenishment.status = COMMON_FUNCTION.ACTIVE;\r\n    this.voucherReplenishmentForm.markAsUntouched();\r\n    this.voucherReplenishmentForm.markAsPristine();\r\n  }\r\n\r\n  getCompanyList() {\r\n    this.apiService.findAll(ENDPOINTS.company).subscribe((res: any) => {\r\n      this.companyList = res.responseData.data;\r\n    });\r\n  }\r\n\r\n  getCompanyDetails(res) {\r\n    this.company = res;\r\n  }\r\n\r\n\r\n  getVoucherTrasnferDetails() {\r\n    this.process = 'update';\r\n    this.apiService.findById(ENDPOINTS.voucher, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        // this.voucherReplenishment.company = res.responseData.data.company.companyName;\r\n        this.company = res.responseData.data.company;\r\n        this.voucher.voucherAttachmentReference = res.responseData.data.voucherAttachmentReference;\r\n        this.voucherReplenishment.company = this.company;\r\n        this.remainingVoucherBalance = res.responseData.data.fundAmount;\r\n        // this.voucherReplenishment.amountTransfered = 0;\r\n        this.voucherReplenishment.transferedDate = res.responseData.data.voucherDate;\r\n        this.voucherReplenishment.status = res.responseData.data.status;\r\n        this.getVoucherTrasnferList();\r\n        this.viewAttachmentFile();\r\n        this.getCompanyReplenishmentList();\r\n        this.previewDocument = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  viewAttachmentFile() {\r\n    this.apiService.findByParam(ENDPOINTS.attachmentDocument, `voucher-attachment-reference/` + this.voucher.voucherAttachmentReference)\r\n      .subscribe((res1: any) => {\r\n        if (res1) {\r\n          this.attachmentDocument = res1.responseData.data;\r\n          this.safeURL = this.sanitizer.bypassSecurityTrustResourceUrl(this.attachmentDocument.fileURL);\r\n        }\r\n      }, (err: any) => {\r\n        this.attachmentDocument = [];\r\n      });\r\n  }\r\n\r\n  getVoucherTrasnferList() {\r\n    this.apiService.findAll(ENDPOINTS.voucher).subscribe((res: any) => {\r\n      this.dataSource = new MatTableDataSource<Voucher>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    })\r\n  }\r\n\r\n  getCompanyReplenishmentList() {\r\n    this.apiService.findAll(ENDPOINTS.voucherReplenishmentsByCompany+this.company?.id).subscribe((res: any) => {\r\n      this.dataSourceReplenishments = new MatTableDataSource<VoucherReplenishment>(res.responseData.data);\r\n      this.dataSourceReplenishments.paginator = this.formListComponent.paginator;\r\n      this.dataSourceReplenishments.sort = this.formListComponent.sort;\r\n    })\r\n  }\r\n\r\n  selectFile(event) {\r\n    const attachmentSize = event.target.files[0].size;\r\n    if (event.target.files[0].type === 'application/pdf') {\r\n      if (attachmentSize > 15000000) { // 1MB = 1M\r\n        this.sweetAlertService.customErrorMessage(`Attachments' total file size should not exceed 15MB.`);\r\n        event.target.value = '';\r\n        return;\r\n      } else {\r\n        const pdfURL = URL.createObjectURL(event.target.files[0]);\r\n        this.safeURL = this.sanitizer.bypassSecurityTrustResourceUrl(pdfURL);\r\n        this.previewDocument = true;\r\n        const reader = new FileReader();\r\n        const [file] = event.target.files;\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => {\r\n        };\r\n      }\r\n      this.selectedFiles = event.target.files;\r\n    } else {\r\n      this.sweetAlertService.customErrorMessage('Attachment should be in PDF format only.');\r\n      event.target.value = '';\r\n      return;\r\n    }\r\n  }\r\n\r\n  uploadVoucher() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to submit this VOUCHER?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        if (this.process === 'update') {\r\n          this.saveVoucherReplenishment();\r\n        } else {\r\n          this.dataStorage.setDisplayProgressbar(true);\r\n          let params = '';\r\n          params = '?&attachmentType=' + ATTACHMENT_TYPE.VOUCHER_FUND + '&submissionType=' + SUBMISSION_TYPE.ORIGINAL;\r\n          this.fileStorageService.pushFileToStorage(ENDPOINTS.attachmentDocument, this.selectedFiles.item(0), params)\r\n            .subscribe(res => {\r\n              const obj = res.responseData.data;\r\n              this.voucherReplenishment.voucherAttachmentReference = obj.voucherAttachmentReference;\r\n              this.voucherReplenishment.company = this.company;\r\n              // this.voucher.voucherSignatories = this.signatoriesList;\r\n              console.log('VOUCHER REPLENISHMENT', this.voucherReplenishment);\r\n              this.saveVoucherReplenishment();\r\n              this.selectedFiles = undefined;\r\n            }, (err: any) => {\r\n              this.sweetAlertService.error(err);\r\n            }, () => {\r\n              this.dataStorage.setDisplayProgressbar(false);\r\n            });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  saveVoucherReplenishment() {\r\n    this.apiService.save(ENDPOINTS.accountingVoucherFundTransfer, this.voucherReplenishment).subscribe((res: any) => {\r\n      console.log(res);\r\n      this.sweetAlertService.success(res);\r\n      this.setFormValidator();\r\n      this.getVoucherTrasnferList();\r\n      this.resetFormValidator();\r\n      this.process = 'save';\r\n      this.previewDocument = false;\r\n      this.attachment = null;\r\n      this.router.navigateByUrl('asc/page/accounting/voucher-replenishment');\r\n    }, (err) => {\r\n      console.log(err);\r\n      this.sweetAlertService.error(err);\r\n    });\r\n  }\r\n\r\n\r\n  compareStatus(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value === selected;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CompanyVoucherFundRoutingModule } from './company-voucher-fund-routing.module';\r\nimport { CompanyVoucherFundComponent } from './company-voucher-fund.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [CompanyVoucherFundComponent],\r\n  imports: [\r\n    CommonModule,\r\n    CompanyVoucherFundRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule\r\n  ]\r\n})\r\nexport class CompanyVoucherFundModule { }\r\n","export default \"<form>\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12 title\\\">\\r\\n        <mat-label>\\r\\n          <mat-icon>view_list</mat-icon> Voucher Replenishment\\r\\n        </mat-label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <hr>\\r\\n\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <b><b class=\\\"material-icons\\\">error_outline</b> Note: Select enrolled voucher to add fund or view amount replenishments made.</b>\\r\\n    </div>\\r\\n    <br>\\r\\n\\r\\n    <app-form-list [dataSource]=\\\"dataSource\\\" [displayedColumns]=\\\"displayedColumns\\\"\\r\\n    (selectInListFunction)=\\\"getVoucherTrasnferDetails()\\\"></app-form-list>\\r\\n    <br>\\r\\n\\r\\n    <div class=\\\"container-fluid\\\"\\r\\n      *ngIf=\\\"currentUser?.userRole.name === 'ROLE_APPLICANT' || currentUser?.userRole.name === 'ROLE_ACCOUNTING' && previewDocument===true\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-12 information-title\\\">\\r\\n          <mat-label>\\r\\n            Company Information\\r\\n          </mat-label>\\r\\n        </div>\\r\\n      </div>\\r\\n      <hr>\\r\\n      <br>\\r\\n\\r\\n      <div class=\\\"row col-md-12\\\">\\r\\n\\r\\n        <div class=\\\"row col-md-5\\\">\\r\\n          <div>\\r\\n            <mat-label>Voucher: &nbsp;&nbsp;&nbsp;<span>PDF file only!</span></mat-label><br>\\r\\n            <input class=\\\"file-upload\\\" type=\\\"file\\\" [(ngModel)]=\\\"attachment\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\r\\n              accept=\\\".pdf\\\" (change)=\\\"selectFile($event)\\\">\\r\\n          </div>\\r\\n\\r\\n          <div *ngIf=\\\"attachment\\\">\\r\\n            <div class=\\\"file-upload\\\">\\r\\n              <object [data]=\\\"safeURL\\\" type=\\\"application/pdf\\\" width=\\\"100%\\\" height=\\\"500\\\">\\r\\n                <iframe [src]=\\\"safeURL\\\" width=\\\"100%\\\" height=\\\"500\\\">\\r\\n                  <p>This browser does not support PDF!</p>\\r\\n                </iframe>\\r\\n              </object>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row col-md-7\\\">\\r\\n          <form [formGroup]=\\\"voucherReplenishmentForm\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n\\r\\n              <mat-form-field class=\\\"col-md-12\\\" appearance=\\\"outline\\\" *ngIf=\\\"process==='save'\\\">\\r\\n                <mat-label> Company Name\\r\\n                </mat-label>\\r\\n                <mat-select [(ngModel)]=\\\"voucherReplenishment.company\\\" name=\\\"company\\\" formControlName=\\\"company\\\">\\r\\n                  <mat-option *ngFor=\\\"let i of companyList\\\" [value]=\\\"i\\\" (click)=\\\"getCompanyDetails(i)\\\">\\r\\n                    {{i.companyName}}\\r\\n                  </mat-option>\\r\\n                </mat-select>\\r\\n              </mat-form-field>\\r\\n\\r\\n              <mat-form-field class=\\\"col-md-12\\\" appearance=\\\"outline\\\" *ngIf=\\\"process==='update'\\\">\\r\\n                <mat-label>Company Name</mat-label>\\r\\n                <input matInput [value]=\\\"company.companyName\\\" readonly>\\r\\n              </mat-form-field>\\r\\n\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\" *ngIf=\\\"process==='update'\\\">\\r\\n                <mat-label>Remaining Voucher Balance </mat-label>\\r\\n                <input matInput [value]=\\\"remainingVoucherBalance\\\" name=\\\"remainingVoucherBalance\\\"\\r\\n                  formControlName=\\\"remainingVoucherBalance\\\" type=\\\"number\\\" readonly>\\r\\n              </mat-form-field>\\r\\n\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label>Amount Transferred <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n                <input matInput [(ngModel)]=\\\"voucherReplenishment.amountTransfered\\\" name=\\\"amountTransfered\\\"\\r\\n                  formControlName=\\\"amountTransfered\\\" type=\\\"number\\\">\\r\\n              </mat-form-field>\\r\\n\\r\\n              <!-- <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label>Transferred Date</mat-label>\\r\\n                <input matInput placeholder=\\\"Date\\\" [matDatepicker]=\\\"transferedDate\\\" readonly\\r\\n                  [(ngModel)]=\\\"voucherReplenishment.transferedDate\\\" name=\\\"transferedDate\\\" formControlName=\\\"transferedDate\\\">\\r\\n                <mat-datepicker-toggle matSuffix [for]=\\\"transferedDate\\\"></mat-datepicker-toggle>\\r\\n                <mat-datepicker color=\\\"warn\\\" #transferedDate disabled=\\\"false\\\"></mat-datepicker>\\r\\n              </mat-form-field> -->\\r\\n\\r\\n              <!-- <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label>Status</mat-label>\\r\\n                <mat-select [(ngModel)]=\\\"voucherReplenishment.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\" [compareWith]=\\\"compareStatus\\\">\\r\\n                  <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n                    {{i.status}}\\r\\n                  </mat-option>\\r\\n                </mat-select>\\r\\n              </mat-form-field> -->\\r\\n\\r\\n              <!-- <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\" *ngIf=\\\"voucherReplenishment.company\\\">\\r\\n                <mat-label>Company TelephoneNo</mat-label>\\r\\n                <input matInput [value]=\\\"company.companyTelephoneNo\\\" readonly>\\r\\n              </mat-form-field>\\r\\n\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\" *ngIf=\\\"voucherReplenishment.company\\\">\\r\\n                <mat-label>Company Tin </mat-label>\\r\\n                <input matInput [value]=\\\"company.companyTin\\\" readonly>\\r\\n              </mat-form-field>\\r\\n\\r\\n              <mat-form-field class=\\\"col-md-12\\\" appearance=\\\"outline\\\" *ngIf=\\\"voucherReplenishment.company\\\">\\r\\n                <mat-label>Company Address</mat-label>\\r\\n                <input matInput [value]=\\\"company.completeAddress\\\" readonly>\\r\\n              </mat-form-field> -->\\r\\n\\r\\n            </div>\\r\\n          </form>\\r\\n\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-10\\\"></div>\\r\\n            <div class=\\\"col-md-2\\\">\\r\\n              <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"uploadVoucher()\\\" [disabled]=\\\"!attachment || !voucherReplenishment?.amountTransfered\\\">\\r\\n                <i class=\\\"material-icons color__white\\\">task_alt</i> SUBMIT\\r\\n              </button>\\r\\n            </div>\\r\\n          </div>\\r\\n          <br>\\r\\n          <br>\\r\\n          <hr>\\r\\n          <br>\\r\\n          <app-form-list [dataSource]=\\\"dataSourceReplenishments\\\" [displayedColumns]=\\\"displayedReplenishmentColumns\\\"></app-form-list>\\r\\n          <br>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-10\\\"></div>\\r\\n        <div class=\\\"col-md-2\\\">\\r\\n          <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"uploadAttachment()\\\" *ngIf=\\\"process==='save'\\\">\\r\\n            <i class=\\\"material-icons color__white\\\">task_alt</i> SUBMIT\\r\\n          </button>\\r\\n          <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"approveVoucher()\\\" *ngIf=\\\"process==='update'\\\">\\r\\n            <i class=\\\"material-icons color__white\\\">task_alt</i> APPROVE\\r\\n          </button>\\r\\n        </div>\\r\\n      </div> -->\\r\\n    </div>\\r\\n  </div>\\r\\n</form>\\r\\n\";","export default \".button-green {\\n  background-color: green;\\n  color: white;\\n}\\n\\n.information-title {\\n  text-align: center;\\n  font-weight: bold;\\n  font-size: 24px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9wYWdlcy9hY2NvdW50aW5nL2NvbXBhbnktdm91Y2hlci9jb21wYW55LXZvdWNoZXItZnVuZC9jb21wYW55LXZvdWNoZXItZnVuZC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLHVCQUFBO0VBQ0EsWUFBQTtBQUNKOztBQUVBO0VBQ0ksa0JBQUE7RUFDQSxpQkFBQTtFQUNBLGVBQUE7QUFDSiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvYWNjb3VudGluZy9jb21wYW55LXZvdWNoZXIvY29tcGFueS12b3VjaGVyLWZ1bmQvY29tcGFueS12b3VjaGVyLWZ1bmQuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuYnV0dG9uLWdyZWVue1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbn1cclxuXHJcbi5pbmZvcm1hdGlvbi10aXRsZXtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgZm9udC1zaXplOiAyNHB4O1xyXG59Il19 */\";"]}