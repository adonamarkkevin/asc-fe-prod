{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/category/category.component.ts","webpack:///src/app/modules/pages/maintenance/category/category.component.html"],"names":["CategoryComponent","apiService","formBuilder","sweetAlertService","displayedColumns","statusList","category","categoryList","isExist","getList","setFormValidator","findAll","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","save","undefined","success","err","error","resetFormValidator","categoryName","filter","cn","description","length","customErrorMessage","id","update","findById","idForUpdate","status","ACTIVE","categoryForm","group","required","markAsUntouched","markAsPristine","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","deleteById","customSuccessMessage","getCategory"],"mappings":"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","file":"default~applications-applications-module~category-category-module-es5.js","sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\r\nimport { Category } from '@models';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-category',\r\n  templateUrl: './category.component.html',\r\n  styleUrls: ['./category.component.scss']\r\n})\r\nexport class CategoryComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<Category>;\r\n  displayedColumns: string[] = ['categoryDescription', 'status'];\r\n  statusList = [...STATUSES];\r\n\r\n  category = new Category();\r\n  categoryList = [];\r\n  isExist = false;\r\n  categoryForm: FormGroup;\r\n\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getList();\r\n    this.setFormValidator();\r\n    // this.getProductList();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.category).subscribe((res: any) => {\r\n      this.categoryList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<Category>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    this.apiService.save(ENDPOINTS.category, this.category).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.resetFormValidator(),\r\n          this.getList();\r\n      }\r\n    )\r\n  }\r\n\r\n  // not in used\r\n  checkCategoryIfExisting(categoryName): void {\r\n    let category = [];\r\n    this.apiService.findAll(ENDPOINTS.category).subscribe(\r\n      (res: any) => {\r\n        category = res.responseData.data;\r\n        category = category.filter(cn => cn.description === categoryName);\r\n        if (category.length > 0) {\r\n          this.sweetAlertService.customErrorMessage('Category name already exist.');\r\n        } else {\r\n          if (this.category.id > 0) {\r\n            this.update();\r\n          } else {\r\n            this.save();\r\n          }\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  getCategory(): void {\r\n    this.apiService.findById(ENDPOINTS.category, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.category = res.responseData.data;\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.category, this.category).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.category.status = COMMON_FUNCTION.ACTIVE;\r\n    this.categoryForm = this.formBuilder.group({\r\n      description: ['', Validators.required],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.category = new Category();\r\n    this.category.status = COMMON_FUNCTION.ACTIVE;\r\n    this.categoryForm.markAsUntouched();\r\n    this.categoryForm.markAsPristine();\r\n  }\r\n\r\n  delete() {\r\n\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this company?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.category, this.category.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Category successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }, (err: any) => {\r\n            this.sweetAlertService.error(err);\r\n          }, () => {\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n  // getProductList() {\r\n  //   this.apiService.findAll(ENDPOINTS.product).subscribe((res: any) => {\r\n  //     this.productList = res.responseData.data.filter((product) => product.status === COMMON_FUNCTION.ACTIVE);\r\n  //   });\r\n  // }\r\n\r\n  // compareProduct(value: any, selected: any): boolean {\r\n  //   if (value && selected) {\r\n  //     return value.description === selected.description;\r\n  //   }\r\n  // }\r\n\r\n}\r\n","<form>\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 title\">\r\n        <mat-label>\r\n          Category\r\n        </mat-label>\r\n      </div>\r\n    </div>\r\n    <hr>\r\n\r\n    <form [formGroup]=\"categoryForm\">\r\n      <div class=\"row\">\r\n        <mat-form-field class=\"col-md-8\" appearance=\"outline\">\r\n          <mat-label>Category: <span class=\"required-field\">*</span></mat-label>\r\n          <input matInput [(ngModel)]=\"category.description\" name=\"description\" formControlName=\"description\">\r\n        </mat-form-field>\r\n\r\n         <!-- <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n          <mat-label>Product <span class=\"required-field\">*</span></mat-label>\r\n          <mat-select [(ngModel)]=\"category.product\" name=\"product\" formControlName=\"product\"\r\n            [compareWith]=\"compareProduct\">\r\n            <mat-option *ngFor=\"let i of productList\" [value]=\"i\">\r\n              {{i.description}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field> -->\r\n\r\n        <mat-form-field class=\"col-md-4\" appearance=\"outline\" *ngIf=\"category.id\">\r\n          <mat-label>Status</mat-label>\r\n          <mat-select [(ngModel)]=\"category.status\" name=\"status\" formControlName=\"status\">\r\n            <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n              {{i.status}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n    </form>\r\n\r\n    <app-form-action-buttons [childObject]=\"category\" [childForm]=\"categoryForm\" (saveFunction)=\"save()\"\r\n      (updateFunction)=\"update()\" (cancelFunction)=\"resetFormValidator()\" (deleteFunction)=\"delete()\"></app-form-action-buttons>\r\n    <br>\r\n    <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\r\n      (selectInListFunction)=\"getCategory()\"></app-form-list>\r\n\r\n  </div>\r\n</form>\r\n"]}