{"version":3,"sources":["webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/maintenance/type-of-application/type-of-application.module.ts","webpack:///src/app/modules/pages/maintenance/type-of-application/type-of-application-routing.module.ts","webpack:///src/app/modules/pages/maintenance/type-of-application/type-of-application.component.ts","webpack:///src/app/modules/pages/maintenance/type-of-application/type-of-application.component.html"],"names":["TypeOfApplicationModule","routes","path","component","TypeOfApplicationRoutingModule","forChild","TypeOfApplicationComponent","apiService","formBuilder","sweetAlertService","displayedColumns","statusList","typeOfApplication","typeOfApplicationList","formTypeList","getList","setFormValidator","findAll","applicationType","subscribe","res","console","log","responseData","data","dataSource","paginator","formListComponent","sort","save","undefined","success","err","error","resetFormValidator","findById","idForUpdate","update","formType","status","ACTIVE","typeOfApplicationForm","group","clearingReleaseTime","required","decisionReleaseTime","description","sequenceNo","submissionEndTime","submissionStartTime","markAsUntouched","markAsPristine","value","selected","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","deleteById","id","customSuccessMessage","getTypeOfApplication"],"mappings":"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","file":"type-of-application-type-of-application-module-es5.js","sourcesContent":["export * from './form-action-buttons/form-action-buttons.component';\r\nexport * from './form-list/form-list.component';","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TypeOfApplicationRoutingModule } from './type-of-application-routing.module';\r\nimport { TypeOfApplicationComponent } from './type-of-application.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { FragmentsModule } from '../../../fragments/fragments.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [TypeOfApplicationComponent],\r\n  imports: [\r\n    CommonModule,\r\n    TypeOfApplicationRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule\r\n  ]\r\n})\r\nexport class TypeOfApplicationModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TypeOfApplicationComponent } from './type-of-application.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: TypeOfApplicationComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class TypeOfApplicationRoutingModule { }\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { TypeOfApplication } from '@models';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, FORM_TYPE, STATUSES } from '@shared';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-type-of-application',\r\n  templateUrl: './type-of-application.component.html',\r\n  styleUrls: ['./type-of-application.component.scss']\r\n})\r\nexport class TypeOfApplicationComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<TypeOfApplication>;\r\n  displayedColumns: string[] = ['description', 'clearingReleaseTime', 'decisionReleaseTime', 'submissionStartTime', 'submissionEndTime'];;\r\n  statusList = [...STATUSES];\r\n\r\n  typeOfApplication = new TypeOfApplication();\r\n  typeOfApplicationList = [];\r\n\r\n  formTypeList = [...FORM_TYPE];\r\n\r\n  typeOfApplicationForm: FormGroup;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.applicationType).subscribe((res: any) => {\r\n      console.log(res.responseData.data);\r\n      this.typeOfApplicationList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<TypeOfApplication>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    this.apiService.save(ENDPOINTS.applicationType, this.typeOfApplication).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n\r\n        this.resetFormValidator(),\r\n          this.getList();\r\n      }\r\n    )\r\n  }\r\n\r\n\r\n  getTypeOfApplication(): void {\r\n    this.apiService.findById(ENDPOINTS.applicationType, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.typeOfApplication = res.responseData.data;\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  update(): void {\r\n    // this.typeOfApplication.modifiedBy = \"J. Dela Cruz\";\r\n    this.apiService.update(ENDPOINTS.applicationType, this.typeOfApplication).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    formType: new FormControl();\r\n    this.typeOfApplication.status = COMMON_FUNCTION.ACTIVE;\r\n    this.typeOfApplicationForm = this.formBuilder.group({\r\n      // formType: ['', Validators.required],\r\n      clearingReleaseTime: ['', [Validators.required]],\r\n      decisionReleaseTime: ['', [Validators.required]],\r\n      description: ['', [Validators.required]],\r\n      sequenceNo: ['', [Validators.required]],\r\n      status: ['', [Validators.required]],\r\n      submissionEndTime: ['', [Validators.required]],\r\n      submissionStartTime: ['', [Validators.required]],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.typeOfApplication = new TypeOfApplication();\r\n    this.typeOfApplication.status = COMMON_FUNCTION.ACTIVE;\r\n    this.typeOfApplicationForm.markAsUntouched();\r\n    this.typeOfApplicationForm.markAsPristine();\r\n\r\n  }\r\n\r\n  compareFormType(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.description === selected;\r\n    }\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this type of application?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.applicationType, this.typeOfApplication.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Type of application successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n","<br>\r\n<form>\r\n    <div class=\"container-fluid\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12 title\">\r\n          <mat-label>\r\n             Type of Application\r\n          </mat-label>\r\n        </div>\r\n      </div>\r\n      <hr>\r\n\r\n      <form [formGroup]=\"typeOfApplicationForm\">\r\n        <div class=\"row\">\r\n\r\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n            <mat-label>Description <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"typeOfApplication.description\" name=\"description\" formControlName=\"description\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n            <mat-label>Sequence Number <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"typeOfApplication.sequenceNo\" name=\"sequenceNo\" formControlName=\"sequenceNo\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\" *ngIf=\"typeOfApplication.id\">\r\n            <mat-label>Status</mat-label>\r\n            <mat-select [(ngModel)]=\"typeOfApplication.status\" name=\"status\" formControlName=\"status\">\r\n              <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n                {{i.status}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n            <mat-label>Clearing Release Time <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"typeOfApplication.clearingReleaseTime\" name=\"clearingReleaseTime\"\r\n              formControlName=\"clearingReleaseTime\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n            <mat-label>Decision Release Time <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"typeOfApplication.decisionReleaseTime\" name=\"decisionReleaseTime\"\r\n              formControlName=\"decisionReleaseTime\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n            <mat-label>Submission Start Time <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"typeOfApplication.submissionStartTime\" name=\"submissionStartTime\"\r\n              formControlName=\"submissionStartTime\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n            <mat-label>Submission End Time <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"typeOfApplication.submissionEndTime\" name=\"submissionEndTime\"\r\n              formControlName=\"submissionEndTime\">\r\n          </mat-form-field>\r\n\r\n        </div>\r\n      </form>\r\n\r\n      <app-form-action-buttons [childObject]=\"typeOfApplication\" [childForm]=\"typeOfApplicationForm\" (saveFunction)=\"save()\"\r\n        (updateFunction)=\"update()\" (cancelFunction)=\"resetFormValidator()\" (deleteFunction)=\"delete()\"></app-form-action-buttons>\r\n        <br>\r\n        <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\r\n          (selectInListFunction)=\"getTypeOfApplication()\"></app-form-list>\r\n    </div>\r\n  </form>\r\n"]}