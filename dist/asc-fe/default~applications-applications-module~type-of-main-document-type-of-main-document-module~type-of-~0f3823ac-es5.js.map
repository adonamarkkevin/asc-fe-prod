{"version":3,"sources":["webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/maintenance/type-of-main-document/type-of-main-document.component.scss","webpack:///src/app/modules/pages/maintenance/type-of-main-document/type-of-main-document.component.html","webpack:///src/app/modules/pages/maintenance/type-of-main-document/type-of-main-document.component.ts"],"names":["TypeOfMainDocumentComponent","apiService","formBuilder","sweetAlertService","route","statusList","typeOfMainDocument","uploadingDocumentFileSize","typeOfMainDocumentList","maintenanceType","parent","snapshot","url","path","displayedColumns","getList","getAllFileSize","setFormValidator","findAll","typeOfMainDocuments","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","save","undefined","success","err","error","resetFormValidator","findById","idForUpdate","console","log","update","status","ACTIVE","typeOfMainDocumentForm","group","required","uploadingDocumentFileSizeForm","fileSize","markAsUntouched","markAsPristine","dataSource1","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","deleteById","id","customSuccessMessage","selector","template"],"mappings":"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","file":"default~applications-applications-module~type-of-main-document-type-of-main-document-module~type-of-~0f3823ac-es5.js","sourcesContent":["export * from './form-action-buttons/form-action-buttons.component';\r\nexport * from './form-list/form-list.component';","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvbWFpbnRlbmFuY2UvdHlwZS1vZi1tYWluLWRvY3VtZW50L3R5cGUtb2YtbWFpbi1kb2N1bWVudC5jb21wb25lbnQuc2NzcyJ9 */\";","export default \"<form>\\r\\n  <div class=\\\"container-fluid\\\" *ngIf=\\\"maintenanceType === 'type-of-main-documents'\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12 title\\\">\\r\\n        <mat-label>\\r\\n          Type Of Main Document\\r\\n        </mat-label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <hr>\\r\\n\\r\\n    <form [formGroup]=\\\"typeOfMainDocumentForm\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Type Of Main Document <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <input matInput [(ngModel)]=\\\"typeOfMainDocument.typeOfMainDocument\\\" name=\\\"typeOfMainDocument\\\"\\r\\n            formControlName=\\\"typeOfMainDocument\\\">\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\" *ngIf=\\\"typeOfMainDocument.id\\\">\\r\\n          <mat-label>Status</mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"typeOfMainDocument.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n            <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n              {{i.status}}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n    </form>\\r\\n\\r\\n    <app-form-action-buttons [childObject]=\\\"typeOfMainDocument\\\" [childForm]=\\\"typeOfMainDocumentForm\\\"\\r\\n      (saveFunction)=\\\"save()\\\" (updateFunction)=\\\"update()\\\" (cancelFunction)=\\\"resetFormValidator()\\\"\\r\\n      (deleteFunction)=\\\"delete()\\\">\\r\\n    </app-form-action-buttons>\\r\\n    <br>\\r\\n    <app-form-list [dataSource]=\\\"dataSource\\\" [displayedColumns]=\\\"displayedColumns\\\"\\r\\n      (selectInListFunction)=\\\"getTypeOfMainDocument()\\\"></app-form-list>\\r\\n\\r\\n  </div>\\r\\n\\r\\n\\r\\n  <div class=\\\"container-fluid\\\" *ngIf=\\\"maintenanceType === 'document-size'\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12 title\\\">\\r\\n        <mat-label>\\r\\n          Document File Size\\r\\n        </mat-label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <hr>\\r\\n\\r\\n    <form [formGroup]=\\\"uploadingDocumentFileSizeForm\\\" *ngIf=\\\"uploadingDocumentFileSize.id\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <mat-form-field class=\\\"col-md-12\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Size <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <input matInput [(ngModel)]=\\\"uploadingDocumentFileSize.fileSize\\\" type=\\\"number\\\" name=\\\"fileSize\\\"\\r\\n            formControlName=\\\"fileSize\\\" [disabled]=\\\"true\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n    </form>\\r\\n    <app-form-action-buttons [childObject]=\\\"uploadingDocumentFileSize\\\" [childForm]=\\\"uploadingDocumentFileSizeForm\\\"\\r\\n      (updateFunction)=\\\"updateUploadingDocumentFileSize()\\\" (cancelFunction)=\\\"resetFormValidator()\\\">\\r\\n    </app-form-action-buttons>\\r\\n    <br>\\r\\n\\r\\n    <app-form-list [dataSource]=\\\"dataSource1\\\" [displayedColumns]=\\\"displayedColumns\\\"\\r\\n      (selectInListFunction)=\\\"getuploadingDocumentFileSize()\\\"></app-form-list>\\r\\n  </div>\\r\\n</form>\";","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { Form, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FormListComponent } from '@fragments';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\r\nimport { TypeOfMainDocument } from 'app/core/models/type-of-main-document.model';\r\nimport { UploadingDocumentFileSize } from 'app/core/models/uploading-document-file-size-model';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-type-of-main-document',\r\n  templateUrl: './type-of-main-document.component.html',\r\n  styleUrls: ['./type-of-main-document.component.scss']\r\n})\r\nexport class TypeOfMainDocumentComponent implements OnInit, OnDestroy {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<TypeOfMainDocument>;\r\n  dataSource1: MatTableDataSource<UploadingDocumentFileSize>;\r\n  displayedColumns: string[];\r\n  statusList = [...STATUSES];\r\n\r\n  typeOfMainDocument = new TypeOfMainDocument();\r\n  uploadingDocumentFileSize = new UploadingDocumentFileSize();\r\n\r\n  typeOfMainDocumentList = [];\r\n\r\n  typeOfMainDocumentForm: FormGroup;\r\n  uploadingDocumentFileSizeForm: FormGroup;\r\n\r\n  maintenanceType: any;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n    private route: ActivatedRoute\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.maintenanceType = this.route.parent.snapshot.url[0].path;\r\n    if (this.maintenanceType === 'type-of-main-documents') {\r\n      this.displayedColumns = ['typeOfMainDocument', 'status'];\r\n      this.getList();\r\n    } else {\r\n      this.displayedColumns = ['size'];\r\n      this.getAllFileSize();\r\n    }\r\n    this.setFormValidator();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.maintenanceType = null;\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.typeOfMainDocuments).subscribe((res: any) => {\r\n      this.typeOfMainDocumentList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<TypeOfMainDocument>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    this.apiService.save(ENDPOINTS.typeOfMainDocuments, this.typeOfMainDocument).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.resetFormValidator(),\r\n          this.getList();\r\n      }\r\n    )\r\n  }\r\n\r\n  getTypeOfMainDocument(): void {\r\n    this.apiService.findById(ENDPOINTS.typeOfMainDocuments, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.typeOfMainDocument = res.responseData.data;\r\n        console.log(res);\r\n\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.typeOfMainDocuments, this.typeOfMainDocument).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.resetFormValidator()\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    if (this.maintenanceType === 'type-of-main-documents') {\r\n      this.typeOfMainDocument.status = COMMON_FUNCTION.ACTIVE;\r\n      this.typeOfMainDocumentForm = this.formBuilder.group({\r\n        typeOfMainDocument: ['', Validators.required],\r\n        status: [''],\r\n      });\r\n    } else {\r\n      this.uploadingDocumentFileSizeForm = this.formBuilder.group({\r\n        // id: ['',],\r\n        fileSize: ['', Validators.required],\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    if (this.maintenanceType === 'type-of-main-documents') {\r\n      this.typeOfMainDocument = new TypeOfMainDocument();\r\n      this.typeOfMainDocument.status = COMMON_FUNCTION.ACTIVE;\r\n      this.typeOfMainDocumentForm.markAsUntouched();\r\n      this.typeOfMainDocumentForm.markAsPristine();\r\n    } else {\r\n      this.uploadingDocumentFileSize = new UploadingDocumentFileSize();\r\n      this.uploadingDocumentFileSizeForm.markAsUntouched();\r\n      this.uploadingDocumentFileSizeForm.markAsPristine();\r\n    }\r\n\r\n  }\r\n\r\n\r\n  //START OF FILE SIZE CONTROLLER\r\n\r\n  getAllFileSize(): void {\r\n    this.apiService.findAll(ENDPOINTS.uploadingDocumentFileSize).subscribe((res: any) => {\r\n      this.uploadingDocumentFileSize = res.responseData.data;\r\n      this.dataSource1 = new MatTableDataSource<UploadingDocumentFileSize>(res.responseData.data);\r\n      this.dataSource1.paginator = this.formListComponent.paginator;\r\n      this.dataSource1.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  getuploadingDocumentFileSize(): void {\r\n    this.apiService.findById(ENDPOINTS.uploadingDocumentFileSize, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.uploadingDocumentFileSize = res.responseData.data;\r\n        console.log(this.uploadingDocumentFileSize);\r\n      }\r\n    });\r\n  }\r\n\r\n  updateUploadingDocumentFileSize() {\r\n    this.apiService.update(ENDPOINTS.uploadingDocumentFileSize, this.uploadingDocumentFileSize).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.resetFormValidator(),\r\n          this.getAllFileSize();\r\n      });\r\n\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this type of main document?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.typeOfMainDocuments, this.typeOfMainDocument.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Type of main document successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n"]}