{"version":3,"sources":["webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/maintenance/type-of-main-document/type-of-main-document.component.ts","webpack:///src/app/modules/pages/maintenance/type-of-main-document/type-of-main-document.component.html"],"names":["TypeOfMainDocumentComponent","apiService","formBuilder","sweetAlertService","route","statusList","typeOfMainDocument","uploadingDocumentFileSize","typeOfMainDocumentList","maintenanceType","parent","snapshot","url","path","displayedColumns","getList","getAllFileSize","setFormValidator","findAll","typeOfMainDocuments","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","save","undefined","success","err","error","resetFormValidator","findById","idForUpdate","console","log","update","status","ACTIVE","typeOfMainDocumentForm","group","required","uploadingDocumentFileSizeForm","fileSize","markAsUntouched","markAsPristine","dataSource1","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","deleteById","id","customSuccessMessage"],"mappings":"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","file":"default~applications-applications-module~type-of-main-document-type-of-main-document-module~type-of-~0f3823ac-es5.js","sourcesContent":["export * from './form-action-buttons/form-action-buttons.component';\nexport * from './form-list/form-list.component';","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { Form, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormListComponent } from '@fragments';\nimport { ApiService, SweetAlertService } from '@services';\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\nimport { TypeOfMainDocument } from 'app/core/models/type-of-main-document.model';\nimport { UploadingDocumentFileSize } from 'app/core/models/uploading-document-file-size-model';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-type-of-main-document',\n  templateUrl: './type-of-main-document.component.html',\n  styleUrls: ['./type-of-main-document.component.scss']\n})\nexport class TypeOfMainDocumentComponent implements OnInit, OnDestroy {\n\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\n  dataSource: MatTableDataSource<TypeOfMainDocument>;\n  dataSource1: MatTableDataSource<UploadingDocumentFileSize>;\n  displayedColumns: string[];\n  statusList = [...STATUSES];\n\n  typeOfMainDocument = new TypeOfMainDocument();\n  uploadingDocumentFileSize = new UploadingDocumentFileSize();\n\n  typeOfMainDocumentList = [];\n\n  typeOfMainDocumentForm: FormGroup;\n  uploadingDocumentFileSizeForm: FormGroup;\n\n  maintenanceType: any;\n\n  constructor(\n    private apiService: ApiService,\n    private formBuilder: FormBuilder,\n    private sweetAlertService: SweetAlertService,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    this.maintenanceType = this.route.parent.snapshot.url[0].path;\n    if (this.maintenanceType === 'type-of-main-documents') {\n      this.displayedColumns = ['typeOfMainDocument', 'status'];\n      this.getList();\n    } else {\n      this.displayedColumns = ['size'];\n      this.getAllFileSize();\n    }\n    this.setFormValidator();\n  }\n\n  ngOnDestroy(): void {\n    this.maintenanceType = null;\n  }\n\n  getList(): void {\n    this.apiService.findAll(ENDPOINTS.typeOfMainDocuments).subscribe((res: any) => {\n      this.typeOfMainDocumentList = res.responseData.data;\n      this.dataSource = new MatTableDataSource<TypeOfMainDocument>(res.responseData.data);\n      this.dataSource.paginator = this.formListComponent.paginator;\n      this.dataSource.sort = this.formListComponent.sort;\n    });\n  }\n\n  save(): void {\n    this.apiService.save(ENDPOINTS.typeOfMainDocuments, this.typeOfMainDocument).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.success(res);\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        this.resetFormValidator(),\n          this.getList();\n      }\n    )\n  }\n\n  getTypeOfMainDocument(): void {\n    this.apiService.findById(ENDPOINTS.typeOfMainDocuments, this.formListComponent.idForUpdate).subscribe((res: any) => {\n      if (res) {\n        this.typeOfMainDocument = res.responseData.data;\n        console.log(res);\n\n      }\n    });\n  }\n\n  update(): void {\n    this.apiService.update(ENDPOINTS.typeOfMainDocuments, this.typeOfMainDocument).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.success(res);\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        this.resetFormValidator()\n        this.getList();\n      });\n  }\n\n  setFormValidator(): void {\n    if (this.maintenanceType === 'type-of-main-documents') {\n      this.typeOfMainDocument.status = COMMON_FUNCTION.ACTIVE;\n      this.typeOfMainDocumentForm = this.formBuilder.group({\n        typeOfMainDocument: ['', Validators.required],\n        status: [''],\n      });\n    } else {\n      this.uploadingDocumentFileSizeForm = this.formBuilder.group({\n        // id: ['',],\n        fileSize: ['', Validators.required],\n      });\n    }\n\n  }\n\n  resetFormValidator(): void {\n    if (this.maintenanceType === 'type-of-main-documents') {\n      this.typeOfMainDocument = new TypeOfMainDocument();\n      this.typeOfMainDocument.status = COMMON_FUNCTION.ACTIVE;\n      this.typeOfMainDocumentForm.markAsUntouched();\n      this.typeOfMainDocumentForm.markAsPristine();\n    } else {\n      this.uploadingDocumentFileSize = new UploadingDocumentFileSize();\n      this.uploadingDocumentFileSizeForm.markAsUntouched();\n      this.uploadingDocumentFileSizeForm.markAsPristine();\n    }\n\n  }\n\n\n  //START OF FILE SIZE CONTROLLER\n\n  getAllFileSize(): void {\n    this.apiService.findAll(ENDPOINTS.uploadingDocumentFileSize).subscribe((res: any) => {\n      this.uploadingDocumentFileSize = res.responseData.data;\n      this.dataSource1 = new MatTableDataSource<UploadingDocumentFileSize>(res.responseData.data);\n      this.dataSource1.paginator = this.formListComponent.paginator;\n      this.dataSource1.sort = this.formListComponent.sort;\n    });\n  }\n\n  getuploadingDocumentFileSize(): void {\n    this.apiService.findById(ENDPOINTS.uploadingDocumentFileSize, this.formListComponent.idForUpdate).subscribe((res: any) => {\n      if (res) {\n        this.uploadingDocumentFileSize = res.responseData.data;\n        console.log(this.uploadingDocumentFileSize);\n      }\n    });\n  }\n\n  updateUploadingDocumentFileSize() {\n    this.apiService.update(ENDPOINTS.uploadingDocumentFileSize, this.uploadingDocumentFileSize).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.success(res);\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        this.resetFormValidator(),\n          this.getAllFileSize();\n      });\n\n  }\n\n  delete() {\n    Swal.fire({\n      text: 'Are you sure you want to delete this type of main document?',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Confirm'\n    }).then((result) => {\n      if (result.value) {\n        this.apiService.deleteById(ENDPOINTS.typeOfMainDocuments, this.typeOfMainDocument.id).subscribe(\n          () => {\n            this.sweetAlertService.customSuccessMessage('Type of main document successfully deleted.');\n            this.resetFormValidator();\n            this.getList();\n          }\n        );\n      }\n    });\n  }\n\n}\n","<form>\n  <div class=\"container-fluid\" *ngIf=\"maintenanceType === 'type-of-main-documents'\">\n    <div class=\"row\">\n      <div class=\"col-md-12 title\">\n        <mat-label>\n          Type Of Main Document\n        </mat-label>\n      </div>\n    </div>\n    <hr>\n\n    <form [formGroup]=\"typeOfMainDocumentForm\">\n      <div class=\"row\">\n        <mat-form-field class=\"col-md-8\" appearance=\"outline\">\n          <mat-label>Type Of Main Document <span class=\"required-field\">*</span></mat-label>\n          <input matInput [(ngModel)]=\"typeOfMainDocument.typeOfMainDocument\" name=\"typeOfMainDocument\"\n            formControlName=\"typeOfMainDocument\">\n        </mat-form-field>\n\n        <mat-form-field class=\"col-md-4\" appearance=\"outline\" *ngIf=\"typeOfMainDocument.id\">\n          <mat-label>Status</mat-label>\n          <mat-select [(ngModel)]=\"typeOfMainDocument.status\" name=\"status\" formControlName=\"status\">\n            <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\n              {{i.status}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </form>\n\n    <app-form-action-buttons [childObject]=\"typeOfMainDocument\" [childForm]=\"typeOfMainDocumentForm\"\n      (saveFunction)=\"save()\" (updateFunction)=\"update()\" (cancelFunction)=\"resetFormValidator()\"\n      (deleteFunction)=\"delete()\">\n    </app-form-action-buttons>\n    <br>\n    <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\n      (selectInListFunction)=\"getTypeOfMainDocument()\"></app-form-list>\n\n  </div>\n\n\n  <div class=\"container-fluid\" *ngIf=\"maintenanceType === 'document-size'\">\n    <div class=\"row\">\n      <div class=\"col-md-12 title\">\n        <mat-label>\n          Document File Size\n        </mat-label>\n      </div>\n    </div>\n    <hr>\n\n    <form [formGroup]=\"uploadingDocumentFileSizeForm\" *ngIf=\"uploadingDocumentFileSize.id\">\n      <div class=\"row\">\n        <mat-form-field class=\"col-md-12\" appearance=\"outline\">\n          <mat-label>Size <span class=\"required-field\">*</span></mat-label>\n          <input matInput [(ngModel)]=\"uploadingDocumentFileSize.fileSize\" type=\"number\" name=\"fileSize\"\n            formControlName=\"fileSize\" [disabled]=\"true\">\n        </mat-form-field>\n      </div>\n    </form>\n    <app-form-action-buttons [childObject]=\"uploadingDocumentFileSize\" [childForm]=\"uploadingDocumentFileSizeForm\"\n      (updateFunction)=\"updateUploadingDocumentFileSize()\" (cancelFunction)=\"resetFormValidator()\">\n    </app-form-action-buttons>\n    <br>\n\n    <app-form-list [dataSource]=\"dataSource1\" [displayedColumns]=\"displayedColumns\"\n      (selectInListFunction)=\"getuploadingDocumentFileSize()\"></app-form-list>\n  </div>\n</form>"]}