{"version":3,"sources":["./src/app/modules/pages/maintenance/brands/brands.component.html","./src/app/modules/pages/maintenance/brands/brands.component.scss","./src/app/modules/pages/maintenance/brands/brands.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,qoCAAskC,UAAU,2eAA2e,eAAe,qfAAqf,eAAe,ulBAAulB,KAAK,0hDAA0hD,E;;;;;;;;;;;;ACAntI;AAAe,6GAA8C,+KAA+K,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA7J;AACD;AACY;AAC1D;AAC6B;AACO;AACrB;AAC0B;AAC1C;IAOlB,eAAe,SAAf,eAAe;IAsB1B,YACU,UAAsB,EACtB,WAAwB,EACxB,iBAAoC,EACpC,WAA+B,EACpB,SAAwC,EACf,IAAS;QAL7C,eAAU,GAAV,UAAU,CAAY;QACtB,gBAAW,GAAX,WAAW,CAAa;QACxB,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,gBAAW,GAAX,WAAW,CAAoB;QACpB,cAAS,GAAT,SAAS,CAA+B;QACf,SAAI,GAAJ,IAAI,CAAK;QAxBvD,qBAAgB,GAAa,CAAC,WAAW,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QAChE,eAAU,GAAG,CAAC,GAAG,gDAAQ,CAAC,CAAC;QAC3B,cAAS,GAAG,CAAC,GAAG,qDAAa,CAAC,CAAC;QAE/B,UAAK,GAAG,IAAI,6CAAK,EAAE,CAAC;QACpB,cAAS,GAAG,EAAE,CAAC;QACf,oBAAoB;QACpB,qBAAqB;QACrB,oBAAe,GAAG,CAAC,cAAc,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;QAE9D,gBAAW,GAAG,KAAK,CAAC;QACpB,4BAAuB,GAAG,KAAK,CAAC;QAChC,yCAAoC,GAAG,KAAK,CAAC;QAE7C,aAAQ,GAAG,EAAE,CAAC;QAYZ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;QAC/C,IAAI,IAAI,EAAE;YACR,IAAI,IAAI,CAAC,YAAY,EAAE;gBACrB,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC;gBAExC,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,WAAW,CAAC;gBAC7C,IAAI,CAAC,uBAAuB,GAAG,aAAa,CAAC,QAAQ,CAAC;gBAEtD,IAAI,aAAa,CAAC,QAAQ,EAAE;oBAC1B,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK;iBACjC;aACF;SACF;IACH,CAAC;IAED,QAAQ;QACN,IAAI,IAAI,CAAC,QAAQ,KAAK,kDAAU,CAAC,cAAc,EAAE;YAC/C,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;QACD,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,yBAAyB;QACzB,0BAA0B;IAC5B,CAAC;IAED,OAAO;QACL,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,iDAAS,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,GAAQ,EAAE,EAAE;YAC9D,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACnC,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC;YACvC,IAAI,CAAC,UAAU,GAAG,IAAI,0EAAkB,CAAQ,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACvE,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC;YAC7D,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,IAAI,CAAC,QAAQ;QACX,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,cAAc,CAAC;SACpC;QAED,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,GAAG,iDAAS,CAAC,KAAK,CAAC;SAC5B;QAED,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEvD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CAClD,CAAC,GAAQ,EAAE,EAAE;YACX,IAAI,GAAG,EAAE;gBACP,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACpC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;aACvD;YAED,IAAI,IAAI,CAAC,WAAW,EAAE;gBACpB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,CAAC;aACxD;iBAAM;gBACL,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,IAAI,CAAC,OAAO,EAAE,CAAC;aAChB;QACH,CAAC,EAAE,CAAC,GAAQ,EAAE,EAAE;YACd,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,EAAE,GAAG,EAAE;YACN,6BAA6B;QAC/B,CAAC,CAAC,CAAC;IACP,CAAC;IAGD,QAAQ;QACN,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,iDAAS,CAAC,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,CAAC,GAAQ,EAAE,EAAE;YACnG,IAAI,GAAG,EAAE;gBACP,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC;gBACnC,gFAAgF;gBAChF,0CAA0C;gBAC1C,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,cAAc,CAAC;gBAEpE,IAAI,CAAC,oCAAoC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,cAAc,CAAC,CAAC;oBAChF,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;aAChB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,qBAAqB;IACrB,yEAAyE;IACzE,+GAA+G;IAC/G,QAAQ;IACR,IAAI;IAEJ,4BAA4B;IAC5B,0EAA0E;IAC1E,iDAAiD;IACjD,QAAQ;IACR,IAAI;IAEJ,MAAM,CAAC,QAAQ;QACb,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,GAAG,iDAAS,CAAC,KAAK,CAAC;SAC5B;QAED,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACvD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CACpD,CAAC,GAAQ,EAAE,EAAE;YACX,IAAI,GAAG,EAAE;gBACP,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACpC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC;aACtD;YAED,IAAI,IAAI,CAAC,WAAW,EAAE;gBACpB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,CAAC;aACxD;iBAAM;gBACL,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,IAAI,CAAC,OAAO,EAAE,CAAC;aAChB;QACH,CAAC,EAAE,CAAC,GAAQ,EAAE,EAAE;YACd,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,EAAE,GAAG,EAAE;YACN,6BAA6B;QAC/B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,uDAAe,CAAC,MAAM,CAAC;SAC5C;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACtC,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACtC,sCAAsC;YACtC,uCAAuC;YACvC,MAAM,EAAE,CAAC,EAAE,CAAC;YACZ,OAAO,EAAE,CAAC,EAAE,CAAC;SACd,CAAC,CAAC;IACL,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,KAAK,GAAG,IAAI,6CAAK,EAAE,CAAC;QACzB,IAAI,CAAC,oCAAoC,GAAG,KAAK,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,uDAAe,CAAC,MAAM,CAAC;SAC5C;aAAM;YACL,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;YACrC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;SAC1B;QACD,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC;QACjC,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;IAClC,CAAC;IAED,uDAAuD;IACvD,6BAA6B;IAC7B,yDAAyD;IACzD,MAAM;IACN,IAAI;IAEJ,wDAAwD;IACxD,6BAA6B;IAC7B,yDAAyD;IACzD,MAAM;IACN,IAAI;IAEJ,OAAO;QACL,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,UAAU,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,iDAAS,CAAC,YAAY,CAAC,CAAC;IACpC,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,aAAa,CAAC;QAClC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAClB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,CAAC;IACzD,CAAC;IAED,QAAQ,CAAC,UAAU;QACjB,OAAO,UAAU,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IAC7C,CAAC;IAED,YAAY,CAAC,KAAU,EAAE,QAAa;QACpC,IAAI,KAAK,EAAE;YACT,OAAO,KAAK,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;SAC5C;IACH,CAAC;IAED,MAAM;QACJ,mDAAI,CAAC,IAAI,CAAC;YACR,IAAI,EAAE,6CAA6C;YACnD,IAAI,EAAE,UAAU;YAChB,gBAAgB,EAAE,IAAI;YACtB,kBAAkB,EAAE,SAAS;YAC7B,iBAAiB,EAAE,MAAM;YACzB,iBAAiB,EAAE,SAAS;SAC7B,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACjB,IAAI,MAAM,CAAC,KAAK,EAAE;gBAChB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,iDAAS,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,SAAS,CAClE,GAAG,EAAE;oBACH,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,6BAA6B,CAAC,CAAC;oBAC3E,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC1B,IAAI,CAAC,OAAO,EAAE,CAAC;gBACjB,CAAC,CACF,CAAC;aACH;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CAEF;;YArPQ,oDAAU;YAIC,0DAAW;YAJU,2DAAiB;YAArC,4DAAkB;YAM9B,sEAAY,uBAmChB,sDAAQ;4CACR,sDAAQ,YAAI,oDAAM,SAAC,yEAAe;;;gCA1BpC,uDAAS,SAAC,4DAAiB;;AAFjB,eAAe;IAL3B,+DAAS,CAAC;QACT,QAAQ,EAAE,YAAY;QACtB,mFAAsC;;KAEvC,CAAC;GACW,eAAe,CAuO3B;AAvO2B","file":"default~applications-applications-module~brands-brands-module-es2015.js","sourcesContent":["export default \"<form>\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12 title\\\">\\r\\n        <mat-label>\\r\\n          <mat-icon>turned_in</mat-icon> Brand\\r\\n        </mat-label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <hr>\\r\\n\\r\\n    <form [formGroup]=\\\"brandForm\\\">\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <mat-form-field class=\\\"col-md-10\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Brand <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <input matInput [(ngModel)]=\\\"brand.description\\\" name=\\\"description\\\" formControlName=\\\"description\\\">\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field class=\\\"col-md-2\\\" appearance=\\\"outline\\\" [hidden]=\\\"isFromModal\\\"\\r\\n        *ngIf=\\\"(userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' || userRole === 'ROLE_ENCODER') && brand.id\\\">\\r\\n          <mat-label>Status</mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"brand.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n            <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n              {{i.status}}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n\\r\\n        <!-- <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Product <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"brand.product\\\" name=\\\"product\\\" formControlName=\\\"product\\\"\\r\\n            [compareWith]=\\\"compareProduct\\\">\\r\\n            <mat-option *ngFor=\\\"let i of productList\\\" [value]=\\\"i\\\">\\r\\n              {{i.description}}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field> -->\\r\\n\\r\\n        <!-- <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Category <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"brand.category\\\" name=\\\"category\\\" formControlName=\\\"category\\\"\\r\\n            [compareWith]=\\\"compareCategory\\\">\\r\\n            <mat-option *ngFor=\\\"let i of categoryList\\\" [value]=\\\"i\\\">\\r\\n              {{i.description}}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field> -->\\r\\n\\r\\n        <mat-form-field class=\\\"col-md-2\\\" appearance=\\\"outline\\\" [hidden]=\\\"isFromModal\\\"\\r\\n         *ngIf=\\\"(userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' || userRole === 'ROLE_ENCODER') && brand.id\\\">\\r\\n          <mat-label>Penalty</mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"brand.penalty\\\" name=\\\"penalty\\\" formControlName=\\\"penalty\\\"\\r\\n            [compareWith]=\\\"compareBrand\\\">\\r\\n            <mat-option *ngFor=\\\"let i of yesNoList\\\" [value]=\\\"i\\\">\\r\\n              {{ i }}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n    </form>\\r\\n\\r\\n\\r\\n    <form *ngIf=\\\"userRole==='ROLE_ACCOUNTING'\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Brand <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <input matInput  >\\r\\n        </mat-form-field>\\r\\n        <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Penalty Fee <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <input matInput >\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n    </form>\\r\\n\\r\\n    <app-form-action-buttons [showApproveRejectButton]=\\\"showApproveRejectButton\\\" [isFromModal]=\\\"isFromModal\\\"\\r\\n      [childObject]=\\\"brand\\\" [childForm]=\\\"brandForm\\\" (saveFunction)=\\\"save('')\\\" (updateFunction)=\\\"update('')\\\"\\r\\n      (approveFunction)=\\\"approve()\\\" (rejectFunction)=\\\"reject()\\\" (cancelFunction)=\\\"resetFormValidator()\\\"\\r\\n      (deleteFunction)=\\\"delete()\\\" [isShowApproveDisapproveButton]=\\\"isShowApproveDisapproveButtonByAdmin\\\">\\r\\n    </app-form-action-buttons>\\r\\n    <br>\\r\\n    <ng-container *ngIf=\\\"(!showApproveRejectButton && !isFromModal) || userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN'\\\">\\r\\n      <app-form-list [dataSource]=\\\"dataSource\\\" [displayedColumns]=\\\"displayedColumns\\\"\\r\\n        (selectInListFunction)=\\\"getBrand()\\\" [hidden]=\\\"isFromModal\\\">\\r\\n      </app-form-list>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n</form>\\r\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvbWFpbnRlbmFuY2UvYnJhbmRzL2JyYW5kcy5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, Inject, OnInit, Optional, ViewChild } from '@angular/core';\r\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES, USER_ROLES, YES_NO_OPTION } from '@shared';\r\nimport { Brand } from '@models';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { FormListComponent } from '@fragments';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-brands',\r\n  templateUrl: './brands.component.html',\r\n  styleUrls: ['./brands.component.scss']\r\n})\r\nexport class BrandsComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent\r\n  dataSource: MatTableDataSource<Brand>;\r\n  displayedColumns: string[] = ['brandDesc', 'penalty', 'status'];\r\n  statusList = [...STATUSES];\r\n  yesNoList = [...YES_NO_OPTION];\r\n\r\n  brand = new Brand();\r\n  brandList = [];\r\n  // productList = [];\r\n  // categoryList = [];\r\n  statusNoDisplay = ['FOR_APPROVAL', 'DISAPPROVED', 'APPROVED'];\r\n\r\n  isFromModal = false;\r\n  showApproveRejectButton = false;\r\n  isShowApproveDisapproveButtonByAdmin = false;\r\n\r\n  userRole = '';\r\n\r\n  brandForm: FormGroup;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n    private dataStorage: DataStorageService,\r\n    @Optional() public dialogRef: MatDialogRef<BrandsComponent>,\r\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    this.userRole = this.dataStorage.getUserRole();\r\n    if (data) {\r\n      if (data.dataForModal) {\r\n        const dataFromModal = data.dataForModal;\r\n\r\n        this.isFromModal = dataFromModal.isFromModal;\r\n        this.showApproveRejectButton = dataFromModal.isUpdate;\r\n\r\n        if (dataFromModal.isUpdate) {\r\n          this.brand = dataFromModal.brand\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.userRole !== USER_ROLES.ROLE_APPLICANT) {\r\n      this.getList();\r\n    }\r\n    this.setFormValidator();\r\n    // this.getProductList();\r\n    // this.getCategoryList();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.brand).subscribe((res: any) => {\r\n      console.log(res.responseData.data);\r\n      this.brandList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<Brand>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(endpoint) {\r\n    if (this.isFromModal) {\r\n      this.brand.status = 'FOR_APPROVAL';\r\n    }\r\n\r\n    if (!endpoint) {\r\n      endpoint = ENDPOINTS.brand;\r\n    }\r\n\r\n    this.brand.penalty = this.setBrand(this.brand.penalty);\r\n\r\n    this.apiService.save(endpoint, this.brand).subscribe(\r\n      (res: any) => {\r\n        if (res) {\r\n          this.sweetAlertService.success(res);\r\n          this.dataStorage.setS1NewBrand(res.responseData.data);\r\n        }\r\n\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.dataStorage.getS1NewBrand());\r\n        } else {\r\n          this.resetFormValidator();\r\n          this.getList();\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n      });\r\n  }\r\n\r\n\r\n  getBrand(): void {\r\n    this.apiService.findById(ENDPOINTS.brand, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.brand = res.responseData.data;\r\n        // const removeStatusDisplay = this.statusNoDisplay.includes(this.brand.status);\r\n        // this.isFromModal = removeStatusDisplay;\r\n        this.showApproveRejectButton = this.brand.status === 'FOR_APPROVAL';\r\n\r\n        this.isShowApproveDisapproveButtonByAdmin = this.brand.status === 'FOR_APPROVAL' ?\r\n          true : false;\r\n      }\r\n    });\r\n  }\r\n\r\n  // getProductList() {\r\n  //   this.apiService.findAll(ENDPOINTS.product).subscribe((res: any) => {\r\n  //     this.productList = res.responseData.data.filter((product) => product.status === COMMON_FUNCTION.ACTIVE);\r\n  //   });\r\n  // }\r\n\r\n  // getCategoryList(): void {\r\n  //   this.apiService.findAll(ENDPOINTS.category).subscribe((res: any) => {\r\n  //     this.categoryList = res.responseData.data;\r\n  //   });\r\n  // }\r\n\r\n  update(endpoint) {\r\n    if (!endpoint) {\r\n      endpoint = ENDPOINTS.brand;\r\n    }\r\n\r\n    this.brand.penalty = this.setBrand(this.brand.penalty);\r\n    this.apiService.update(endpoint, this.brand).subscribe(\r\n      (res: any) => {\r\n        if (res) {\r\n          this.sweetAlertService.success(res);\r\n          this.dataStorage.setS1NewBrand(res.responseData.data)\r\n        }\r\n\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.dataStorage.getS1NewBrand());\r\n        } else {\r\n          this.resetFormValidator();\r\n          this.getList();\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    if (!this.isFromModal) {\r\n      this.brand.status = COMMON_FUNCTION.ACTIVE;\r\n    }\r\n    this.brandForm = this.formBuilder.group({\r\n      description: ['', Validators.required],\r\n      // product: ['', Validators.required],\r\n      // category: ['', Validators.required],\r\n      status: [''],\r\n      penalty: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.brand = new Brand();\r\n    this.isShowApproveDisapproveButtonByAdmin = false;\r\n    if (!this.isFromModal) {\r\n      this.brand.status = COMMON_FUNCTION.ACTIVE;\r\n    } else {\r\n      this.showApproveRejectButton = false;\r\n      this.isFromModal = false;\r\n    }\r\n    this.brandForm.markAsUntouched();\r\n    this.brandForm.markAsPristine();\r\n  }\r\n\r\n  // compareProduct(value: any, selected: any): boolean {\r\n  //   if (value && selected) {\r\n  //     return value.description === selected.description;\r\n  //   }\r\n  // }\r\n\r\n  // compareCategory(value: any, selected: any): boolean {\r\n  //   if (value && selected) {\r\n  //     return value.description === selected.description;\r\n  //   }\r\n  // }\r\n\r\n  approve() {\r\n    this.brand.status = 'APPROVED';\r\n    this.save(ENDPOINTS.approveBrand);\r\n  }\r\n\r\n  reject() {\r\n    this.brand.status = 'DISAPPROVED';\r\n    this.update('');\r\n  }\r\n\r\n  closeModal() {\r\n    this.dialogRef.close(this.dataStorage.getS1NewBrand());\r\n  }\r\n\r\n  setBrand(brandParam): boolean {\r\n    return brandParam === 'Yes' ? true : false;\r\n  }\r\n\r\n  compareBrand(value: any, selected: any): boolean {\r\n    if (value) {\r\n      return value === (selected ? 'Yes' : 'No');\r\n    }\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this brand?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.brand, this.brand.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Brand successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}