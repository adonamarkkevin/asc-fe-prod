{"version":3,"sources":["./src/app/modules/pages/maintenance/brands/brands.component.ts","./src/app/modules/pages/maintenance/brands/brands.component.html"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+E;AAEW;AAC1D;AAC6B;AACO;AACrB;AAC0B;AAC1C;;;;;;;;;;;;;;;QCenB,iFACE;QAAA,uDACF;QAAA,4DAAa;;;;QAF4B,8EAAkB;QACzD,0DACF;QADE,uFACF;;;;;;QANJ,qFAEE;QAAA,4EAAW;QAAA,iEAAM;QAAA,4DAAY;QAC7B,iFACE;QADU,mWAA0B;QACpC,4IACE;QAEJ,4DAAa;QACf,4DAAiB;;;;QARqC,sFAAsB;QAG9D,0DAA0B;QAA1B,wFAA0B;QACxB,0DAA4B;QAA5B,sFAA4B;;;;;QA+BxC,iFACE;QAAA,uDACF;QAAA,4DAAa;;;;QAF2B,uEAAW;QACjD,0DACF;QADE,gFACF;;;;;;QAPJ,qFAEE;QAAA,4EAAW;QAAA,kEAAO;QAAA,4DAAY;QAC9B,iFAEE;QAFU,uWAA2B;QAErC,4IACE;QAEJ,4DAAa;QACf,4DAAiB;;;;QATqC,sFAAsB;QAG9D,0DAA2B;QAA3B,yFAA2B;QAEzB,0DAA2B;QAA3B,qFAA2B;;;;;QAS/C,uEACE;QAAA,yEACE;QAAA,qFACE;QAAA,4EAAW;QAAA,iEAAM;QAAA,0EAA6B;QAAA,4DAAC;QAAA,4DAAO;QAAA,4DAAY;QAClE,uEACF;QAAA,4DAAiB;QACjB,qFACE;QAAA,4EAAW;QAAA,wEAAY;QAAA,2EAA6B;QAAA,6DAAC;QAAA,4DAAO;QAAA,4DAAY;QACxE,wEACF;QAAA,4DAAiB;QACnB,4DAAM;QACR,4DAAO;;;;;;QAQP,wEACE;QAAA,oFAEgB;QADd,oWAAmC;QACrC,4DAAgB;QAClB,qEAAe;;;;QAHE,0DAAyB;QAAzB,yFAAyB;;;ADpEvC;UAAM,eAAe;QAsB1B,YACU,UAAsB,EACtB,WAAwB,EACxB,iBAAoC,EACpC,WAA+B,EACpB,SAAwC,EACf,IAAS;YAL7C,eAAU,GAAV,UAAU,CAAY;YACtB,gBAAW,GAAX,WAAW,CAAa;YACxB,sBAAiB,GAAjB,iBAAiB,CAAmB;YACpC,gBAAW,GAAX,WAAW,CAAoB;YACpB,cAAS,GAAT,SAAS,CAA+B;YACf,SAAI,GAAJ,IAAI,CAAK;YAxBvD,qBAAgB,GAAa,CAAC,WAAW,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;YAChE,eAAU,GAAG,CAAC,GAAG,gDAAQ,CAAC,CAAC;YAC3B,cAAS,GAAG,CAAC,GAAG,qDAAa,CAAC,CAAC;YAE/B,UAAK,GAAG,IAAI,6CAAK,EAAE,CAAC;YACpB,cAAS,GAAG,EAAE,CAAC;YACf,oBAAoB;YACpB,qBAAqB;YACrB,oBAAe,GAAG,CAAC,cAAc,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;YAE9D,gBAAW,GAAG,KAAK,CAAC;YACpB,4BAAuB,GAAG,KAAK,CAAC;YAChC,yCAAoC,GAAG,KAAK,CAAC;YAE7C,aAAQ,GAAG,EAAE,CAAC;YAYZ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;YAC/C,IAAI,IAAI,EAAE;gBACR,IAAI,IAAI,CAAC,YAAY,EAAE;oBACrB,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC;oBAExC,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,WAAW,CAAC;oBAC7C,IAAI,CAAC,uBAAuB,GAAG,aAAa,CAAC,QAAQ,CAAC;oBAEtD,IAAI,aAAa,CAAC,QAAQ,EAAE;wBAC1B,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK;qBACjC;iBACF;aACF;QACH,CAAC;QAED,QAAQ;YACN,IAAI,IAAI,CAAC,QAAQ,KAAK,kDAAU,CAAC,cAAc,EAAE;gBAC/C,IAAI,CAAC,OAAO,EAAE,CAAC;aAChB;YACD,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,yBAAyB;YACzB,0BAA0B;QAC5B,CAAC;QAED,OAAO;YACL,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,iDAAS,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,GAAQ,EAAE,EAAE;gBAC9D,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBACnC,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC;gBACvC,IAAI,CAAC,UAAU,GAAG,IAAI,0EAAkB,CAAQ,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBACvE,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC;gBAC7D,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;YACrD,CAAC,CAAC,CAAC;QACL,CAAC;QAED,IAAI,CAAC,QAAQ;YACX,IAAI,IAAI,CAAC,WAAW,EAAE;gBACpB,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,cAAc,CAAC;aACpC;YAED,IAAI,CAAC,QAAQ,EAAE;gBACb,QAAQ,GAAG,iDAAS,CAAC,KAAK,CAAC;aAC5B;YAED,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAEvD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CAClD,CAAC,GAAQ,EAAE,EAAE;gBACX,IAAI,GAAG,EAAE;oBACP,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBACpC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;iBACvD;gBAED,IAAI,IAAI,CAAC,WAAW,EAAE;oBACpB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,CAAC;iBACxD;qBAAM;oBACL,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC1B,IAAI,CAAC,OAAO,EAAE,CAAC;iBAChB;YACH,CAAC,EAAE,CAAC,GAAQ,EAAE,EAAE;gBACd,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACpC,CAAC,EAAE,GAAG,EAAE;gBACN,6BAA6B;YAC/B,CAAC,CAAC,CAAC;QACP,CAAC;QAGD,QAAQ;YACN,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,iDAAS,CAAC,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,CAAC,GAAQ,EAAE,EAAE;gBACnG,IAAI,GAAG,EAAE;oBACP,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC;oBACnC,gFAAgF;oBAChF,0CAA0C;oBAC1C,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,cAAc,CAAC;oBAEpE,IAAI,CAAC,oCAAoC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,cAAc,CAAC,CAAC;wBAChF,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;iBAChB;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAED,qBAAqB;QACrB,yEAAyE;QACzE,+GAA+G;QAC/G,QAAQ;QACR,IAAI;QAEJ,4BAA4B;QAC5B,0EAA0E;QAC1E,iDAAiD;QACjD,QAAQ;QACR,IAAI;QAEJ,MAAM,CAAC,QAAQ;YACb,IAAI,CAAC,QAAQ,EAAE;gBACb,QAAQ,GAAG,iDAAS,CAAC,KAAK,CAAC;aAC5B;YAED,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACvD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CACpD,CAAC,GAAQ,EAAE,EAAE;gBACX,IAAI,GAAG,EAAE;oBACP,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBACpC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC;iBACtD;gBAED,IAAI,IAAI,CAAC,WAAW,EAAE;oBACpB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,CAAC;iBACxD;qBAAM;oBACL,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC1B,IAAI,CAAC,OAAO,EAAE,CAAC;iBAChB;YACH,CAAC,EAAE,CAAC,GAAQ,EAAE,EAAE;gBACd,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACpC,CAAC,EAAE,GAAG,EAAE;gBACN,6BAA6B;YAC/B,CAAC,CAAC,CAAC;QACP,CAAC;QAED,gBAAgB;YACd,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACrB,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,uDAAe,CAAC,MAAM,CAAC;aAC5C;YACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;gBACtC,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;gBACtC,sCAAsC;gBACtC,uCAAuC;gBACvC,MAAM,EAAE,CAAC,EAAE,CAAC;gBACZ,OAAO,EAAE,CAAC,EAAE,CAAC;aACd,CAAC,CAAC;QACL,CAAC;QAED,kBAAkB;YAChB,IAAI,CAAC,KAAK,GAAG,IAAI,6CAAK,EAAE,CAAC;YACzB,IAAI,CAAC,oCAAoC,GAAG,KAAK,CAAC;YAClD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACrB,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,uDAAe,CAAC,MAAM,CAAC;aAC5C;iBAAM;gBACL,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;gBACrC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;aAC1B;YACD,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC;YACjC,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;QAClC,CAAC;QAED,uDAAuD;QACvD,6BAA6B;QAC7B,yDAAyD;QACzD,MAAM;QACN,IAAI;QAEJ,wDAAwD;QACxD,6BAA6B;QAC7B,yDAAyD;QACzD,MAAM;QACN,IAAI;QAEJ,OAAO;YACL,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,UAAU,CAAC;YAC/B,IAAI,CAAC,IAAI,CAAC,iDAAS,CAAC,YAAY,CAAC,CAAC;QACpC,CAAC;QAED,MAAM;YACJ,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,aAAa,CAAC;YAClC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAClB,CAAC;QAED,UAAU;YACR,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,CAAC;QACzD,CAAC;QAED,QAAQ,CAAC,UAAU;YACjB,OAAO,UAAU,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAC7C,CAAC;QAED,YAAY,CAAC,KAAU,EAAE,QAAa;YACpC,IAAI,KAAK,EAAE;gBACT,OAAO,KAAK,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;aAC5C;QACH,CAAC;QAED,MAAM;YACJ,kDAAI,CAAC,IAAI,CAAC;gBACR,IAAI,EAAE,6CAA6C;gBACnD,IAAI,EAAE,UAAU;gBAChB,gBAAgB,EAAE,IAAI;gBACtB,kBAAkB,EAAE,SAAS;gBAC7B,iBAAiB,EAAE,MAAM;gBACzB,iBAAiB,EAAE,SAAS;aAC7B,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;gBACjB,IAAI,MAAM,CAAC,KAAK,EAAE;oBAChB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,iDAAS,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,SAAS,CAClE,GAAG,EAAE;wBACH,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,6BAA6B,CAAC,CAAC;wBAC3E,IAAI,CAAC,kBAAkB,EAAE,CAAC;wBAC1B,IAAI,CAAC,OAAO,EAAE,CAAC;oBACjB,CAAC,CACF,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;QACL,CAAC;;kFArOU,eAAe,8rBA4BJ,wEAAe;mGA5B1B,eAAe;YAAA;0EAEf,4DAAiB;;;;;;;;gBCjB9B,uEACE;gBAAA,yEACE;gBAAA,yEACE;gBAAA,yEACE;gBAAA,4EACE;gBAAA,2EAAU;gBAAA,oEAAS;gBAAA,4DAAW;gBAAC,kEACjC;gBAAA,4DAAY;gBACd,4DAAM;gBACR,4DAAM;gBACN,gEAEA;gBAAA,0EAEE;gBAAA,0EACE;gBAAA,qFACE;gBAAA,6EAAW;gBAAA,kEAAM;gBAAA,2EAA6B;gBAAA,6DAAC;gBAAA,4DAAO;gBAAA,4DAAY;gBAClE,4EACF;gBADkB,+LAA+B;gBAA/C,4DACF;gBAAA,4DAAiB;gBAEjB,mIAEE;gBA4BF,mIAEE;gBAQJ,4DAAM;gBACR,4DAAO;gBAGP,gHACE;gBAYF,8FAI0B;gBAHsB,uKAAgB,SAAK,EAAE,CAAC,IAAC,mHAAmB,WAAO,EAAE,CAAC,IAA7B,qHACpD,aAAS,IAD2C,mHACvB,YAAQ,IADe,mHACK,wBAAoB,IADzB,mHAErD,YAAQ,IAF6C;gBAGzE,4DAA0B;gBAC1B,iEACA;gBAAA,+HACE;gBAIJ,4DAAM;gBACR,4DAAO;;;gBA7EG,0DAAuB;gBAAvB,oFAAuB;gBAKP,0DAA+B;gBAA/B,0FAA+B;gBAIjD,0DAAiH;gBAAjH,2LAAiH;gBA8BhH,0DAAiH;gBAAjH,2LAAiH;gBAahH,0DAAoC;gBAApC,oGAAoC;gBAajB,0DAAmD;gBAAnD,gHAAmD;gBAM9D,0DAAkH;gBAAlH,0LAAkH","file":"default~applications-applications-module~brands-brands-module-es2015.js","sourcesContent":["import { Component, Inject, OnInit, Optional, ViewChild } from '@angular/core';\r\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES, USER_ROLES, YES_NO_OPTION } from '@shared';\r\nimport { Brand } from '@models';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { FormListComponent } from '@fragments';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-brands',\r\n  templateUrl: './brands.component.html',\r\n  styleUrls: ['./brands.component.scss']\r\n})\r\nexport class BrandsComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent\r\n  dataSource: MatTableDataSource<Brand>;\r\n  displayedColumns: string[] = ['brandDesc', 'penalty', 'status'];\r\n  statusList = [...STATUSES];\r\n  yesNoList = [...YES_NO_OPTION];\r\n\r\n  brand = new Brand();\r\n  brandList = [];\r\n  // productList = [];\r\n  // categoryList = [];\r\n  statusNoDisplay = ['FOR_APPROVAL', 'DISAPPROVED', 'APPROVED'];\r\n\r\n  isFromModal = false;\r\n  showApproveRejectButton = false;\r\n  isShowApproveDisapproveButtonByAdmin = false;\r\n\r\n  userRole = '';\r\n\r\n  brandForm: FormGroup;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n    private dataStorage: DataStorageService,\r\n    @Optional() public dialogRef: MatDialogRef<BrandsComponent>,\r\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    this.userRole = this.dataStorage.getUserRole();\r\n    if (data) {\r\n      if (data.dataForModal) {\r\n        const dataFromModal = data.dataForModal;\r\n\r\n        this.isFromModal = dataFromModal.isFromModal;\r\n        this.showApproveRejectButton = dataFromModal.isUpdate;\r\n\r\n        if (dataFromModal.isUpdate) {\r\n          this.brand = dataFromModal.brand\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.userRole !== USER_ROLES.ROLE_APPLICANT) {\r\n      this.getList();\r\n    }\r\n    this.setFormValidator();\r\n    // this.getProductList();\r\n    // this.getCategoryList();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.brand).subscribe((res: any) => {\r\n      console.log(res.responseData.data);\r\n      this.brandList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<Brand>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(endpoint) {\r\n    if (this.isFromModal) {\r\n      this.brand.status = 'FOR_APPROVAL';\r\n    }\r\n\r\n    if (!endpoint) {\r\n      endpoint = ENDPOINTS.brand;\r\n    }\r\n\r\n    this.brand.penalty = this.setBrand(this.brand.penalty);\r\n\r\n    this.apiService.save(endpoint, this.brand).subscribe(\r\n      (res: any) => {\r\n        if (res) {\r\n          this.sweetAlertService.success(res);\r\n          this.dataStorage.setS1NewBrand(res.responseData.data);\r\n        }\r\n\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.dataStorage.getS1NewBrand());\r\n        } else {\r\n          this.resetFormValidator();\r\n          this.getList();\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n      });\r\n  }\r\n\r\n\r\n  getBrand(): void {\r\n    this.apiService.findById(ENDPOINTS.brand, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.brand = res.responseData.data;\r\n        // const removeStatusDisplay = this.statusNoDisplay.includes(this.brand.status);\r\n        // this.isFromModal = removeStatusDisplay;\r\n        this.showApproveRejectButton = this.brand.status === 'FOR_APPROVAL';\r\n\r\n        this.isShowApproveDisapproveButtonByAdmin = this.brand.status === 'FOR_APPROVAL' ?\r\n          true : false;\r\n      }\r\n    });\r\n  }\r\n\r\n  // getProductList() {\r\n  //   this.apiService.findAll(ENDPOINTS.product).subscribe((res: any) => {\r\n  //     this.productList = res.responseData.data.filter((product) => product.status === COMMON_FUNCTION.ACTIVE);\r\n  //   });\r\n  // }\r\n\r\n  // getCategoryList(): void {\r\n  //   this.apiService.findAll(ENDPOINTS.category).subscribe((res: any) => {\r\n  //     this.categoryList = res.responseData.data;\r\n  //   });\r\n  // }\r\n\r\n  update(endpoint) {\r\n    if (!endpoint) {\r\n      endpoint = ENDPOINTS.brand;\r\n    }\r\n\r\n    this.brand.penalty = this.setBrand(this.brand.penalty);\r\n    this.apiService.update(endpoint, this.brand).subscribe(\r\n      (res: any) => {\r\n        if (res) {\r\n          this.sweetAlertService.success(res);\r\n          this.dataStorage.setS1NewBrand(res.responseData.data)\r\n        }\r\n\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.dataStorage.getS1NewBrand());\r\n        } else {\r\n          this.resetFormValidator();\r\n          this.getList();\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    if (!this.isFromModal) {\r\n      this.brand.status = COMMON_FUNCTION.ACTIVE;\r\n    }\r\n    this.brandForm = this.formBuilder.group({\r\n      description: ['', Validators.required],\r\n      // product: ['', Validators.required],\r\n      // category: ['', Validators.required],\r\n      status: [''],\r\n      penalty: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.brand = new Brand();\r\n    this.isShowApproveDisapproveButtonByAdmin = false;\r\n    if (!this.isFromModal) {\r\n      this.brand.status = COMMON_FUNCTION.ACTIVE;\r\n    } else {\r\n      this.showApproveRejectButton = false;\r\n      this.isFromModal = false;\r\n    }\r\n    this.brandForm.markAsUntouched();\r\n    this.brandForm.markAsPristine();\r\n  }\r\n\r\n  // compareProduct(value: any, selected: any): boolean {\r\n  //   if (value && selected) {\r\n  //     return value.description === selected.description;\r\n  //   }\r\n  // }\r\n\r\n  // compareCategory(value: any, selected: any): boolean {\r\n  //   if (value && selected) {\r\n  //     return value.description === selected.description;\r\n  //   }\r\n  // }\r\n\r\n  approve() {\r\n    this.brand.status = 'APPROVED';\r\n    this.save(ENDPOINTS.approveBrand);\r\n  }\r\n\r\n  reject() {\r\n    this.brand.status = 'DISAPPROVED';\r\n    this.update('');\r\n  }\r\n\r\n  closeModal() {\r\n    this.dialogRef.close(this.dataStorage.getS1NewBrand());\r\n  }\r\n\r\n  setBrand(brandParam): boolean {\r\n    return brandParam === 'Yes' ? true : false;\r\n  }\r\n\r\n  compareBrand(value: any, selected: any): boolean {\r\n    if (value) {\r\n      return value === (selected ? 'Yes' : 'No');\r\n    }\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this brand?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.brand, this.brand.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Brand successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","<form>\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 title\">\r\n        <mat-label>\r\n          <mat-icon>turned_in</mat-icon> Brand\r\n        </mat-label>\r\n      </div>\r\n    </div>\r\n    <hr>\r\n\r\n    <form [formGroup]=\"brandForm\">\r\n\r\n      <div class=\"row\">\r\n        <mat-form-field class=\"col-md-10\" appearance=\"outline\">\r\n          <mat-label>Brand <span class=\"required-field\">*</span></mat-label>\r\n          <input matInput [(ngModel)]=\"brand.description\" name=\"description\" formControlName=\"description\">\r\n        </mat-form-field>\r\n\r\n        <mat-form-field class=\"col-md-2\" appearance=\"outline\" [hidden]=\"isFromModal\"\r\n        *ngIf=\"(userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' || userRole === 'ROLE_ENCODER') && brand.id\">\r\n          <mat-label>Status</mat-label>\r\n          <mat-select [(ngModel)]=\"brand.status\" name=\"status\" formControlName=\"status\">\r\n            <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n              {{i.status}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n        <!-- <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n          <mat-label>Product <span class=\"required-field\">*</span></mat-label>\r\n          <mat-select [(ngModel)]=\"brand.product\" name=\"product\" formControlName=\"product\"\r\n            [compareWith]=\"compareProduct\">\r\n            <mat-option *ngFor=\"let i of productList\" [value]=\"i\">\r\n              {{i.description}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field> -->\r\n\r\n        <!-- <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n          <mat-label>Category <span class=\"required-field\">*</span></mat-label>\r\n          <mat-select [(ngModel)]=\"brand.category\" name=\"category\" formControlName=\"category\"\r\n            [compareWith]=\"compareCategory\">\r\n            <mat-option *ngFor=\"let i of categoryList\" [value]=\"i\">\r\n              {{i.description}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field> -->\r\n\r\n        <mat-form-field class=\"col-md-2\" appearance=\"outline\" [hidden]=\"isFromModal\"\r\n         *ngIf=\"(userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' || userRole === 'ROLE_ENCODER') && brand.id\">\r\n          <mat-label>Penalty</mat-label>\r\n          <mat-select [(ngModel)]=\"brand.penalty\" name=\"penalty\" formControlName=\"penalty\"\r\n            [compareWith]=\"compareBrand\">\r\n            <mat-option *ngFor=\"let i of yesNoList\" [value]=\"i\">\r\n              {{ i }}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n    </form>\r\n\r\n\r\n    <form *ngIf=\"userRole==='ROLE_ACCOUNTING'\">\r\n      <div class=\"row\">\r\n        <mat-form-field class=\"col-md-8\" appearance=\"outline\">\r\n          <mat-label>Brand <span class=\"required-field\">*</span></mat-label>\r\n          <input matInput  >\r\n        </mat-form-field>\r\n        <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n          <mat-label>Penalty Fee <span class=\"required-field\">*</span></mat-label>\r\n          <input matInput >\r\n        </mat-form-field>\r\n      </div>\r\n    </form>\r\n\r\n    <app-form-action-buttons [showApproveRejectButton]=\"showApproveRejectButton\" [isFromModal]=\"isFromModal\"\r\n      [childObject]=\"brand\" [childForm]=\"brandForm\" (saveFunction)=\"save('')\" (updateFunction)=\"update('')\"\r\n      (approveFunction)=\"approve()\" (rejectFunction)=\"reject()\" (cancelFunction)=\"resetFormValidator()\"\r\n      (deleteFunction)=\"delete()\" [isShowApproveDisapproveButton]=\"isShowApproveDisapproveButtonByAdmin\">\r\n    </app-form-action-buttons>\r\n    <br>\r\n    <ng-container *ngIf=\"(!showApproveRejectButton && !isFromModal) || userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN'\">\r\n      <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\r\n        (selectInListFunction)=\"getBrand()\" [hidden]=\"isFromModal\">\r\n      </app-form-list>\r\n    </ng-container>\r\n  </div>\r\n</form>\r\n"],"sourceRoot":"webpack:///"}