{"version":3,"sources":["webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/maintenance/medium-execution-controller/medium-execution-controller.component.ts","webpack:///src/app/modules/pages/maintenance/medium-execution-controller/medium-execution-controller.component.html","webpack:///src/app/modules/pages/maintenance/medium-execution-controller/medium-execution-controller-routing.module.ts","webpack:///src/app/modules/pages/maintenance/medium-execution-controller/medium-execution-controller.module.ts"],"names":["MediumExecutionControllerComponent","apiService","formBuilder","sweetAlertService","validateFieldService","displayedColumns","mediumExecutionController","typeOfMedium","typeOfMediumExecution","typeOfMediumList","typeOfMediumExecutionList","mediumExecutionControllerList","setFormValidator","getMaintenance","getList","findAll","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","findById","idForUpdate","save","undefined","success","err","error","resetFormValidator","update","typeOfExecutions","value","selected","description","typeOfExecution","mediumExecutionControllerForm","group","required","markAsUntouched","markAsPristine","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","deleteById","id","customSuccessMessage","getMediumExecution","routes","path","component","MediumExecutionControllerRoutingModule","forChild","MediumExecutionControllerModule"],"mappings":"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","file":"medium-execution-controller-medium-execution-controller-module-es5.js","sourcesContent":["export * from './form-action-buttons/form-action-buttons.component';\r\nexport * from './form-list/form-list.component';","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { TypeOfMedium } from '@models';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { ENDPOINTS } from '@shared';\r\nimport { MediumExecutionController } from 'app/core/models/medium-execution-controller.model';\r\nimport { TypeOfMediumExecution } from 'app/core/models/type-of-medium-execution.model';\r\nimport { ValidateFieldService } from 'app/core/services/validate-field.service';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-medium-execution-controller',\r\n  templateUrl: './medium-execution-controller.component.html',\r\n  styleUrls: ['./medium-execution-controller.component.scss']\r\n})\r\nexport class MediumExecutionControllerComponent implements OnInit {\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  dataSource: MatTableDataSource<MediumExecutionController>;\r\n  displayedColumns: string[] = ['typeOfMediumController', 'typeOfExecutionController'];\r\n\r\n  mediumExecutionController = new MediumExecutionController();\r\n  typeOfMedium = new TypeOfMedium();\r\n  typeOfMediumExecution = new TypeOfMediumExecution();\r\n  typeOfMediumList = [];\r\n  typeOfMediumExecutionList = [];\r\n  mediumExecutionControllerList = [];\r\n  mediumExecutionControllerForm: FormGroup;\r\n\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n    public validateFieldService: ValidateFieldService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.setFormValidator();\r\n    this.getMaintenance();\r\n    this.getList();\r\n  }\r\n\r\n  getList(): void{\r\n    this.apiService.findAll(ENDPOINTS.mediumExecutionController).subscribe((res:any) => {\r\n      this.mediumExecutionControllerList = res.responseData.data;\r\n\r\n      this.dataSource = new MatTableDataSource<MediumExecutionController>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    })\r\n  }\r\n\r\n  getMediumExecution(): void {\r\n    this.apiService.findById(ENDPOINTS.mediumExecutionController, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.mediumExecutionController = res.responseData.data;\r\n      }\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    this.apiService.save(ENDPOINTS.mediumExecutionController, this.mediumExecutionController).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.resetFormValidator();\r\n        this.getList();\r\n        this.getMaintenance();\r\n      });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.mediumExecutionController, this.mediumExecutionController).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined){\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.resetFormValidator()\r\n        this.getList();\r\n        this.getMaintenance();\r\n      });\r\n  }\r\n\r\n\r\n  getMaintenance(): void {\r\n    this.apiService.findAll(ENDPOINTS.typeOfMedium).subscribe((res:any) => {\r\n      this.typeOfMediumList = res.responseData.data;\r\n    })\r\n    this.apiService.findAll(ENDPOINTS.typeOfExecutions).subscribe((res:any) => {\r\n      this.typeOfMediumExecutionList = res.responseData.data;\r\n    })\r\n  }\r\n\r\n  compareTypeOfMedium(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  compareTypeOfExecution(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.typeOfExecution === selected.typeOfExecution;\r\n    }\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.mediumExecutionControllerForm = this.formBuilder.group({\r\n      typeOfExecution: ['', Validators.required],\r\n      typeOfMedium: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.mediumExecutionController = new MediumExecutionController();\r\n    this.typeOfMedium = new TypeOfMedium();\r\n    this.typeOfMediumExecution = new TypeOfMediumExecution();\r\n    this.mediumExecutionControllerForm.markAsUntouched();\r\n    this.mediumExecutionControllerForm.markAsPristine();\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this brand?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.mediumExecutionController, this.mediumExecutionController.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Medium execution controller successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","<form>\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 title\">\r\n        <mat-label>\r\n          <span class=\"material-icons\">badge</span> Medium Execution Controller\r\n        </mat-label>\r\n      </div>\r\n    </div>\r\n    <hr>\r\n    <div class=\"row\">\r\n      <b><b class=\"material-icons\">error_outline</b> <i>&nbsp;Note: All type of medium must have Medium Execution, select \"NO EXECUTION\" if none.</i></b>\r\n    </div>\r\n    <form class=\"row\" [formGroup]=\"mediumExecutionControllerForm\">\r\n      <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n        <mat-label> Type of Medium <mat-icon>notification_important</mat-icon>\r\n        </mat-label>\r\n        <mat-select [(ngModel)]=\"mediumExecutionController.typeOfMedium\" name=\"typeOfMedium\"\r\n          [compareWith]=\"compareTypeOfMedium\" formControlName=\"typeOfMedium\" matNativeControl>\r\n          <mat-option *ngFor=\"let i of typeOfMediumList\" [value]=\"i\">\r\n            {{i.description}}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n        <mat-label>Type of Execution <mat-icon>notification_important</mat-icon>\r\n        </mat-label>\r\n        <mat-select [(ngModel)]=\"mediumExecutionController.typeOfExecution\" name=\"typeOfExecution\"\r\n          [compareWith]=\"compareTypeOfExecution\" formControlName=\"typeOfExecution\" matNativeControl>\r\n          <mat-option *ngFor=\"let i of typeOfMediumExecutionList\" [value]=\"i\">\r\n            {{i.typeOfExecution}}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <app-form-action-buttons [childObject]=\"mediumExecutionController\" [childForm]=\"mediumExecutionControllerForm\"\r\n        (saveFunction)=\"save()\" (updateFunction)=\"update()\" (cancelFunction)=\"resetFormValidator()\"\r\n        (deleteFunction)=\"delete()\"></app-form-action-buttons><br><br><br>\r\n\r\n      <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\r\n        (selectInListFunction)=\"getMediumExecution()\"></app-form-list>\r\n    </form>\r\n\r\n  </div>\r\n\r\n\r\n</form>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { MediumExecutionControllerComponent } from './medium-execution-controller.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: MediumExecutionControllerComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class MediumExecutionControllerRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MediumExecutionControllerRoutingModule } from './medium-execution-controller-routing.module';\r\nimport { MediumExecutionControllerComponent } from './medium-execution-controller.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [MediumExecutionControllerComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MediumExecutionControllerRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule,\r\n  ]\r\n})\r\nexport class MediumExecutionControllerModule { }\r\n"]}