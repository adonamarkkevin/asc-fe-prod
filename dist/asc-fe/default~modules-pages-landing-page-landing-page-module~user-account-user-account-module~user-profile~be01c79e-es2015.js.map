{"version":3,"sources":["./src/app/modules/fragments/index.ts","./src/app/modules/pages/maintenance/user-account/user-account-routing.module.ts","./src/app/core/models/eSignature.model.ts","./src/app/modules/pages/maintenance/user-account/user-account.component.ts","./src/app/modules/pages/maintenance/user-account/user-account.component.html","./src/app/modules/pages/maintenance/user-account/user-account.module.ts"],"names":[],"mappings":"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","file":"default~modules-pages-landing-page-landing-page-module~user-account-user-account-module~user-profile~be01c79e-es2015.js","sourcesContent":["export * from './form-action-buttons/form-action-buttons.component';\nexport * from './form-list/form-list.component';","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { UserAccountComponent } from './user-account.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UserAccountComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class UserAccountRoutingModule { }\n","export class ESignature {\n    id: number;\n    accountId: number;\n    originalFilename: string;\n    filename: string;\n    fileExtension: string;\n    fileURL: string;\n    documentFormat: string;\n    signatureAttachmentReference: string;\n}\n","import { Component, ElementRef, Inject, OnInit, Optional, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatStepper } from '@angular/material/stepper';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { FormListComponent } from '@fragments';\nimport { Affiliation, Company, UserAccount, UserRole } from '@models';\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\nimport { ACCOUNT_TYPE, ENDPOINTS, USER_ROLES } from '@shared';\nimport { ESignature } from 'app/core/models/eSignature.model';\nimport { FileStorageService } from 'app/core/services/file.storage.service';\nimport { ValidateFieldService } from 'app/core/services/validate-field.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport Swal from 'sweetalert2';\nimport { AddCompanyComponent } from '../../company/add-company/add-company.component';\n\n@Component({\n  selector: 'app-user-account',\n  templateUrl: './user-account.component.html',\n  styleUrls: ['./user-account.component.scss']\n})\nexport class UserAccountComponent implements OnInit {\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\n  @ViewChild('stepper') stepper: MatStepper;\n  @ViewChild('selectFileButton', { static: false }) selectFileButton: ElementRef;\n  dataSource: MatTableDataSource<UserAccount>;\n  displayedColumns: string[] = [\n    'firstName',\n    'lastName',\n    'companyDescription',\n    'emailAddress',\n    'mobileNumber',\n    'status'\n  ];\n  currentTab: string = \"NONASC\";\n  userAccount = new UserAccount();\n  company = new Company();\n  userRole = new UserRole();\n  affiliation = new Affiliation();\n  eSign = new ESignature();\n\n  userAccountForm: FormGroup;\n  userInfo: FormGroup;\n  companyInfo: FormGroup;\n  eSignature: FormGroup;\n  accountInfo: FormGroup;\n  userAccountList = [];\n  userRoleList = [];\n  companyList = [];\n  affiliationList = [];\n\n  displayTable = false;\n  isShowUploadButton = false;\n  previewDocument = false;\n  safeURLSignature: any;\n  selectedFile: File;\n  fileSize: number;\n  uploadedSignatureFile: any;\n\n  passwordMatch = false;\n  hidePassword = true;\n  hideConfirmPassword = true;\n  confirmPasswords: any;\n  isFromUserProfile = false;\n  currentUserRole: any;\n\n  isAscUser: boolean;\n  //isUpdateAscUser: boolean;\n\n  constructor(\n    private apiService: ApiService,\n    private formBuilder: FormBuilder,\n    private sweetAlertService: SweetAlertService,\n    private dataStorageService: DataStorageService,\n    public validateFieldService: ValidateFieldService,\n    private router: Router,\n    private fileStorageService: FileStorageService,\n    private spinner: NgxSpinnerService,\n    private sanitizer: DomSanitizer,\n    private dialog: MatDialog,\n    @Optional() public dialogRef: MatDialogRef<UserAccountComponent>,\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any) {\n    if (data) {\n      this.isFromUserProfile = data.isFromProfile;\n      this.userAccount = data.userAccount;\n      this.viewUserInformation();\n    }\n\n  }\n\n  ngOnInit(): void {\n    this.setFormValidator();\n    this.getUserPerTypeList();\n    this.getMaintenanceList();\n    // alert(this.isFromUserProfile)\n    this.currentUserRole = this.dataStorageService.getUserRole();\n\n  }\n\n  save(): void {\n    this.userAccount.username = this.userAccount.username.toLowerCase();\n    if (this.currentUserRole === 'ROLE_SUPER_ADMIN' || this.currentUserRole === 'ROLE_ADMIN') {\n      this.userAccount.company = null;\n    }\n    // this.apiService.save(ENDPOINTS.addUserAccount, this.userAccount).subscribe(\n    this.apiService.save(ENDPOINTS.userAccount, this.userAccount).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.customSuccessMessage('Account has been created successfully.');\n          const evt = { index: null };\n          if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\n            evt.index = 0;\n          } else {\n            evt.index = 1;\n          }\n          this.accountInfo.reset();\n          if (this.isFromUserProfile) {\n            this.dialog.closeAll();\n          }\n        }\n      }, (err: any) => {\n        this.sweetAlertService.customErrorMessage(err?.error?.message ? err.error.message : err.error);\n        console.log('ERROR:::', err);\n\n      }, () => {\n        this.resetFormValidator();\n        if(this.currentTab==\"NONASC\")this.getUserPerTypeList();\n        else if(this.currentTab==\"ASC\")this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\n        this.userAccount = new UserAccount();\n      });\n  }\n\n  update(): void {\n    console.log('update')\n    const endpoint = this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT ? ENDPOINTS.userAccount : ENDPOINTS.updateUserAccount;\n    this.apiService.update(endpoint, this.userAccount).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          // this.updateCredentials();\n          this.sweetAlertService.customSuccessMessage('Account was successfully updated');\n          const evt = { index: null };\n          console.log(this.userAccount);\n\n          if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\n            evt.index = 0;\n          } else {\n            evt.index = 1;\n          }\n          // this.changeTab(evt);\n          this.accountInfo.reset();\n          \n          if (this.isFromUserProfile) {\n            this.dialog.closeAll();\n          }\n        }\n      }, (err: any) => {\n        console.log(err);\n        this.sweetAlertService.error(err);\n      }, () => {\n        \n        if(this.currentTab==\"NONASC\")this.getUserPerTypeList();\n        else if(this.currentTab==\"ASC\")this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\n        this.userAccount = new UserAccount();\n        this.resetFormValidator();\n      });\n  }\n\n\n  insert(isNewEntry: boolean): void {\n    this.userAccount.username = this.userAccount.username.toLowerCase();\n    if (this.currentUserRole === 'ROLE_SUPER_ADMIN' || this.currentUserRole === 'ROLE_ADMIN') {\n      this.userAccount.company = null;\n    }\n    // this.apiService.save(ENDPOINTS.addUserAccount, this.userAccount).subscribe(\n    this.apiService.insert(ENDPOINTS.userAccount, this.userAccount, isNewEntry).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.customSuccessMessage(\n            isNewEntry? 'Account has been created successfully.': 'Account was successfully updated'\n          );\n          const evt = { index: null };\n          if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\n            evt.index = 0;\n          } else {\n            evt.index = 1;\n          }\n          this.accountInfo.reset();\n          if (this.isFromUserProfile) {\n            this.dialog.closeAll();\n          }\n        }\n      }, (err: any) => {\n        this.sweetAlertService.customErrorMessage(err?.error?.message ? err.error.message : err.error);\n        console.log('ERROR:::', err);\n\n      }, () => {\n        this.resetFormValidator();\n        if(this.currentTab==\"NONASC\")this.getUserPerTypeList();\n        else if(this.currentTab==\"ASC\")this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\n        this.userAccount = new UserAccount();\n      });\n  }\n\n  updateCredentials() {\n    const updatedAccount = {\n      password: this.userAccount.password,\n      username: this.userAccount.username,\n      userRole: this.userAccount.userRole\n    }\n    this.apiService.update(ENDPOINTS.updatePassword, updatedAccount).subscribe((res: any) => {\n      if (res !== undefined) {\n        this.sweetAlertService.success(res);\n        const evt = { index: null };\n        if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\n          evt.index = 0;\n        } else {\n          evt.index = 1;\n        }\n        this.changeTab(evt);\n        this.accountInfo.reset();\n      }\n    });\n  }\n\n  delete(): void {\n\n  }\n\n  getSelectedCompany(i): void {\n    if (i) {\n      this.apiService.findById(ENDPOINTS.company, i.value.id).subscribe(\n        (res: any) => {\n          this.company = res.responseData.data;\n        });\n    }\n  }\n\n  getUserPerTypeList(type = 'APPLICANT'): void {\n    this.spinner.show();\n    this.displayTable = false;\n\n    this.isAscUser = type !== 'APPLICANT';\n\n    this.apiService.findAll(`${ENDPOINTS.userAccountType}/${type}`).subscribe(\n      (res: any) => {\n        this.userAccountList = res.responseData.data;\n        this.displayTable = true;\n        this.spinner.hide();\n        this.dataSource = new MatTableDataSource<UserAccount>(res.responseData.data);\n        // this.dataSource.paginator = this.formListComponent.paginator;\n        // this.dataSource.sort = this.formListComponent.sort;\n      }\n    )\n  }\n\n  getMaintenanceList(): void {\n    this.apiService.findAll(ENDPOINTS.activeCompanies).subscribe((res: any) => {\n      this.companyList = res.responseData.data;\n    }, (err: any) => {\n    });\n    this.apiService.findAll(ENDPOINTS.activeMembersAffiliation).subscribe((res: any) => {\n      this.affiliationList = res.responseData.data;\n    }, (err: any) => {\n    });\n    this.apiService.findAll(ENDPOINTS.roles).subscribe((res: any) => {\n      this.userRoleList = res.responseData.data;\n    }, (err: any) => {\n    });\n\n  }\n\n  compareMembersAffiliation(value: any, selected: any): boolean {\n    if (value && selected) {\n      return value.description === selected.description;\n    }\n  }\n\n  compareCompany(value: any, selected: any): boolean {\n    if (value && selected) {\n      return value.id === selected.id;\n    }\n  }\n\n  compareUserRole(value: any, selected: any): boolean {\n    if (value && selected) {\n      return value.id === selected.id;\n    }\n  }\n\n  confirmPassword(password): void {\n    if (this.userAccount.password === password) {\n      this.passwordMatch = true;\n    } else {\n      this.passwordMatch = false;\n    }\n  }\n\n  // get password() {\n  //   let password = this.accountInfo.controls[\"password\"].value;\n  //   if (password === null || password === '' || password === undefined) {\n  //     this.accountInfo.controls['password'].clearValidators();\n  //     this.accountInfo.controls[\"confirmPasswords\"].clearValidators();\n  //   } else {\n  //     this.accountInfo.controls['password'].setValidators([Validators.required, Validators.pattern('((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'), Validators.minLength(8)]);\n  //     this.accountInfo.controls[\"confirmPasswords\"].setValidators([Validators.required]);\n  //   }\n  //   this.accountInfo.controls['password'].updateValueAndValidity();\n  //   this.accountInfo.controls['confirmPasswords'].updateValueAndValidity();\n  //   return this.accountInfo.controls[\"password\"].value\n  // }\n  viewUserInformation(): void {\n    // if (this.isAscUser || this.userAccount.id) {\n    //   this.stepper.selectedIndex = 0;\n    // }\n    const accountId = this.formListComponent?.idForUpdate ?\n    this.formListComponent.idForUpdate : this.userAccount.id;\n\n    this.eSign.signatureAttachmentReference = null;\n    this.eSign.fileURL = null;\n    this.eSign.originalFilename = null;\n    this.apiService.findById(ENDPOINTS.userAccount, accountId).subscribe(\n      (res: any) => {\n        this.userAccount = res.responseData.data;\n        this.company = res.responseData.data.company;\n        this.affiliation = this.userAccount.company.membersAffiliation;\n        this.userRole = this.userAccount.userRole;\n        if (this.userAccount.signatureAttachmentReference) {\n          this.getEsignature()\n        } else {\n          this.selectFileButton.nativeElement.value = '';\n        }\n      });\n  }\n\n  openCompanyComponent(): void {\n    const dialogRef = this.dialog.open(AddCompanyComponent, {\n      width: '80%',\n      height: '85%',\n      data: {\n        isFromModal: true,\n        isUserRegistration: true\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed', result);\n      if (result) {\n        this.company = result;\n      }\n      this.getUserPerTypeList();\n    });\n  }\n\n  setFormValidator(): void {\n    this.userInfo = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      middleName: [''],\n      lastName: ['', Validators.required],\n      mobileNumber: ['', Validators.required],\n      userRole: [''],\n      company: [''],\n    });\n    this.eSignature = this.formBuilder.group({\n      eSignature: ['', Validators.required],\n    });\n\n    if (!this.isFromUserProfile) {\n      this.accountInfo = this.formBuilder.group({\n        userName: ['', [Validators.required, Validators.pattern('[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}')]],\n        // userRole: ['', Validators.required],\n        userRole: [''],\n        password: ['', [Validators.required, Validators.pattern('((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'), Validators.minLength(8)]],\n        confirmPasswords: ['', Validators.required],\n      });\n    } else {\n      this.accountInfo = this.formBuilder.group({\n        userName: ['', [Validators.required, Validators.pattern('[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}')]],\n        password: ['', Validators.required],\n        confirmPasswords: ['', Validators.required],\n      });\n    }\n    this.userAccountForm = new FormGroup({\n      userInfo: new FormControl(),\n      companyInfo: new FormControl(),\n      eSignature: new FormControl(),\n      accountInfo: new FormControl(),\n    });\n  }\n\n  resetFormValidator(): void {\n    this.userAccount = new UserAccount();\n    this.company = new Company();\n    this.affiliation = new Affiliation();\n    this.previewDocument = false;\n    this.userAccountForm.markAsUntouched();\n    this.userAccountForm.markAsPristine();\n    this.dialog.closeAll();\n    if (this.isFromUserProfile) {\n      this.dialog.closeAll();\n    } else {\n      this.router.navigate(['asc/page/maintenance/accounts']);\n    }\n\n  }\n\n  changeTab(evt) {\n    this.userAccount = new UserAccount();\n    this.resetFormValidator();\n    if (evt.index === 0) {\n      this.currentTab=\"NONASC\";\n      //     this.isUpdateAscUser = false;\n      this.getUserPerTypeList();\n      this.displayedColumns = [\n        'firstName',\n        'lastName',\n        'companyDescription',\n        'emailAddress',\n        'mobileNumber',\n        'status'\n      ];\n    } else if (evt.index === 1) {\n      this.currentTab=\"ASC\";\n      //     this.isUpdateAscUser = true;\n      this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\n      this.displayedColumns = [\n        'firstName',\n        'lastName',\n        'userRole',\n        'emailAddress',\n        'status'\n      ];\n    }\n  }\n\n  selectFile(event) {\n    this.isShowUploadButton = false;\n\n    if (event.target.files[0]) {\n      this.fileSize = event.target.files[0].size;\n\n      if (this.fileSize > 15000000) {\n        this.sweetAlertService.customErrorMessage(`Attachments total file size should not exceed 15MB.`);\n        event.target.value = '';\n        return;\n\n      } else {\n        this.isShowUploadButton = true;\n        const fileURL = URL.createObjectURL(event.target.files[0]);\n        this.previewDocument = true;\n\n        this.safeURLSignature = this.sanitizer.bypassSecurityTrustResourceUrl(fileURL);\n\n        const reader = new FileReader();\n        const [file] = event.target.files;\n\n        reader.readAsDataURL(file);\n        reader.onload = () => {\n        };\n\n        this.selectedFile = event.target.files[0];\n      }\n    }\n  }\n\n  viewDocument() {\n    if (this.uploadedSignatureFile) {\n      window.open(this.uploadedSignatureFile.fileURL);\n    } else {\n      window.open(this.eSign.fileURL);\n    }\n  }\n\n  uploadSignature() {\n    Swal.fire({\n      text: 'Are you sure you want to upload this as e-Signature?',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Confirm'\n    }).then((result) => {\n      if (result.value) {\n        this.spinner.show();\n\n        // TODO: CHANGE ATTACHMENT TYPE WHEN SIGNATURE IS AVAILABLE IN BE\n        const accountId = this.formListComponent?.idForUpdate ?\n          this.formListComponent.idForUpdate : this.userAccount.id;\n        const params = `?accountId=${accountId}`;\n\n        this.fileStorageService.pushFileToStorage(ENDPOINTS.signature, this.selectedFile, params)\n          .subscribe((res: any) => {\n            this.uploadedSignatureFile = res.responseData.data;\n\n            this.addToESignature(this.uploadedSignatureFile);\n\n            this.userAccount.signatureAttachmentReference = this.uploadedSignatureFile.signatureAttachmentReference;\n            this.updateUserSignatureReference();\n            this.hideSpinner();\n            this.sweetAlertService.customSuccessMessage('Signature successfully uploaded.');\n            this.selectedFile = null;\n\n            this.getEsignature();\n            this.isShowUploadButton = false;\n\n          }, (err: any) => {\n            this.hideSpinner();\n            this.sweetAlertService.error(err);\n          }, () => {\n            this.hideSpinner();\n          });\n      } else {\n        this.selectedFile = null;\n      }\n    });\n  }\n\n  updateUserSignatureReference() {\n    const endpoint = this.isAscUser ? ENDPOINTS.userAccount : ENDPOINTS.updateUserAccount;\n    this.apiService.update(endpoint, this.userAccount).subscribe(\n      (res: any) => {\n        console.log(res);\n      });\n  }\n\n  addToESignature(obj: any) {\n    this.eSign.signatureAttachmentReference = obj.signatureAttachmentReference;\n    this.eSign.id = obj.id;\n    this.eSign.originalFilename = obj.originalFilename;\n    this.eSign.filename = obj.filename;\n    this.eSign.fileExtension = obj.fileExtension;\n    this.eSign.fileURL = obj.fileURL;\n    this.eSign.accountId = obj.accountId;\n    this.eSign.documentFormat = obj.documentFormat;\n  }\n\n  hideSpinner() {\n    setTimeout(() => {\n      this.spinner.hide();\n    }, 1);\n  }\n\n  getEsignature() {\n    const accountId = this.formListComponent?.idForUpdate ?\n      this.formListComponent.idForUpdate : this.userAccount.id;\n    this.spinner.show();\n\n    this.apiService.findByParam(`${ENDPOINTS.signature}/account-id`, accountId).subscribe(\n      (res: any) => {\n        if (res) {\n          this.eSign = res?.responseData?.data;\n        }\n        this.hideSpinner();\n      }, (err: any) => {\n        this.hideSpinner();\n        console.error(err);\n      });\n  }\n\n  resendEmail(): void {\n    this.apiService.save(ENDPOINTS.adminResendVerificationCode + `/${this.userAccount.username}`, this.userAccount).subscribe(\n      (res: any) => {\n        this.sweetAlertService.customSuccessMessage('Email verification has been sent');\n      }\n    )\n  }\n\n  deleteESignature(): void {\n    Swal.fire({\n      text: 'Are you sure you want to upload this as e-Signature?',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Confirm'\n    }).then((result) => {\n      if (result.value) {\n        this.spinner.show();\n        this.apiService.deleteById(ENDPOINTS.signature, this.eSign?.id).subscribe(\n          res => {\n            this.eSign = new ESignature();\n            this.previewDocument = false;\n            this.spinner.hide();\n          }, err => this.spinner.hide());\n      }\n    });\n  }\n\n}\n","<form>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-12 title\">\n        <mat-label>\n          <span class=\"material-icons\">badge</span> User Account\n        </mat-label>\n      </div>\n    </div>\n    <hr>\n\n    <mat-tab-group dynamicHeight *ngIf=\"isAscUser || userAccount.id\">\n      <!-- 1 -->\n      <mat-tab label=\"User Details\">\n        <form [formGroup]=\"userInfo\">\n          <div class=\"fields\">\n            <h4>\n              <mat-icon>label_important</mat-icon> Personal Information:\n            </h4>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Given name: <span class=\"required-field\">\n                    <mat-icon>notification_important</mat-icon>\n                  </span></mat-label>\n                <input matInput [(ngModel)]=\"userAccount.firstName\" name=\"firstName\" formControlName=\"firstName\">\n              </mat-form-field>\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Middle name: </mat-label>\n                <input matInput [(ngModel)]=\"userAccount.middleName\" name=\"middleName\" formControlName=\"middleName\">\n              </mat-form-field>\n            </div>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Last name: <span class=\"required-field\">\n                    <mat-icon>notification_important</mat-icon>\n                  </span></mat-label>\n                <input matInput [(ngModel)]=\"userAccount.lastName\" name=\"lastName\" formControlName=\"lastName\">\n              </mat-form-field>\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Mobile Number: <mat-icon>notification_important</mat-icon></mat-label>\n                <input matInput [(ngModel)]=\"userAccount.mobileNumber\" name=\"mobileNumber\" placeholder=\"09xxxxxxxxx\"\n                  formControlName=\"mobileNumber\" (keydown)=\"validateFieldService.numbersOnly($event)\" maxlength=\"11\">\n              </mat-form-field>\n            </div>\n\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\"\n              *ngIf=\"currentUserRole==='ROLE_SUPER_ADMIN' || currentUserRole==='ROLE_ADMIN'\">\n                <mat-label> User Role <mat-icon>notification_important</mat-icon>\n                </mat-label>\n                <mat-select [(ngModel)]=\"userAccount.userRole\" name=\"userRole\" [compareWith]=\"compareUserRole\"\n                  formControlName=\"userRole\" matNativeControl [disabled]=\"userAccount?.userRole?.name=='ROLE_APPLICANT'\">\n                  <mat-option *ngFor=\"let i of userRoleList\" [value]=\"i\">\n                    {{ i?.name?.replaceAll('ROLE_', '')?.replace('_', ' ')?.replace('ENCODER', 'EVALUATOR') }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n            </div>\n\n            <div>\n              <button class=\"col\" mat-raised-button color=\"warn\" *ngIf=\"userAccount?.firstName != undefined\n              && userAccount?.status === 'VERIFICATION_SENT' && userAccount?.accountType === 'APPLICANT'\" (click)=\"resendEmail()\">\n              <span class=\"material-icons\">mail</span> Resend Email Verification\n              </button>\n            </div>\n          </div>\n\n          <div class=\"fields\" *ngIf=\"userAccount?.userRole?.name=='ROLE_APPLICANT' && !isAscUser\">\n            <h4>\n              <mat-icon>label_important</mat-icon> Company Information:\n            </h4>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-12\" appearance=\"outline\">\n                <mat-label> Company <mat-icon>notification_important</mat-icon>\n                </mat-label>\n                <mat-select [(ngModel)]=\"userAccount.company\" name=\"company\" [compareWith]=\"compareCompany\"\n                  formControlName=\"company\" matNativeControl (selectionChange)=\"getSelectedCompany($event)\">\n                  <mat-option (click)=\"openCompanyComponent()\">\n                    <span class=\"badge bg-success dd\">Add New Company</span>\n                  </mat-option>\n                  <mat-option *ngFor=\"let i of companyList\" [value]=\"i\">\n                    {{i.companyName}}\n                  </mat-option>\n\n                </mat-select>\n              </mat-form-field>\n            </div>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Member Affiliation</mat-label>\n                <input matInput [value]=\"userAccount?.company?.membersAffiliation?.description\"\n                  name=\"membersAffiliation\" readonly>\n              </mat-form-field>\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Company Number: <span class=\"required-field\">*</span></mat-label>\n                <input matInput [value]=\"userAccount?.company?.companyMobileNo\" name=\"companyMobileNo\" readonly>\n              </mat-form-field>\n            </div>\n\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Telephone Number: </mat-label>\n                <input matInput [value]=\"userAccount?.company?.companyTelephoneNo\" name=\"companyTelephoneNo\" readonly>\n              </mat-form-field>\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Alternative Telephone Number: </mat-label>\n                <input matInput [value]=\"userAccount?.company?.companyTelephoneNo2\" name=\"companyTelephoneNo2\" readonly>\n              </mat-form-field>\n            </div>\n\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Contact Person: </mat-label>\n                <input matInput [value]=\"userAccount?.company?.contactPersonName\" name=\"contactPersonName\" readonly>\n              </mat-form-field>\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Contact Person Email: </mat-label>\n                <input matInput [value]=\"userAccount?.company?.contactPersonEmail\" name=\"contactPersonEmail\" readonly>\n              </mat-form-field>\n            </div>\n          </div>\n\n          <div class=\"col-md-12\" *ngIf=\"!userAccount?.id\">\n            <b><b class=\"material-icons\">error_outline</b> Note: Proceed to Account Information to complete adding of ASC user.</b>\n          </div>\n\n          <div class=\"container\">\n            <button mat-raised-button color=\"primary\" (click)=\"insert(false)\" [disabled]=\"!userInfo?.valid\" *ngIf=\"userAccount?.id\"><i class=\"material-icons color__white\">offline_pin</i> UPDATE</button>\n              <br>\n          </div>\n        </form>\n      </mat-tab>\n\n      <!-- 2 -->\n      <mat-tab label=\"E-Signature\" *ngIf=\"userAccount?.userRole?.name !== 'ROLE_APPLICANT' && userAccount?.id\">\n        <form [formGroup]=\"eSignature\">\n          <div class=\"row\">\n            <div class=\"col-md-12\" appearance=\"outline\">\n\n              <div class=\"row fields\">\n                <h4>\n                  <i class=\"material-icons\">upload</i> &nbsp;Upload e-Signature\n                </h4>\n                <br>\n\n                <div class=\"col-md-12\" appearance=\"outline\">\n                  <mat-label>Filename:  <mat-icon>notification_important</mat-icon></mat-label>\n                  <br>\n                  <br>\n                  <input #selectFileButton matInput [value]=\"eSign.originalFilename\" disabled\n                    *ngIf=\"eSign.originalFilename\">\n                  <input #selectFileButton class=\"file-upload\" type=\"file\" *ngIf=\"!eSign.originalFilename\" accept=\"image/*\"\n                    (change)=\"selectFile($event)\">\n                  <input type=\"hidden\" [(ngModel)]=\"eSign.signatureAttachmentReference\" formControlName=\"eSignature\">\n                  <br>\n                </div>\n                <div class=\"col-md-12\" appearance=\"outline\">\n\n                  <button mat-raised-button class=\"button-red button-right\" (click)=\"deleteESignature()\"\n                    *ngIf=\"eSign?.fileURL\">\n                    <i class=\"material-icons add-document color__white\">delete</i> DELETE E-SIGNATURE\n                  </button>\n\n                  <button mat-raised-button class=\"button-red button-right\" (click)=\"viewDocument()\"\n                    *ngIf=\"eSign?.signatureAttachmentReference\">\n                    <i class=\"material-icons add-document\">open_in_new</i> VIEW DOCUMENT\n                  </button>\n\n\n                  &nbsp; &nbsp;\n\n                  <button mat-raised-button class=\"button-red button-right\" (click)=\"uploadSignature()\"\n                    [disabled]=\"!safeURLSignature || !isShowUploadButton\" *ngIf=\"isShowUploadButton\">\n                    <i class=\"material-icons add-document color__white\">upload</i> UPLOAD\n                  </button>\n\n                  <br>\n                  <div class=\"row col-md-12\" appearance=\"outline\" *ngIf=\"previewDocument==true && (\n                          userAccount?.signatureAttachmentReference\n                        )\">\n                    <div class=\"file-upload\">\n                      <object [data]=\"safeURLSignature\" type=\"application/pdf\" width=\"100%\" height=\"400\">\n                        <iframe [src]=\"safeURLSignature\" width=\"100%\" height=\"400\">\n                          <p>This browser does not support PDF!</p>\n                        </iframe>\n                      </object>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"col-md-12\"><br></div>\n              </div>\n            </div>\n          </div>\n        </form>\n      </mat-tab>\n\n      <!-- 3 -->\n      <mat-tab label=\"Account Information\">\n        <form [formGroup]=\"accountInfo\">\n          <ng-template matStepLabel>Account Information</ng-template>\n          <div class=\"row fields\">\n            <h4>\n              <mat-icon>label_important</mat-icon> Account Information:\n            </h4>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-12\" appearance=\"outline\">\n                <mat-label> Email Address: <span class=\"required-field\">\n                    <mat-icon>notification_important</mat-icon>\n                  </span></mat-label>\n                <input matInput [(ngModel)]=\"userAccount.username\" name=\"userName\" formControlName=\"userName\"\n                  type=\"email\" [readonly]=\"userAccount?.id\">\n              </mat-form-field>\n            </div>\n            <div class=\"row col-md-6\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label> Password:\n                  <span class=\"required-field\">\n                    <mat-icon>notification_important</mat-icon>\n                  </span>\n                </mat-label>\n                <input matInput [type]=\"hidePassword ? 'password' : 'text'\" [(ngModel)]=\"userAccount.password\"\n                  name=\"password\" formControlName=\"password\">\n                <button type=\"button\" mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\"\n                  [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hidePassword\">\n                  <mat-icon>{{hidePassword ? 'visibility_off' : 'visibility'}}</mat-icon>\n                </button>\n              </mat-form-field>\n              <p *ngIf=\"accountInfo.get('password').dirty && accountInfo.controls['password'].errors\" class=\"badge\">\n                <mat-icon>warning</mat-icon>\n                Password must contain lower,upper case letter and number.\n              </p>\n            </div>\n            <div class=\"row col-md-6\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label> Confirm Password:\n                  <span class=\"required-field\">\n                    <mat-icon>notification_important</mat-icon>\n                  </span>\n                </mat-label>\n                <input matInput [type]=\"hideConfirmPassword ? 'password' : 'text'\" [(ngModel)]=\"confirmPasswords\"\n                  name=\"confirmPasswords\" formControlName=\"confirmPasswords\"\n                  (keyup)=\"confirmPassword(confirmPasswords)\">\n                <button type=\"button\" mat-icon-button matSuffix (click)=\"hideConfirmPassword = !hideConfirmPassword\"\n                  [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hideConfirmPassword\">\n                  <mat-icon>{{hideConfirmPassword ? 'visibility_off' : 'visibility'}}</mat-icon>\n                </button>\n              </mat-form-field>\n              <p *ngIf=\"accountInfo.get('confirmPasswords').dirty && !passwordMatch\" class=\"badge\">\n                <mat-icon>warning</mat-icon>\n                Password not match\n              </p>\n            </div>\n          </div>\n        </form>\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <button mat-raised-button color=\"primary\" (click)=\"insert(true)\" [disabled]=\"!userInfo?.valid || !accountInfo?.valid || !userAccount?.userRole || !userAccount?.password || !confirmPasswords\"\n            *ngIf=\"!userAccount?.id\"><i class=\"material-icons color__white\">offline_pin</i> SAVE</button>\n            <button mat-raised-button color=\"primary\" (click)=\"updateCredentials()\" [disabled]=\"!accountInfo?.valid\" [hidden]=\"!userAccount?.id\"><i class=\"material-icons color__white\">offline_pin</i> UPDATE</button>  \n          </div>\n        </div>\n      </mat-tab>\n    </mat-tab-group>\n\n    <div class=\"row\">\n      <br>\n      <div class=\"container\">\n        <mat-tab-group mat-align-tabs=\"start\" (selectedTabChange)=\"changeTab($event)\" *ngIf=\"!isFromUserProfile\">\n          <!-- displayed columns will be changed in changeTab() -->\n          <mat-tab label=\"Non ASC users\">\n\n          </mat-tab>\n          <mat-tab label=\"ASC users\">\n\n          </mat-tab>\n        </mat-tab-group>\n        <br>\n        <span *ngIf=\"!isFromUserProfile && displayTable\">\n          <app-form-list [dataSource]=\"dataSource\"\n            [displayedColumns]=\"displayedColumns\" (selectInListFunction)=\"viewUserInformation()\">\n          </app-form-list>\n        </span>\n      </div>\n    </div>\n  </div>\n</form>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UserAccountRoutingModule } from './user-account-routing.module';\nimport { UserAccountComponent } from './user-account.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AngularMaterialModule } from '@shared';\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\n\n\n@NgModule({\n  declarations: [UserAccountComponent],\n  imports: [\n    CommonModule,\n    UserAccountRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n    FragmentsModule\n  ]\n})\nexport class UserAccountModule { }\n"],"sourceRoot":"webpack:///"}