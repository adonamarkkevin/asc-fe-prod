{"version":3,"sources":["./src/app/modules/pages/maintenance/type-of-reason/type-of-reason.component.ts","./src/app/modules/pages/maintenance/type-of-reason/type-of-reason.component.html"],"names":[],"mappings":"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","file":"default~applications-applications-module~type-of-reason-type-of-reason-module-es2015.js","sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { FormListComponent } from '@fragments';\nimport { TypeOfReason } from '@models';\nimport { ApiService, SweetAlertService } from '@services';\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-type-of-reason',\n  templateUrl: './type-of-reason.component.html',\n  styleUrls: ['./type-of-reason.component.scss']\n})\nexport class TypeOfReasonComponent implements OnInit {\n\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\n  dataSource: MatTableDataSource<TypeOfReason>;\n  displayedColumns: string[] = ['reason', 'status'];\n  statusList = [...STATUSES];\n\n  typeOfReason = new TypeOfReason();\n  typeOfReasonList = [];\n\n  typeOfReasonForm: FormGroup;\n\n  constructor(\n    private apiService: ApiService,\n    private formBuilder: FormBuilder,\n    private sweetAlertService: SweetAlertService\n  ) { }\n\n  ngOnInit(): void {\n    this.getList();\n    this.setFormValidator();\n  }\n\n  getList(): void {\n    this.apiService.findAll(ENDPOINTS.typeOfReason).subscribe((res: any) => {\n      this.typeOfReasonList = res.responseData.data;\n      this.dataSource = new MatTableDataSource<TypeOfReason>(res.responseData.data);\n      this.dataSource.paginator = this.formListComponent.paginator;\n      this.dataSource.sort = this.formListComponent.sort;\n    });\n  }\n\n  save(): void {\n    this.apiService.save(ENDPOINTS.typeOfReason, this.typeOfReason).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.success(res);\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        // actions after subscription\n        this.resetFormValidator();\n        this.getList();\n      });\n  }\n\n  getTypeOfReason(): void {\n    this.apiService.findById(ENDPOINTS.typeOfReason, this.formListComponent.idForUpdate).subscribe((res: any) => {\n      if (res) {\n        this.typeOfReason = res.responseData.data;\n      }\n    });\n  }\n\n  update(): void {\n    this.apiService.update(ENDPOINTS.typeOfReason, this.typeOfReason).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.success(res);\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        // actions after subscription\n        this.resetFormValidator();\n        this.getList();\n      });\n  }\n\n  setFormValidator(): void {\n    this.typeOfReason.status = COMMON_FUNCTION.ACTIVE;\n    this.typeOfReasonForm = this.formBuilder.group({\n      reason: ['', Validators.required],\n      status: [''],\n    });\n  }\n\n  resetFormValidator(): void {\n    this.typeOfReason = new TypeOfReason();\n    this.typeOfReason.status = COMMON_FUNCTION.ACTIVE;\n    this.typeOfReasonForm.markAsUntouched();\n    this.typeOfReasonForm.markAsPristine();\n  }\n\n  delete() {\n    Swal.fire({\n      text: 'Are you sure you want to delete this type of reason?',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Confirm'\n    }).then((result) => {\n      if (result.value) {\n        this.apiService.deleteById(ENDPOINTS.typeOfReason, this.typeOfReason.id).subscribe(\n          () => {\n            this.sweetAlertService.customSuccessMessage('Type of reason successfully deleted.');\n            this.resetFormValidator();\n            this.getList();\n          }\n        );\n      }\n    });\n  }\n\n}\n","<form>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-12 title\">\n        <mat-label>\n          <mat-icon>event_note</mat-icon> Type of Reason\n        </mat-label>\n      </div>\n    </div>\n    <hr>\n\n    <form [formGroup]=\"typeOfReasonForm\">\n      <div class=\"row\">\n        <mat-form-field class=\"col-md-8\" appearance=\"outline\">\n          <mat-label>Reason:<span class=\"required-field\">*</span></mat-label>\n          <input matInput [(ngModel)]=\"typeOfReason.reason\" name=\"reason\" formControlName=\"reason\">\n        </mat-form-field>\n\n        <mat-form-field class=\"col-md-4\" appearance=\"outline\" *ngIf=\"typeOfReason.id\">\n          <mat-label>Status</mat-label>\n          <mat-select [(ngModel)]=\"typeOfReason.status\" name=\"status\" formControlName=\"status\">\n            <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\n              {{i.status}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </form>\n\n    <app-form-action-buttons [childObject]=\"typeOfReason\" [childForm]=\"typeOfReasonForm\" (saveFunction)=\"save()\"\n      (updateFunction)=\"update()\" (cancelFunction)=\"resetFormValidator()\" (deleteFunction)=\"delete()\"></app-form-action-buttons>\n      <br>\n      <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\n        (selectInListFunction)=\"getTypeOfReason()\"></app-form-list>\n  </div>\n</form>"],"sourceRoot":"webpack:///"}