{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/asc-rates/asc-rates.component.scss","webpack:///src/app/modules/pages/maintenance/asc-rates/asc-rates.component.html","webpack:///src/app/modules/pages/maintenance/asc-rates/asc-rates.component.ts"],"names":["AscRatesComponent","apiService","formBuilder","validateFieldService","sweetAlertService","displayedColumns","statusList","ascRate","ascRateList","typeOfMediumExecutionList","typeOfMediumList","getList","setFormValidator","findAll","ascRates","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","getTypeOfMediumList","typeOfMedium","console","log","typeOfExecutionsByMedium","id","save","undefined","success","err","error","resetFormValidator","findById","idForUpdate","setExecution","typeOfExecutions","update","status","ACTIVE","ascRateForm","group","lengthFrom","required","lengthTo","memberOffline","memberOnline","nonMemberOffline","nonMemberOnline","typeOfExecution","markAsUntouched","markAsPristine","penaltyParam","value","selected","description","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","deleteById","customSuccessMessage","selector","template"],"mappings":"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","file":"default~applications-applications-module~asc-rates-asc-rates-module-es5.js","sourcesContent":["export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvbWFpbnRlbmFuY2UvYXNjLXJhdGVzL2FzYy1yYXRlcy5jb21wb25lbnQuc2NzcyJ9 */\";","export default \"<form>\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12 title\\\">\\r\\n                <mat-label>\\r\\n                    <i class=\\\"material-icons\\\">credit_score</i>\\r\\n                    ASC Rates\\r\\n                </mat-label>\\r\\n            </div>\\r\\n        </div>\\r\\n        <hr>\\r\\n\\r\\n        <form [formGroup]=\\\"ascRateForm\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                  <mat-label>Type Of Medium</mat-label>\\r\\n                  <mat-select [(ngModel)]=\\\"ascRate.typeOfMedium\\\" name=\\\"typeOfMedium\\\" formControlName=\\\"typeOfMedium\\\"\\r\\n                  [compareWith]=\\\"compareTypeOfMedium\\\" (selectionChange)=\\\"setExecution()\\\">\\r\\n                      <mat-option *ngFor=\\\"let i of typeOfMediumList\\\" [value]=\\\"i\\\">\\r\\n                          {{i.description}}\\r\\n                      </mat-option>\\r\\n                  </mat-select>\\r\\n              </mat-form-field>\\r\\n\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                  <mat-label>Type Of Execution</mat-label>\\r\\n                  <mat-select [(ngModel)]=\\\"ascRate.typeOfExecution\\\" name=\\\"typeOfExecution\\\" formControlName=\\\"typeOfExecution\\\"\\r\\n                  [compareWith]=\\\"compareMediumExecution\\\">\\r\\n                      <mat-option *ngFor=\\\"let i of typeOfMediumExecutionList\\\" [value]=\\\"i.typeOfExecution\\\">\\r\\n                          {{i.typeOfExecution.typeOfExecution}}\\r\\n                      </mat-option>\\r\\n                  </mat-select>\\r\\n              </mat-form-field>\\r\\n\\r\\n                <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                    <mat-label>Length From</mat-label>\\r\\n                    <input matInput [(ngModel)]=\\\"ascRate.lengthFrom\\\" name=\\\"lengthFrom\\\" formControlName=\\\"lengthFrom\\\"\\r\\n                        (keydown)=\\\"validateFieldService.numbersOnly($event)\\\" maxlength=\\\"5\\\">\\r\\n                </mat-form-field>\\r\\n\\r\\n                <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                    <mat-label>Length To</mat-label>\\r\\n                    <input matInput [(ngModel)]=\\\"ascRate.lengthTo\\\" name=\\\"lengthTo\\\" formControlName=\\\"lengthTo\\\"\\r\\n                        (keydown)=\\\"validateFieldService.numbersOnly($event)\\\" maxlength=\\\"5\\\">\\r\\n                </mat-form-field>\\r\\n\\r\\n                <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                    <mat-label>Member Offline <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n                    <input matInput [(ngModel)]=\\\"ascRate.memberOffline\\\" name=\\\"memberOffline\\\"\\r\\n                        formControlName=\\\"memberOffline\\\" (keydown)=\\\"validateFieldService.numbersOnly($event)\\\">\\r\\n                </mat-form-field>\\r\\n\\r\\n                <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                    <mat-label>Non Member Offline <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n                    <input matInput [(ngModel)]=\\\"ascRate.nonMemberOffline\\\" name=\\\"nonMemberOffline\\\"\\r\\n                        formControlName=\\\"nonMemberOffline\\\" (keydown)=\\\"validateFieldService.numbersOnly($event)\\\">\\r\\n                </mat-form-field>\\r\\n\\r\\n                <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                    <mat-label>Member Online</mat-label>\\r\\n                    <input matInput [(ngModel)]=\\\"ascRate.memberOnline\\\" name=\\\"memberOnline\\\"\\r\\n                        formControlName=\\\"memberOnline\\\" (keydown)=\\\"validateFieldService.numbersOnly($event)\\\">\\r\\n                </mat-form-field>\\r\\n\\r\\n                <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                    <mat-label>Non Member Online</mat-label>\\r\\n                    <input matInput [(ngModel)]=\\\"ascRate.nonMemberOnline\\\" name=\\\"nonMemberOnline\\\"\\r\\n                        formControlName=\\\"nonMemberOnline\\\" (keydown)=\\\"validateFieldService.numbersOnly($event)\\\">\\r\\n                </mat-form-field>\\r\\n\\r\\n                <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\" *ngIf=\\\"ascRate.id\\\">\\r\\n                    <mat-label>Status</mat-label>\\r\\n                    <mat-select [(ngModel)]=\\\"ascRate.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n                        <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n                            {{i.status}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </form>\\r\\n\\r\\n        <app-form-action-buttons [childObject]=\\\"ascRate\\\" [childForm]=\\\"ascRateForm\\\" (saveFunction)=\\\"save()\\\"\\r\\n            (updateFunction)=\\\"update()\\\" (cancelFunction)=\\\"resetFormValidator()\\\" (deleteFunction)=\\\"delete()\\\"></app-form-action-buttons>\\r\\n        <br>\\r\\n        <app-form-list [dataSource]=\\\"dataSource\\\" [displayedColumns]=\\\"displayedColumns\\\"\\r\\n            (selectInListFunction)=\\\"getAscRate()\\\"></app-form-list>\\r\\n\\r\\n    </div>\\r\\n</form>\\r\\n\";","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { AscRate } from '@models';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\r\nimport { ValidateFieldService } from 'app/core/services/validate-field.service';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-asc-rates',\r\n  templateUrl: './asc-rates.component.html',\r\n  styleUrls: ['./asc-rates.component.scss']\r\n})\r\nexport class AscRatesComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<AscRate>;\r\n  displayedColumns: string[] = [\r\n    'lengthFrom',\r\n    'lengthTo',\r\n    'memberOffline',\r\n    'memberOnline',\r\n    'nonMemberOffline',\r\n    'nonMemberOnline',\r\n    'typeOfExecutionObj',\r\n    'typeOfMediumObj',\r\n    'status'\r\n  ];\r\n  statusList = [...STATUSES];\r\n\r\n  ascRate = new AscRate();\r\n  ascRateList = [];\r\n  typeOfMediumExecutionList = [];\r\n  typeOfMediumList = [];\r\n\r\n  ascRateForm: FormGroup;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    public validateFieldService: ValidateFieldService,\r\n    private sweetAlertService: SweetAlertService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.ascRates).subscribe((res: any) => {\r\n      this.ascRateList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<AscRate>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n    this.getTypeOfMediumList();\r\n  }\r\n\r\n  getTypeOfMediumList(): void {\r\n    this.apiService.findAll(ENDPOINTS.typeOfMedium).subscribe((res: any) => {\r\n      this.typeOfMediumList = res.responseData.data;\r\n    });\r\n  }\r\n\r\n  setExecution() {\r\n    console.log(this.ascRate.typeOfMedium);\r\n    if (this.ascRate.typeOfMedium) {\r\n      this.apiService.findAll(ENDPOINTS.typeOfExecutionsByMedium + this.ascRate.typeOfMedium.id).subscribe((res: any) => {\r\n        this.typeOfMediumExecutionList = res.responseData.data;\r\n      });\r\n    }\r\n  }\r\n\r\n  save(): void {\r\n    console.log(this.ascRate);\r\n\r\n    this.apiService.save(ENDPOINTS.ascRates, this.ascRate).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        console.log(err);\r\n\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  getAscRate(): void {\r\n    this.apiService.findById(ENDPOINTS.ascRates, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.ascRate = res.responseData.data;\r\n        this.setExecution();\r\n      }\r\n    });\r\n  }\r\n\r\n  getTypeOfMediumExecutionList(): void {\r\n    this.apiService.findAll(ENDPOINTS.typeOfExecutions).subscribe((res: any) => {\r\n      this.typeOfMediumExecutionList = res.responseData.data;\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n\r\n    this.apiService.update(ENDPOINTS.ascRates, this.ascRate).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.ascRate.status = COMMON_FUNCTION.ACTIVE;\r\n    this.ascRateForm = this.formBuilder.group({\r\n      lengthFrom: ['', [Validators.required]],\r\n      lengthTo: ['', [Validators.required]],\r\n      memberOffline: ['', Validators.required],\r\n      memberOnline: [''],\r\n      nonMemberOffline: ['', Validators.required],\r\n      nonMemberOnline: [''],\r\n      typeOfExecution: ['', Validators.required],\r\n      typeOfMedium: ['', Validators.required],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.ascRate = new AscRate();\r\n    this.ascRate.status = COMMON_FUNCTION.ACTIVE;\r\n    this.ascRateForm.markAsUntouched();\r\n    this.ascRateForm.markAsPristine();\r\n  }\r\n\r\n  setPenalty(penaltyParam): boolean {\r\n    return penaltyParam === 'Yes' ? true : false;\r\n  }\r\n\r\n  compareMediumExecution(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.typeOfExecution === selected.typeOfExecution;\r\n    }\r\n  }\r\n\r\n  compareTypeOfMedium(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this ASC rate?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.ascRates, this.ascRate.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('ASC rate successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n"]}