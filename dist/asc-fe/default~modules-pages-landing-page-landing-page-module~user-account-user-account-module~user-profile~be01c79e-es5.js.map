{"version":3,"sources":["webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/maintenance/user-account/user-account-routing.module.ts","webpack:///src/app/core/models/eSignature.model.ts","webpack:///src/app/modules/pages/maintenance/user-account/user-account.component.html","webpack:///src/app/modules/pages/maintenance/user-account/user-account.component.ts","webpack:///src/app/modules/pages/maintenance/user-account/user-account.module.ts","webpack:///src/app/modules/pages/maintenance/user-account/user-account.component.scss"],"names":["routes","path","component","UserAccountRoutingModule","imports","forChild","exports","ESignature","UserAccountComponent","apiService","formBuilder","sweetAlertService","dataStorageService","validateFieldService","router","fileStorageService","spinner","sanitizer","dialog","dialogRef","data","displayedColumns","currentTab","userAccount","company","userRole","affiliation","eSign","userAccountList","userRoleList","companyList","affiliationList","displayTable","isShowUploadButton","previewDocument","passwordMatch","hidePassword","hideConfirmPassword","isFromUserProfile","isFromProfile","viewUserInformation","setFormValidator","getUserPerTypeList","getMaintenanceList","currentUserRole","getUserRole","username","toLowerCase","save","subscribe","res","undefined","customSuccessMessage","evt","index","name","ROLE_APPLICANT","accountInfo","reset","closeAll","err","customErrorMessage","error","message","console","log","resetFormValidator","ASC_USER","endpoint","updateUserAccount","update","isNewEntry","insert","updatedAccount","password","updatePassword","success","changeTab","i","findById","value","id","responseData","type","show","isAscUser","findAll","userAccountType","hide","dataSource","activeCompanies","activeMembersAffiliation","roles","selected","description","accountId","formListComponent","idForUpdate","signatureAttachmentReference","fileURL","originalFilename","membersAffiliation","getEsignature","selectFileButton","nativeElement","open","width","height","isFromModal","isUserRegistration","afterClosed","result","userInfo","group","firstName","required","middleName","lastName","mobileNumber","eSignature","userName","pattern","minLength","confirmPasswords","userAccountForm","companyInfo","markAsUntouched","markAsPristine","navigate","event","target","files","fileSize","size","URL","createObjectURL","safeURLSignature","bypassSecurityTrustResourceUrl","reader","FileReader","file","readAsDataURL","onload","selectedFile","uploadedSignatureFile","window","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","params","pushFileToStorage","signature","addToESignature","updateUserSignatureReference","hideSpinner","obj","filename","fileExtension","documentFormat","setTimeout","findByParam","adminResendVerificationCode","deleteById","selector","template","UserAccountModule","declarations"],"mappings":"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","file":"default~modules-pages-landing-page-landing-page-module~user-account-user-account-module~user-profile~be01c79e-es5.js","sourcesContent":["export * from './form-action-buttons/form-action-buttons.component';\r\nexport * from './form-list/form-list.component';","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { UserAccountComponent } from './user-account.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserAccountComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UserAccountRoutingModule { }\r\n","export class ESignature {\r\n    id: number;\r\n    accountId: number;\r\n    originalFilename: string;\r\n    filename: string;\r\n    fileExtension: string;\r\n    fileURL: string;\r\n    documentFormat: string;\r\n    signatureAttachmentReference: string;\r\n}\r\n","export default \"<form>\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12 title\\\">\\r\\n        <mat-label>\\r\\n          <span class=\\\"material-icons\\\">badge</span> User Account\\r\\n        </mat-label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <hr>\\r\\n\\r\\n    <mat-tab-group dynamicHeight *ngIf=\\\"isAscUser || userAccount.id\\\">\\r\\n      <!-- 1 -->\\r\\n      <mat-tab label=\\\"User Details\\\">\\r\\n        <form [formGroup]=\\\"userInfo\\\">\\r\\n          <div class=\\\"fields\\\">\\r\\n            <h4>\\r\\n              <mat-icon>label_important</mat-icon> Personal Information:\\r\\n            </h4>\\r\\n            <div class=\\\"row\\\">\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label> Given name: <span class=\\\"required-field\\\">\\r\\n                    <mat-icon>notification_important</mat-icon>\\r\\n                  </span></mat-label>\\r\\n                <input matInput [(ngModel)]=\\\"userAccount.firstName\\\" name=\\\"firstName\\\" formControlName=\\\"firstName\\\">\\r\\n              </mat-form-field>\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label> Middle name: </mat-label>\\r\\n                <input matInput [(ngModel)]=\\\"userAccount.middleName\\\" name=\\\"middleName\\\" formControlName=\\\"middleName\\\">\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label> Last name: <span class=\\\"required-field\\\">\\r\\n                    <mat-icon>notification_important</mat-icon>\\r\\n                  </span></mat-label>\\r\\n                <input matInput [(ngModel)]=\\\"userAccount.lastName\\\" name=\\\"lastName\\\" formControlName=\\\"lastName\\\">\\r\\n              </mat-form-field>\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label> Mobile Number: <mat-icon>notification_important</mat-icon></mat-label>\\r\\n                <input matInput [(ngModel)]=\\\"userAccount.mobileNumber\\\" name=\\\"mobileNumber\\\" placeholder=\\\"09xxxxxxxxx\\\"\\r\\n                  formControlName=\\\"mobileNumber\\\" (keydown)=\\\"validateFieldService.numbersOnly($event)\\\" maxlength=\\\"11\\\">\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row\\\">\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\"\\r\\n              *ngIf=\\\"currentUserRole==='ROLE_SUPER_ADMIN' || currentUserRole==='ROLE_ADMIN'\\\">\\r\\n                <mat-label> User Role <mat-icon>notification_important</mat-icon>\\r\\n                </mat-label>\\r\\n                <mat-select [(ngModel)]=\\\"userAccount.userRole\\\" name=\\\"userRole\\\" [compareWith]=\\\"compareUserRole\\\"\\r\\n                  formControlName=\\\"userRole\\\" matNativeControl [disabled]=\\\"userAccount?.userRole?.name=='ROLE_APPLICANT'\\\">\\r\\n                  <mat-option *ngFor=\\\"let i of userRoleList\\\" [value]=\\\"i\\\">\\r\\n                    {{ i?.name?.replaceAll('ROLE_', '')?.replace('_', ' ')?.replace('ENCODER', 'EVALUATOR') }}\\r\\n                  </mat-option>\\r\\n                </mat-select>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div>\\r\\n              <button class=\\\"col\\\" mat-raised-button color=\\\"warn\\\" *ngIf=\\\"userAccount?.firstName != undefined\\r\\n              && userAccount?.status === 'VERIFICATION_SENT' && userAccount?.accountType === 'APPLICANT'\\\" (click)=\\\"resendEmail()\\\">\\r\\n              <span class=\\\"material-icons\\\">mail</span> Resend Email Verification\\r\\n              </button>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"fields\\\" *ngIf=\\\"userAccount?.userRole?.name=='ROLE_APPLICANT' && !isAscUser\\\">\\r\\n            <h4>\\r\\n              <mat-icon>label_important</mat-icon> Company Information:\\r\\n            </h4>\\r\\n            <div class=\\\"row\\\">\\r\\n              <mat-form-field class=\\\"col-md-12\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label> Company <mat-icon>notification_important</mat-icon>\\r\\n                </mat-label>\\r\\n                <mat-select [(ngModel)]=\\\"userAccount.company\\\" name=\\\"company\\\" [compareWith]=\\\"compareCompany\\\"\\r\\n                  formControlName=\\\"company\\\" matNativeControl (selectionChange)=\\\"getSelectedCompany($event)\\\">\\r\\n                  <mat-option (click)=\\\"openCompanyComponent()\\\">\\r\\n                    <span class=\\\"badge bg-success dd\\\">Add New Company</span>\\r\\n                  </mat-option>\\r\\n                  <mat-option *ngFor=\\\"let i of companyList\\\" [value]=\\\"i\\\">\\r\\n                    {{i.companyName}}\\r\\n                  </mat-option>\\r\\n\\r\\n                </mat-select>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label> Member Affiliation</mat-label>\\r\\n                <input matInput [value]=\\\"userAccount?.company?.membersAffiliation?.description\\\"\\r\\n                  name=\\\"membersAffiliation\\\" readonly>\\r\\n              </mat-form-field>\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label> Company Number: <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n                <input matInput [value]=\\\"userAccount?.company?.companyMobileNo\\\" name=\\\"companyMobileNo\\\" readonly>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row\\\">\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label> Telephone Number: </mat-label>\\r\\n                <input matInput [value]=\\\"userAccount?.company?.companyTelephoneNo\\\" name=\\\"companyTelephoneNo\\\" readonly>\\r\\n              </mat-form-field>\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label> Alternative Telephone Number: </mat-label>\\r\\n                <input matInput [value]=\\\"userAccount?.company?.companyTelephoneNo2\\\" name=\\\"companyTelephoneNo2\\\" readonly>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row\\\">\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label> Contact Person: </mat-label>\\r\\n                <input matInput [value]=\\\"userAccount?.company?.contactPersonName\\\" name=\\\"contactPersonName\\\" readonly>\\r\\n              </mat-form-field>\\r\\n              <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label> Contact Person Email: </mat-label>\\r\\n                <input matInput [value]=\\\"userAccount?.company?.contactPersonEmail\\\" name=\\\"contactPersonEmail\\\" readonly>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"col-md-12\\\" *ngIf=\\\"!userAccount?.id\\\">\\r\\n            <b><b class=\\\"material-icons\\\">error_outline</b> Note: Proceed to Account Information to complete adding of ASC user.</b>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"container\\\">\\r\\n            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"insert(false)\\\" [disabled]=\\\"!userInfo?.valid\\\" *ngIf=\\\"userAccount?.id\\\"><i class=\\\"material-icons color__white\\\">offline_pin</i> UPDATE</button>\\r\\n              <br>\\r\\n          </div>\\r\\n        </form>\\r\\n      </mat-tab>\\r\\n\\r\\n      <!-- 2 -->\\r\\n      <mat-tab label=\\\"E-Signature\\\" *ngIf=\\\"userAccount?.userRole?.name !== 'ROLE_APPLICANT' && userAccount?.id\\\">\\r\\n        <form [formGroup]=\\\"eSignature\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12\\\" appearance=\\\"outline\\\">\\r\\n\\r\\n              <div class=\\\"row fields\\\">\\r\\n                <h4>\\r\\n                  <i class=\\\"material-icons\\\">upload</i> &nbsp;Upload e-Signature\\r\\n                </h4>\\r\\n                <br>\\r\\n\\r\\n                <div class=\\\"col-md-12\\\" appearance=\\\"outline\\\">\\r\\n                  <mat-label>Filename:  <mat-icon>notification_important</mat-icon></mat-label>\\r\\n                  <br>\\r\\n                  <br>\\r\\n                  <input #selectFileButton matInput [value]=\\\"eSign.originalFilename\\\" disabled\\r\\n                    *ngIf=\\\"eSign.originalFilename\\\">\\r\\n                  <input #selectFileButton class=\\\"file-upload\\\" type=\\\"file\\\" *ngIf=\\\"!eSign.originalFilename\\\" accept=\\\"image/*\\\"\\r\\n                    (change)=\\\"selectFile($event)\\\">\\r\\n                  <input type=\\\"hidden\\\" [(ngModel)]=\\\"eSign.signatureAttachmentReference\\\" formControlName=\\\"eSignature\\\">\\r\\n                  <br>\\r\\n                </div>\\r\\n                <div class=\\\"col-md-12\\\" appearance=\\\"outline\\\">\\r\\n\\r\\n                  <button mat-raised-button class=\\\"button-red button-right\\\" (click)=\\\"deleteESignature()\\\"\\r\\n                    *ngIf=\\\"eSign?.fileURL\\\">\\r\\n                    <i class=\\\"material-icons add-document color__white\\\">delete</i> DELETE E-SIGNATURE\\r\\n                  </button>\\r\\n\\r\\n                  <button mat-raised-button class=\\\"button-red button-right\\\" (click)=\\\"viewDocument()\\\"\\r\\n                    *ngIf=\\\"eSign?.signatureAttachmentReference\\\">\\r\\n                    <i class=\\\"material-icons add-document\\\">open_in_new</i> VIEW DOCUMENT\\r\\n                  </button>\\r\\n\\r\\n\\r\\n                  &nbsp; &nbsp;\\r\\n\\r\\n                  <button mat-raised-button class=\\\"button-red button-right\\\" (click)=\\\"uploadSignature()\\\"\\r\\n                    [disabled]=\\\"!safeURLSignature || !isShowUploadButton\\\" *ngIf=\\\"isShowUploadButton\\\">\\r\\n                    <i class=\\\"material-icons add-document color__white\\\">upload</i> UPLOAD\\r\\n                  </button>\\r\\n\\r\\n                  <br>\\r\\n                  <div class=\\\"row col-md-12\\\" appearance=\\\"outline\\\" *ngIf=\\\"previewDocument==true && (\\r\\n                          userAccount?.signatureAttachmentReference\\r\\n                        )\\\">\\r\\n                    <div class=\\\"file-upload\\\">\\r\\n                      <object [data]=\\\"safeURLSignature\\\" type=\\\"application/pdf\\\" width=\\\"100%\\\" height=\\\"400\\\">\\r\\n                        <iframe [src]=\\\"safeURLSignature\\\" width=\\\"100%\\\" height=\\\"400\\\">\\r\\n                          <p>This browser does not support PDF!</p>\\r\\n                        </iframe>\\r\\n                      </object>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"col-md-12\\\"><br></div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </form>\\r\\n      </mat-tab>\\r\\n\\r\\n      <!-- 3 -->\\r\\n      <mat-tab label=\\\"Account Information\\\">\\r\\n        <form [formGroup]=\\\"accountInfo\\\">\\r\\n          <ng-template matStepLabel>Account Information</ng-template>\\r\\n          <div class=\\\"row fields\\\">\\r\\n            <h4>\\r\\n              <mat-icon>label_important</mat-icon> Account Information:\\r\\n            </h4>\\r\\n            <div class=\\\"row\\\">\\r\\n              <mat-form-field class=\\\"col-md-12\\\" appearance=\\\"outline\\\">\\r\\n                <mat-label> Email Address: <span class=\\\"required-field\\\">\\r\\n                    <mat-icon>notification_important</mat-icon>\\r\\n                  </span></mat-label>\\r\\n                <input matInput [(ngModel)]=\\\"userAccount.username\\\" name=\\\"userName\\\" formControlName=\\\"userName\\\"\\r\\n                  type=\\\"email\\\" [readonly]=\\\"userAccount?.id\\\">\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n            <div class=\\\"row col-md-6\\\">\\r\\n              <mat-form-field appearance=\\\"outline\\\">\\r\\n                <mat-label> Password:\\r\\n                  <span class=\\\"required-field\\\">\\r\\n                    <mat-icon>notification_important</mat-icon>\\r\\n                  </span>\\r\\n                </mat-label>\\r\\n                <input matInput [type]=\\\"hidePassword ? 'password' : 'text'\\\" [(ngModel)]=\\\"userAccount.password\\\"\\r\\n                  name=\\\"password\\\" formControlName=\\\"password\\\">\\r\\n                <button type=\\\"button\\\" mat-icon-button matSuffix (click)=\\\"hidePassword = !hidePassword\\\"\\r\\n                  [attr.aria-label]=\\\"'Hide password'\\\" [attr.aria-pressed]=\\\"hidePassword\\\">\\r\\n                  <mat-icon>{{hidePassword ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                </button>\\r\\n              </mat-form-field>\\r\\n              <p *ngIf=\\\"accountInfo.get('password').dirty && accountInfo.controls['password'].errors\\\" class=\\\"badge\\\">\\r\\n                <mat-icon>warning</mat-icon>\\r\\n                Password must contain lower,upper case letter and number.\\r\\n              </p>\\r\\n            </div>\\r\\n            <div class=\\\"row col-md-6\\\">\\r\\n              <mat-form-field appearance=\\\"outline\\\">\\r\\n                <mat-label> Confirm Password:\\r\\n                  <span class=\\\"required-field\\\">\\r\\n                    <mat-icon>notification_important</mat-icon>\\r\\n                  </span>\\r\\n                </mat-label>\\r\\n                <input matInput [type]=\\\"hideConfirmPassword ? 'password' : 'text'\\\" [(ngModel)]=\\\"confirmPasswords\\\"\\r\\n                  name=\\\"confirmPasswords\\\" formControlName=\\\"confirmPasswords\\\"\\r\\n                  (keyup)=\\\"confirmPassword(confirmPasswords)\\\">\\r\\n                <button type=\\\"button\\\" mat-icon-button matSuffix (click)=\\\"hideConfirmPassword = !hideConfirmPassword\\\"\\r\\n                  [attr.aria-label]=\\\"'Hide password'\\\" [attr.aria-pressed]=\\\"hideConfirmPassword\\\">\\r\\n                  <mat-icon>{{hideConfirmPassword ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                </button>\\r\\n              </mat-form-field>\\r\\n              <p *ngIf=\\\"accountInfo.get('confirmPasswords').dirty && !passwordMatch\\\" class=\\\"badge\\\">\\r\\n                <mat-icon>warning</mat-icon>\\r\\n                Password not match\\r\\n              </p>\\r\\n            </div>\\r\\n          </div>\\r\\n        </form>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-md-12\\\">\\r\\n            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"insert(true)\\\" [disabled]=\\\"!userInfo?.valid || !accountInfo?.valid || !userAccount?.userRole || !userAccount?.password || !confirmPasswords\\\"\\r\\n            *ngIf=\\\"!userAccount?.id\\\"><i class=\\\"material-icons color__white\\\">offline_pin</i> SAVE</button>\\r\\n            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"updateCredentials()\\\" [disabled]=\\\"!accountInfo?.valid\\\" [hidden]=\\\"!userAccount?.id\\\"><i class=\\\"material-icons color__white\\\">offline_pin</i> UPDATE</button>  \\r\\n          </div>\\r\\n        </div>\\r\\n      </mat-tab>\\r\\n    </mat-tab-group>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <br>\\r\\n      <div class=\\\"container\\\">\\r\\n        <mat-tab-group mat-align-tabs=\\\"start\\\" (selectedTabChange)=\\\"changeTab($event)\\\" *ngIf=\\\"!isFromUserProfile\\\">\\r\\n          <!-- displayed columns will be changed in changeTab() -->\\r\\n          <mat-tab label=\\\"Non ASC users\\\">\\r\\n\\r\\n          </mat-tab>\\r\\n          <mat-tab label=\\\"ASC users\\\">\\r\\n\\r\\n          </mat-tab>\\r\\n        </mat-tab-group>\\r\\n        <br>\\r\\n        <span *ngIf=\\\"!isFromUserProfile && displayTable\\\">\\r\\n          <app-form-list [dataSource]=\\\"dataSource\\\"\\r\\n            [displayedColumns]=\\\"displayedColumns\\\" (selectInListFunction)=\\\"viewUserInformation()\\\">\\r\\n          </app-form-list>\\r\\n        </span>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</form>\\r\\n\";","import { Component, ElementRef, Inject, OnInit, Optional, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatStepper } from '@angular/material/stepper';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Router } from '@angular/router';\r\nimport { FormListComponent } from '@fragments';\r\nimport { Affiliation, Company, UserAccount, UserRole } from '@models';\r\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\r\nimport { ACCOUNT_TYPE, ENDPOINTS, USER_ROLES } from '@shared';\r\nimport { ESignature } from 'app/core/models/eSignature.model';\r\nimport { FileStorageService } from 'app/core/services/file.storage.service';\r\nimport { ValidateFieldService } from 'app/core/services/validate-field.service';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport Swal from 'sweetalert2';\r\nimport { AddCompanyComponent } from '../../company/add-company/add-company.component';\r\n\r\n@Component({\r\n  selector: 'app-user-account',\r\n  templateUrl: './user-account.component.html',\r\n  styleUrls: ['./user-account.component.scss']\r\n})\r\nexport class UserAccountComponent implements OnInit {\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  @ViewChild('stepper') stepper: MatStepper;\r\n  @ViewChild('selectFileButton', { static: false }) selectFileButton: ElementRef;\r\n  dataSource: MatTableDataSource<UserAccount>;\r\n  displayedColumns: string[] = [\r\n    'firstName',\r\n    'lastName',\r\n    'companyDescription',\r\n    'emailAddress',\r\n    'mobileNumber',\r\n    'status'\r\n  ];\r\n  currentTab: string = \"NONASC\";\r\n  userAccount = new UserAccount();\r\n  company = new Company();\r\n  userRole = new UserRole();\r\n  affiliation = new Affiliation();\r\n  eSign = new ESignature();\r\n\r\n  userAccountForm: FormGroup;\r\n  userInfo: FormGroup;\r\n  companyInfo: FormGroup;\r\n  eSignature: FormGroup;\r\n  accountInfo: FormGroup;\r\n  userAccountList = [];\r\n  userRoleList = [];\r\n  companyList = [];\r\n  affiliationList = [];\r\n\r\n  displayTable = false;\r\n  isShowUploadButton = false;\r\n  previewDocument = false;\r\n  safeURLSignature: any;\r\n  selectedFile: File;\r\n  fileSize: number;\r\n  uploadedSignatureFile: any;\r\n\r\n  passwordMatch = false;\r\n  hidePassword = true;\r\n  hideConfirmPassword = true;\r\n  confirmPasswords: any;\r\n  isFromUserProfile = false;\r\n  currentUserRole: any;\r\n\r\n  isAscUser: boolean;\r\n  //isUpdateAscUser: boolean;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n    private dataStorageService: DataStorageService,\r\n    public validateFieldService: ValidateFieldService,\r\n    private router: Router,\r\n    private fileStorageService: FileStorageService,\r\n    private spinner: NgxSpinnerService,\r\n    private sanitizer: DomSanitizer,\r\n    private dialog: MatDialog,\r\n    @Optional() public dialogRef: MatDialogRef<UserAccountComponent>,\r\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any) {\r\n    if (data) {\r\n      this.isFromUserProfile = data.isFromProfile;\r\n      this.userAccount = data.userAccount;\r\n      this.viewUserInformation();\r\n    }\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.setFormValidator();\r\n    this.getUserPerTypeList();\r\n    this.getMaintenanceList();\r\n    // alert(this.isFromUserProfile)\r\n    this.currentUserRole = this.dataStorageService.getUserRole();\r\n\r\n  }\r\n\r\n  save(): void {\r\n    this.userAccount.username = this.userAccount.username.toLowerCase();\r\n    if (this.currentUserRole === 'ROLE_SUPER_ADMIN' || this.currentUserRole === 'ROLE_ADMIN') {\r\n      this.userAccount.company = null;\r\n    }\r\n    // this.apiService.save(ENDPOINTS.addUserAccount, this.userAccount).subscribe(\r\n    this.apiService.save(ENDPOINTS.userAccount, this.userAccount).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.customSuccessMessage('Account has been created successfully.');\r\n          const evt = { index: null };\r\n          if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\r\n            evt.index = 0;\r\n          } else {\r\n            evt.index = 1;\r\n          }\r\n          this.accountInfo.reset();\r\n          if (this.isFromUserProfile) {\r\n            this.dialog.closeAll();\r\n          }\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.customErrorMessage(err?.error?.message ? err.error.message : err.error);\r\n        console.log('ERROR:::', err);\r\n\r\n      }, () => {\r\n        this.resetFormValidator();\r\n        if(this.currentTab==\"NONASC\")this.getUserPerTypeList();\r\n        else if(this.currentTab==\"ASC\")this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\r\n        this.userAccount = new UserAccount();\r\n      });\r\n  }\r\n\r\n  update(): void {\r\n    console.log('update')\r\n    const endpoint = this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT ? ENDPOINTS.userAccount : ENDPOINTS.updateUserAccount;\r\n    this.apiService.update(endpoint, this.userAccount).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          // this.updateCredentials();\r\n          this.sweetAlertService.customSuccessMessage('Account was successfully updated');\r\n          const evt = { index: null };\r\n          console.log(this.userAccount);\r\n\r\n          if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\r\n            evt.index = 0;\r\n          } else {\r\n            evt.index = 1;\r\n          }\r\n          // this.changeTab(evt);\r\n          this.accountInfo.reset();\r\n          \r\n          if (this.isFromUserProfile) {\r\n            this.dialog.closeAll();\r\n          }\r\n        }\r\n      }, (err: any) => {\r\n        console.log(err);\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        \r\n        if(this.currentTab==\"NONASC\")this.getUserPerTypeList();\r\n        else if(this.currentTab==\"ASC\")this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\r\n        this.userAccount = new UserAccount();\r\n        this.resetFormValidator();\r\n      });\r\n  }\r\n\r\n\r\n  insert(isNewEntry: boolean): void {\r\n    this.userAccount.username = this.userAccount.username.toLowerCase();\r\n    if (this.currentUserRole === 'ROLE_SUPER_ADMIN' || this.currentUserRole === 'ROLE_ADMIN') {\r\n      this.userAccount.company = null;\r\n    }\r\n    // this.apiService.save(ENDPOINTS.addUserAccount, this.userAccount).subscribe(\r\n    this.apiService.insert(ENDPOINTS.userAccount, this.userAccount, isNewEntry).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.customSuccessMessage(\r\n            isNewEntry? 'Account has been created successfully.': 'Account was successfully updated'\r\n          );\r\n          const evt = { index: null };\r\n          if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\r\n            evt.index = 0;\r\n          } else {\r\n            evt.index = 1;\r\n          }\r\n          this.accountInfo.reset();\r\n          if (this.isFromUserProfile) {\r\n            this.dialog.closeAll();\r\n          }\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.customErrorMessage(err?.error?.message ? err.error.message : err.error);\r\n        console.log('ERROR:::', err);\r\n\r\n      }, () => {\r\n        this.resetFormValidator();\r\n        if(this.currentTab==\"NONASC\")this.getUserPerTypeList();\r\n        else if(this.currentTab==\"ASC\")this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\r\n        this.userAccount = new UserAccount();\r\n      });\r\n  }\r\n\r\n  updateCredentials() {\r\n    const updatedAccount = {\r\n      password: this.userAccount.password,\r\n      username: this.userAccount.username,\r\n      userRole: this.userAccount.userRole\r\n    }\r\n    this.apiService.update(ENDPOINTS.updatePassword, updatedAccount).subscribe((res: any) => {\r\n      if (res !== undefined) {\r\n        this.sweetAlertService.success(res);\r\n        const evt = { index: null };\r\n        if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\r\n          evt.index = 0;\r\n        } else {\r\n          evt.index = 1;\r\n        }\r\n        this.changeTab(evt);\r\n        this.accountInfo.reset();\r\n      }\r\n    });\r\n  }\r\n\r\n  delete(): void {\r\n\r\n  }\r\n\r\n  getSelectedCompany(i): void {\r\n    if (i) {\r\n      this.apiService.findById(ENDPOINTS.company, i.value.id).subscribe(\r\n        (res: any) => {\r\n          this.company = res.responseData.data;\r\n        });\r\n    }\r\n  }\r\n\r\n  getUserPerTypeList(type = 'APPLICANT'): void {\r\n    this.spinner.show();\r\n    this.displayTable = false;\r\n\r\n    this.isAscUser = type !== 'APPLICANT';\r\n\r\n    this.apiService.findAll(`${ENDPOINTS.userAccountType}/${type}`).subscribe(\r\n      (res: any) => {\r\n        this.userAccountList = res.responseData.data;\r\n        this.displayTable = true;\r\n        this.spinner.hide();\r\n        this.dataSource = new MatTableDataSource<UserAccount>(res.responseData.data);\r\n        // this.dataSource.paginator = this.formListComponent.paginator;\r\n        // this.dataSource.sort = this.formListComponent.sort;\r\n      }\r\n    )\r\n  }\r\n\r\n  getMaintenanceList(): void {\r\n    this.apiService.findAll(ENDPOINTS.activeCompanies).subscribe((res: any) => {\r\n      this.companyList = res.responseData.data;\r\n    }, (err: any) => {\r\n    });\r\n    this.apiService.findAll(ENDPOINTS.activeMembersAffiliation).subscribe((res: any) => {\r\n      this.affiliationList = res.responseData.data;\r\n    }, (err: any) => {\r\n    });\r\n    this.apiService.findAll(ENDPOINTS.roles).subscribe((res: any) => {\r\n      this.userRoleList = res.responseData.data;\r\n    }, (err: any) => {\r\n    });\r\n\r\n  }\r\n\r\n  compareMembersAffiliation(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  compareCompany(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.id === selected.id;\r\n    }\r\n  }\r\n\r\n  compareUserRole(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.id === selected.id;\r\n    }\r\n  }\r\n\r\n  confirmPassword(password): void {\r\n    if (this.userAccount.password === password) {\r\n      this.passwordMatch = true;\r\n    } else {\r\n      this.passwordMatch = false;\r\n    }\r\n  }\r\n\r\n  // get password() {\r\n  //   let password = this.accountInfo.controls[\"password\"].value;\r\n  //   if (password === null || password === '' || password === undefined) {\r\n  //     this.accountInfo.controls['password'].clearValidators();\r\n  //     this.accountInfo.controls[\"confirmPasswords\"].clearValidators();\r\n  //   } else {\r\n  //     this.accountInfo.controls['password'].setValidators([Validators.required, Validators.pattern('((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'), Validators.minLength(8)]);\r\n  //     this.accountInfo.controls[\"confirmPasswords\"].setValidators([Validators.required]);\r\n  //   }\r\n  //   this.accountInfo.controls['password'].updateValueAndValidity();\r\n  //   this.accountInfo.controls['confirmPasswords'].updateValueAndValidity();\r\n  //   return this.accountInfo.controls[\"password\"].value\r\n  // }\r\n  viewUserInformation(): void {\r\n    // if (this.isAscUser || this.userAccount.id) {\r\n    //   this.stepper.selectedIndex = 0;\r\n    // }\r\n    const accountId = this.formListComponent?.idForUpdate ?\r\n    this.formListComponent.idForUpdate : this.userAccount.id;\r\n\r\n    this.eSign.signatureAttachmentReference = null;\r\n    this.eSign.fileURL = null;\r\n    this.eSign.originalFilename = null;\r\n    this.apiService.findById(ENDPOINTS.userAccount, accountId).subscribe(\r\n      (res: any) => {\r\n        this.userAccount = res.responseData.data;\r\n        this.company = res.responseData.data.company;\r\n        this.affiliation = this.userAccount.company.membersAffiliation;\r\n        this.userRole = this.userAccount.userRole;\r\n        if (this.userAccount.signatureAttachmentReference) {\r\n          this.getEsignature()\r\n        } else {\r\n          this.selectFileButton.nativeElement.value = '';\r\n        }\r\n      });\r\n  }\r\n\r\n  openCompanyComponent(): void {\r\n    const dialogRef = this.dialog.open(AddCompanyComponent, {\r\n      width: '80%',\r\n      height: '85%',\r\n      data: {\r\n        isFromModal: true,\r\n        isUserRegistration: true\r\n      }\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      console.log('The dialog was closed', result);\r\n      if (result) {\r\n        this.company = result;\r\n      }\r\n      this.getUserPerTypeList();\r\n    });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.userInfo = this.formBuilder.group({\r\n      firstName: ['', Validators.required],\r\n      middleName: [''],\r\n      lastName: ['', Validators.required],\r\n      mobileNumber: ['', Validators.required],\r\n      userRole: [''],\r\n      company: [''],\r\n    });\r\n    this.eSignature = this.formBuilder.group({\r\n      eSignature: ['', Validators.required],\r\n    });\r\n\r\n    if (!this.isFromUserProfile) {\r\n      this.accountInfo = this.formBuilder.group({\r\n        userName: ['', [Validators.required, Validators.pattern('[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}')]],\r\n        // userRole: ['', Validators.required],\r\n        userRole: [''],\r\n        password: ['', [Validators.required, Validators.pattern('((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'), Validators.minLength(8)]],\r\n        confirmPasswords: ['', Validators.required],\r\n      });\r\n    } else {\r\n      this.accountInfo = this.formBuilder.group({\r\n        userName: ['', [Validators.required, Validators.pattern('[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}')]],\r\n        password: ['', Validators.required],\r\n        confirmPasswords: ['', Validators.required],\r\n      });\r\n    }\r\n    this.userAccountForm = new FormGroup({\r\n      userInfo: new FormControl(),\r\n      companyInfo: new FormControl(),\r\n      eSignature: new FormControl(),\r\n      accountInfo: new FormControl(),\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.userAccount = new UserAccount();\r\n    this.company = new Company();\r\n    this.affiliation = new Affiliation();\r\n    this.previewDocument = false;\r\n    this.userAccountForm.markAsUntouched();\r\n    this.userAccountForm.markAsPristine();\r\n    this.dialog.closeAll();\r\n    if (this.isFromUserProfile) {\r\n      this.dialog.closeAll();\r\n    } else {\r\n      this.router.navigate(['asc/page/maintenance/accounts']);\r\n    }\r\n\r\n  }\r\n\r\n  changeTab(evt) {\r\n    this.userAccount = new UserAccount();\r\n    this.resetFormValidator();\r\n    if (evt.index === 0) {\r\n      this.currentTab=\"NONASC\";\r\n      //     this.isUpdateAscUser = false;\r\n      this.getUserPerTypeList();\r\n      this.displayedColumns = [\r\n        'firstName',\r\n        'lastName',\r\n        'companyDescription',\r\n        'emailAddress',\r\n        'mobileNumber',\r\n        'status'\r\n      ];\r\n    } else if (evt.index === 1) {\r\n      this.currentTab=\"ASC\";\r\n      //     this.isUpdateAscUser = true;\r\n      this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\r\n      this.displayedColumns = [\r\n        'firstName',\r\n        'lastName',\r\n        'userRole',\r\n        'emailAddress',\r\n        'status'\r\n      ];\r\n    }\r\n  }\r\n\r\n  selectFile(event) {\r\n    this.isShowUploadButton = false;\r\n\r\n    if (event.target.files[0]) {\r\n      this.fileSize = event.target.files[0].size;\r\n\r\n      if (this.fileSize > 15000000) {\r\n        this.sweetAlertService.customErrorMessage(`Attachments total file size should not exceed 15MB.`);\r\n        event.target.value = '';\r\n        return;\r\n\r\n      } else {\r\n        this.isShowUploadButton = true;\r\n        const fileURL = URL.createObjectURL(event.target.files[0]);\r\n        this.previewDocument = true;\r\n\r\n        this.safeURLSignature = this.sanitizer.bypassSecurityTrustResourceUrl(fileURL);\r\n\r\n        const reader = new FileReader();\r\n        const [file] = event.target.files;\r\n\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => {\r\n        };\r\n\r\n        this.selectedFile = event.target.files[0];\r\n      }\r\n    }\r\n  }\r\n\r\n  viewDocument() {\r\n    if (this.uploadedSignatureFile) {\r\n      window.open(this.uploadedSignatureFile.fileURL);\r\n    } else {\r\n      window.open(this.eSign.fileURL);\r\n    }\r\n  }\r\n\r\n  uploadSignature() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to upload this as e-Signature?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.spinner.show();\r\n\r\n        // TODO: CHANGE ATTACHMENT TYPE WHEN SIGNATURE IS AVAILABLE IN BE\r\n        const accountId = this.formListComponent?.idForUpdate ?\r\n          this.formListComponent.idForUpdate : this.userAccount.id;\r\n        const params = `?accountId=${accountId}`;\r\n\r\n        this.fileStorageService.pushFileToStorage(ENDPOINTS.signature, this.selectedFile, params)\r\n          .subscribe((res: any) => {\r\n            this.uploadedSignatureFile = res.responseData.data;\r\n\r\n            this.addToESignature(this.uploadedSignatureFile);\r\n\r\n            this.userAccount.signatureAttachmentReference = this.uploadedSignatureFile.signatureAttachmentReference;\r\n            this.updateUserSignatureReference();\r\n            this.hideSpinner();\r\n            this.sweetAlertService.customSuccessMessage('Signature successfully uploaded.');\r\n            this.selectedFile = null;\r\n\r\n            this.getEsignature();\r\n            this.isShowUploadButton = false;\r\n\r\n          }, (err: any) => {\r\n            this.hideSpinner();\r\n            this.sweetAlertService.error(err);\r\n          }, () => {\r\n            this.hideSpinner();\r\n          });\r\n      } else {\r\n        this.selectedFile = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  updateUserSignatureReference() {\r\n    const endpoint = this.isAscUser ? ENDPOINTS.userAccount : ENDPOINTS.updateUserAccount;\r\n    this.apiService.update(endpoint, this.userAccount).subscribe(\r\n      (res: any) => {\r\n        console.log(res);\r\n      });\r\n  }\r\n\r\n  addToESignature(obj: any) {\r\n    this.eSign.signatureAttachmentReference = obj.signatureAttachmentReference;\r\n    this.eSign.id = obj.id;\r\n    this.eSign.originalFilename = obj.originalFilename;\r\n    this.eSign.filename = obj.filename;\r\n    this.eSign.fileExtension = obj.fileExtension;\r\n    this.eSign.fileURL = obj.fileURL;\r\n    this.eSign.accountId = obj.accountId;\r\n    this.eSign.documentFormat = obj.documentFormat;\r\n  }\r\n\r\n  hideSpinner() {\r\n    setTimeout(() => {\r\n      this.spinner.hide();\r\n    }, 1);\r\n  }\r\n\r\n  getEsignature() {\r\n    const accountId = this.formListComponent?.idForUpdate ?\r\n      this.formListComponent.idForUpdate : this.userAccount.id;\r\n    this.spinner.show();\r\n\r\n    this.apiService.findByParam(`${ENDPOINTS.signature}/account-id`, accountId).subscribe(\r\n      (res: any) => {\r\n        if (res) {\r\n          this.eSign = res?.responseData?.data;\r\n        }\r\n        this.hideSpinner();\r\n      }, (err: any) => {\r\n        this.hideSpinner();\r\n        console.error(err);\r\n      });\r\n  }\r\n\r\n  resendEmail(): void {\r\n    this.apiService.save(ENDPOINTS.adminResendVerificationCode + `/${this.userAccount.username}`, this.userAccount).subscribe(\r\n      (res: any) => {\r\n        this.sweetAlertService.customSuccessMessage('Email verification has been sent');\r\n      }\r\n    )\r\n  }\r\n\r\n  deleteESignature(): void {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to upload this as e-Signature?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.spinner.show();\r\n        this.apiService.deleteById(ENDPOINTS.signature, this.eSign?.id).subscribe(\r\n          res => {\r\n            this.eSign = new ESignature();\r\n            this.previewDocument = false;\r\n            this.spinner.hide();\r\n          }, err => this.spinner.hide());\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { UserAccountRoutingModule } from './user-account-routing.module';\r\nimport { UserAccountComponent } from './user-account.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [UserAccountComponent],\r\n  imports: [\r\n    CommonModule,\r\n    UserAccountRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule\r\n  ]\r\n})\r\nexport class UserAccountModule { }\r\n","export default \".container-fluid ::ng-deep .mat-step-header .mat-step-icon {\\n  background-color: #850000;\\n}\\n.container-fluid ::ng-deep .mat-step-header .mat-step-icon-selected {\\n  background-color: #348f00;\\n  zoom: 1.8;\\n}\\n.container-fluid .title {\\n  padding-left: 10px;\\n}\\n.container-fluid .title mat-label {\\n  font-size: 25px;\\n  font-weight: 600;\\n  color: #9c0000;\\n}\\n.container-fluid label {\\n  font-size: 12px;\\n  font-weight: 600;\\n}\\n.container-fluid p {\\n  font-weight: 400;\\n  color: gray;\\n  font-size: 12px;\\n}\\n.container-fluid .button-content {\\n  text-align: center;\\n}\\n.container-fluid .badge {\\n  margin-top: -15px;\\n  font-size: 15px;\\n  color: red;\\n}\\n.container-fluid .dd {\\n  float: left;\\n  font-size: 15px;\\n  margin: 10px 0px 0px 0px;\\n  font-weight: 500;\\n}\\n.requiredIcon ::ng-deep .ng-placeholder::after {\\n  font-family: \\\"Material Icons\\\";\\n  color: #850000;\\n  content: \\\"notification_important\\\";\\n}\\nbody {\\n  max-height: 150px;\\n  overflow-y: scroll;\\n  background-color: red;\\n}\\n::ng-deep .mat-tab-label .mat-tab-label-content {\\n  font-weight: bold;\\n}\\n.fields {\\n  padding: 0px 10px;\\n}\\nh4 {\\n  margin: 16px 0px 16px -10px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9wYWdlcy9tYWludGVuYW5jZS91c2VyLWFjY291bnQvdXNlci1hY2NvdW50LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdFO0VBQ0UseUJBQUE7QUFGSjtBQU1FO0VBQ0UseUJBQUE7RUFDQSxTQUFBO0FBSko7QUFPRTtFQUNFLGtCQUFBO0FBTEo7QUFPSTtFQUNFLGVBQUE7RUFDQSxnQkFBQTtFQUNBLGNBQUE7QUFMTjtBQVNFO0VBQ0UsZUFBQTtFQUNBLGdCQUFBO0FBUEo7QUFVRTtFQUNFLGdCQUFBO0VBQ0EsV0FBQTtFQUNBLGVBQUE7QUFSSjtBQVdFO0VBQ0Usa0JBQUE7QUFUSjtBQVlFO0VBR0UsaUJBQUE7RUFDQSxlQUFBO0VBQ0EsVUFBQTtBQVpKO0FBZUU7RUFDRSxXQUFBO0VBQ0EsZUFBQTtFQUNBLHdCQUFBO0VBQ0EsZ0JBQUE7QUFiSjtBQW9CQTtFQUNFLDZCQUFBO0VBQ0EsY0FBQTtFQUNBLGlDQUFBO0FBakJGO0FBb0JBO0VBQ0UsaUJBQUE7RUFDQSxrQkFBQTtFQUNBLHFCQUFBO0FBakJGO0FBMkJFO0VBQ0UsaUJBQUE7QUF4Qko7QUE2QkE7RUFDRSxpQkFBQTtBQTFCRjtBQTZCQTtFQUNFLDJCQUFBO0FBMUJGIiwiZmlsZSI6InNyYy9hcHAvbW9kdWxlcy9wYWdlcy9tYWludGVuYW5jZS91c2VyLWFjY291bnQvdXNlci1hY2NvdW50LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lci1mbHVpZCB7XHJcbiAgLy8gcGFkZGluZzogMTBweCA0MHB4O1xyXG5cclxuICA6Om5nLWRlZXAgLm1hdC1zdGVwLWhlYWRlciAubWF0LXN0ZXAtaWNvbiB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTMzLCAwLCAwKTtcclxuXHJcbiAgfVxyXG5cclxuICA6Om5nLWRlZXAgLm1hdC1zdGVwLWhlYWRlciAubWF0LXN0ZXAtaWNvbi1zZWxlY3RlZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNTIsIDE0MywgMCk7XHJcbiAgICB6b29tOiAxLjg7XHJcbiAgfVxyXG5cclxuICAudGl0bGUge1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xyXG5cclxuICAgIG1hdC1sYWJlbCB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMjVweDtcclxuICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgICAgY29sb3I6IHJnYigxNTYsIDAsIDApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGFiZWwge1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICB9XHJcblxyXG4gIHAge1xyXG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgIGNvbG9yOiBncmF5O1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gIH1cclxuXHJcbiAgLmJ1dHRvbi1jb250ZW50IHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB9XHJcblxyXG4gIC5iYWRnZSB7XHJcbiAgICAvLyAgZmxvYXQ6IHJpZ2h0O1xyXG4gICAgLy8gd2lkdGg6IGF1dG87XHJcbiAgICBtYXJnaW4tdG9wOiAtMTVweDtcclxuICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICAgIGNvbG9yOiByZWQ7XHJcbiAgfVxyXG5cclxuICAuZGQge1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICBtYXJnaW46IDEwcHggMHB4IDBweCAwcHg7XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbm5nLXNlbGVjdCB7fVxyXG5cclxuLnJlcXVpcmVkSWNvbiA6Om5nLWRlZXAgLm5nLXBsYWNlaG9sZGVyOjphZnRlciB7XHJcbiAgZm9udC1mYW1pbHk6IFwiTWF0ZXJpYWwgSWNvbnNcIjtcclxuICBjb2xvcjogIzg1MDAwMDtcclxuICBjb250ZW50OiBcIm5vdGlmaWNhdGlvbl9pbXBvcnRhbnRcIjtcclxufVxyXG5cclxuYm9keSB7XHJcbiAgbWF4LWhlaWdodDogMTUwcHg7XHJcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHJlZDtcclxufVxyXG5cclxuOjpuZy1kZWVwIHtcclxuICBtYXQtdGFiLWdyb3VwIHtcclxuICAgIC8vIGJhY2tncm91bmQ6ICNmZmE2YTIgIWltcG9ydGFudDtcclxuICAgIC8vIGJvcmRlcjogMXB4IHNvbGlkIHJlZCAhaW1wb3J0YW50O1xyXG4gICAgLy8gYm9yZGVyLXJhZGl1czogMjBweCAyMHB4IDAgMDtcclxuICB9XHJcblxyXG4gIC5tYXQtdGFiLWxhYmVsIC5tYXQtdGFiLWxhYmVsLWNvbnRlbnQge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfVxyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLmZpZWxkcyB7XHJcbiAgcGFkZGluZzogMHB4IDEwcHg7XHJcbn1cclxuXHJcbmg0IHtcclxuICBtYXJnaW46IDE2cHggMHB4IDE2cHggLTEwcHg7XHJcbn1cclxuIl19 */\";"]}