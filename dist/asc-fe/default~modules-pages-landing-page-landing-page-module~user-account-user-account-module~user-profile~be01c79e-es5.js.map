{"version":3,"sources":["webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/maintenance/user-account/user-account-routing.module.ts","webpack:///src/app/core/models/eSignature.model.ts","webpack:///src/app/modules/pages/maintenance/user-account/user-account.component.ts","webpack:///src/app/modules/pages/maintenance/user-account/user-account.component.html","webpack:///src/app/modules/pages/maintenance/user-account/user-account.module.ts"],"names":["routes","path","component","UserAccountRoutingModule","forChild","ESignature","validateFieldService","UserAccountComponent","apiService","formBuilder","sweetAlertService","dataStorageService","router","fileStorageService","spinner","sanitizer","dialog","dialogRef","data","displayedColumns","currentTab","userAccount","company","userRole","affiliation","eSign","userAccountList","userRoleList","companyList","affiliationList","displayTable","isShowUploadButton","previewDocument","passwordMatch","hidePassword","hideConfirmPassword","isFromUserProfile","isFromProfile","viewUserInformation","setFormValidator","getUserPerTypeList","getMaintenanceList","currentUserRole","getUserRole","username","toLowerCase","save","subscribe","res","undefined","customSuccessMessage","evt","index","name","ROLE_APPLICANT","accountInfo","reset","closeAll","err","customErrorMessage","error","message","console","log","resetFormValidator","ASC_USER","endpoint","updateUserAccount","update","isNewEntry","insert","updatedAccount","password","updatePassword","success","changeTab","i","findById","value","id","responseData","type","show","isAscUser","findAll","userAccountType","hide","dataSource","activeCompanies","activeMembersAffiliation","roles","selected","description","accountId","formListComponent","idForUpdate","signatureAttachmentReference","fileURL","originalFilename","membersAffiliation","getEsignature","selectFileButton","nativeElement","open","width","height","isFromModal","isUserRegistration","afterClosed","result","userInfo","group","firstName","required","middleName","lastName","mobileNumber","eSignature","userName","pattern","minLength","confirmPasswords","userAccountForm","companyInfo","markAsUntouched","markAsPristine","navigate","event","target","files","fileSize","size","URL","createObjectURL","safeURLSignature","bypassSecurityTrustResourceUrl","reader","FileReader","file","readAsDataURL","onload","selectedFile","uploadedSignatureFile","window","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","params","pushFileToStorage","signature","addToESignature","updateUserSignatureReference","hideSpinner","obj","filename","fileExtension","documentFormat","setTimeout","findByParam","adminResendVerificationCode","deleteById","UserAccountModule"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAAA;MAAA;;;MAAA;MAAA;MAAA;MAAA;;;MAAA;QAAA;MAAA;MAAA;;;MAAA;MAAA;MAAA;MAAA;;;MAAA;QAAA;MAAA;;;;;;;;;;;;;;;;;MCAA;MAAA;;;MAAA;QAAA;MAAA;MAAA;;;MAAA;MAAA;MAAA;MAAA;;;MAAA;MAAA;MAAA;MAAA;;;MAAA;MAAA;MAAA;;MAIA,IAAMA,MAAM,GAAW,CACrB;QACEC,IAAI,EAAE,EADR;QAEEC,SAAS,EAAE;MAFb,CADqB,CAAvB;;MAWO;QAAA,IAAMC,wBAAN;UAAA;QAAA;;;gBAAMA;;;;6BAAAA,wB;UAAwB,C;UAAA,UAH1B,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAG0B,EAFzB,4DAEyB;;;OAA9B;;;4HAAMG,wB,EAAwB;UAAA;UAAA,UAFzB,4DAEyB;QAAA,C;MAFb,C;;;;;;;;;;;;;;;;;MCbxB;MAAA;;;MAAA;QAAA;MAAA;;UAAaE,U;;;;;;;;;;;;;;;;;;;MCAboDkB;;UACE;;UACF;;;;;;;;UAF2C;;UACzC;;UAAA;;;;;;;;UAPN;;UAEE;;UAAY;;UAAU;;UAAU;;UAAsB;;UACtD;;UACA;;UAAY;YAAA;;YAAA;;YAAA;UAAA;;UAEV;;UAGF;;UACF;;;;;;UANc;;UAAA,iGAAkC,aAAlC,EAAkC,sBAAlC,EAAkC,UAAlC,EAAkC,uIAAlC;;UAEE;;UAAA;;;;;;;;UAQhB;;UAC4F;YAAA;;YAAA;;YAAA;UAAA;;UAC5F;;UAA6B;;UAAI;;UAAQ;;UACzC;;;;;;UAiBI;;UACE;;UACF;;;;;;UAF0C;;UACxC;;UAAA;;;;;;;;UAdV;;UACE;;UACE;;UAAU;;UAAe;;UAAY;;UACvC;;UACA;;UACE;;UACE;;UAAY;;UAAQ;;UAAU;;UAAsB;;UACpD;;UACA;;UAAY;YAAA;;YAAA;;YAAA;UAAA,GAAiC,iBAAjC,EAAiC;YAAA;;YAAA;;YAAA;UAAA,CAAjC;;UAEV;;UAAY;YAAA;;YAAA;;YAAA;UAAA;;UACV;;UAAkC;;UAAe;;UACnD;;UACA;;UAIF;;UACF;;UACF;;UACA;;UACE;;UACE;;UAAY;;UAAkB;;UAC9B;;UAEF;;UACA;;UACE;;UAAY;;UAAgB;;UAA6B;;UAAC;;UAAO;;UACjE;;UACF;;UACF;;UAEA;;UACE;;UACE;;UAAY;;UAAkB;;UAC9B;;UACF;;UACA;;UACE;;UAAY;;UAA8B;;UAC1C;;UACF;;UACF;;UAEA;;UACE;;UACE;;UAAY;;UAAgB;;UAC5B;;UACF;;UACA;;UACE;;UAAY;;UAAsB;;UAClC;;UACF;;UACF;;UACF;;;;;;UA7CkB;;UAAA,gGAAiC,aAAjC,EAAiC,qBAAjC;;UAKE;;UAAA;;UAUE;;UAAA;;UAKA;;UAAA;;UAOA;;UAAA;;UAIA;;UAAA;;UAOA;;UAAA;;UAIA;;UAAA;;;;;;UAKtB;;UACE;;UAAG;;UAA0B;;UAAa;;UAAK;;UAAoE;;UACrH;;;;;;;;UAGE;;UAA0C;YAAA;;YAAA;;YAAA,sBAAgB,KAAhB;UAAqB,CAArB;;UAA8E;;UAAuC;;UAAW;;UAAK;;UAAM;;;;;;UAAnH;;;;;;UAsB5D;;;;;;UAAkC;;;;;;;;UAElC;;UACE;YAAA;;YAAA;;YAAA;UAAA;;UADF;;;;;;;;UAOA;;UAA0D;YAAA;;YAAA;;YAAA;UAAA;;UAExD;;UAAoD;;UAAM;;UAAK;;UACjE;;;;;;;;UAEA;;UAA0D;YAAA;;YAAA;;YAAA;UAAA;;UAExD;;UAAuC;;UAAW;;UAAK;;UACzD;;;;;;;;UAKA;;UAA0D;YAAA;;YAAA;;YAAA;UAAA;;UAExD;;UAAoD;;UAAM;;UAAK;;UACjE;;;;;;UAFE;;;;;;UAKF;;UAGE;;UACE;;UACE;;UACE;;UAAG;;UAAkC;;UACvC;;UACF;;UACF;;UACF;;;;;;UANY;;UAAA;;UACE;;UAAA;;;;;;;;UAhD1B;;UACE;;UACE;;UACE;;UAEE;;UACE;;UACE;;UAA0B;;UAAM;;UAAK;;UACvC;;UACA;;UAEA;;UACE;;UAAW;;UAAW;;UAAU;;UAAsB;;UAAW;;UACjE;;UACA;;UACA;;UAEA;;UAEA;;UAAqB;YAAA;;YAAA;;YAAA;UAAA;;UAArB;;UACA;;UACF;;UACA;;UAEE;;UAKA;;UAMA;;UAEA;;UAKA;;UACA;;UAWF;;UAEA;;UAAuB;;UAAI;;UAC7B;;UACF;;UACF;;UACF;;UACF;;;;;;UA5DQ;;UAAA;;UAeM;;UAAA;;UACuD;;UAAA;;UAEpC;;UAAA;;UAMnB;;UAAA;;UAKA;;UAAA;;UAQsD;;UAAA;;UAKR;;UAAA;;;;;;UAuB9B;;;;;;UA4BtB;;UACE;;UAAU;;UAAO;;UACjB;;UACF;;;;;;UAiBA;;UACE;;UAAU;;UAAO;;UACjB;;UACF;;;;;;;;UAOF;;UAA0C;YAAA;;YAAA;;YAAA,sBAAgB,IAAhB;UAAoB,CAApB;;UACjB;;UAAuC;;UAAW;;UAAK;;UAAI;;;;;;UADnB;;;;;;;;UAvPzE;;UAEE;;UACE;;UACE;;UACE;;UACE;;UAAU;;UAAe;;UAAY;;UACvC;;UACA;;UACE;;UACE;;UAAY;;UAAY;;UACpB;;UAAU;;UAAsB;;UAClC;;UAAO;;UACT;;UAAgB;YAAA;;YAAA;;YAAA;UAAA;;UAAhB;;UACF;;UACA;;UACE;;UAAY;;UAAa;;UACzB;;UAAgB;YAAA;;YAAA;;YAAA;UAAA;;UAAhB;;UACF;;UACF;;UACA;;UACE;;UACE;;UAAY;;UAAW;;UACnB;;UAAU;;UAAsB;;UAClC;;UAAO;;UACT;;UAAgB;YAAA;;YAAA;;YAAA;UAAA;;UAAhB;;UACF;;UACA;;UACE;;UAAY;;UAAe;;UAAU;;UAAsB;;UAAW;;UACtE;;UAAgB;YAAA;;YAAA;;YAAA;UAAA,GAAsC,SAAtC,EAAsC;YAAA;;YAAA;;YAAA,OACV,QAAAC,oBAAA,oBADU;UAC8B,CADpE;;UAAhB;;UAEF;;UACF;;UAEA;;UACE;;UAWF;;UAEA;;UACE;;UAIF;;UACF;;UAEA;;UAuDA;;UAIA;;UACE;;UACE;;UACJ;;UACF;;UACF;;UAGA;;UAgEA;;UACE;;UACE;;UACA;;UACE;;UACE;;UAAU;;UAAe;;UAAY;;UACvC;;UACA;;UACE;;UACE;;UAAY;;UAAe;;UACvB;;UAAU;;UAAsB;;UAClC;;UAAO;;UACT;;UAAgB;YAAA;;YAAA;;YAAA;UAAA;;UAAhB;;UAEF;;UACF;;UACA;;UACE;;UACE;;UAAY;;UACV;;UACE;;UAAU;;UAAsB;;UAClC;;UACF;;UACA;;UAA4D;YAAA;;YAAA;;YAAA;UAAA;;UAA5D;;UAEA;;UAAgD;YAAA;;YAAA;;YAAA;UAAA;;UAE9C;;UAAU;;UAAkD;;UAC9D;;UACF;;UACA;;UAIF;;UACA;;UACE;;UACE;;UAAY;;UACV;;UACE;;UAAU;;UAAsB;;UAClC;;UACF;;UACA;;UAAmE;YAAA;;YAAA;;YAAA;UAAA,GAA8B,OAA9B,EAA8B;YAAA;;YAAA;;YAAA;UAAA,CAA9B;;UAAnE;;UAGA;;UAAgD;YAAA;;YAAA;;YAAA;UAAA;;UAE9C;;UAAU;;UAAyD;;UACrE;;UACF;;UACA;;UAIF;;UACF;;UACF;;UAEA;;UACE;;UACE;;UAEA;;UAA0C;YAAA;;YAAA;;YAAA;UAAA;;UAA2F;;UAAuC;;UAAW;;UAAK;;UAAM;;UACpM;;UACF;;UACF;;UACF;;;;;;UA1PU;;UAAA;;UAUkB;;UAAA;;UAIA;;UAAA;;UAQA;;UAAA;;UAIA;;UAAA;;UAOlB;;UAAA;;UAamD;;UAAA;;UAOnC;;UAAA;;UAuDG;;UAAA;;UAK2E;;UAAA;;UAOzE;;UAAA;;UAiErB;;UAAA;;UAWkB;;UAAA,iGAAkC,UAAlC,EAAkC,yDAAlC;;UAWA;;UAAA,4GAA2C,SAA3C,EAA2C,2BAA3C;;UAGd;;UAAA,yFAAmC,cAAnC,EAAmC,mBAAnC;;UACU;;UAAA;;UAGX;;UAAA;;UAYe;;UAAA,mHAAkD,SAAlD,EAAkD,uBAAlD;;UAId;;UAAA,yFAAmC,cAAnC,EAAmC,0BAAnC;;UACU;;UAAA;;UAGX;;UAAA;;UAWL;;UAAA;;UACwE;;UAAA,sIAAgC,QAAhC,EAAgC,4DAAhC;;;;;;;;UAS5E;;UAAsC;YAAA;;YAAA;;YAAA;UAAA;;UAEpC;;UAGA;;UAGF;;;;;;;;UAEA;;UACE;;UACwC;YAAA;;YAAA;;YAAA;UAAA;;UACxC;;UACF;;;;;;UAHiB;;UAAA,0FAAyB,kBAAzB,EAAyB,uBAAzB;;;;MD/PlB;QAAA,IAAMC,oBAAN;UAgDL;UAEA,8BACUC,UADV,EAEUC,WAFV,EAGUC,iBAHV,EAIUC,kBAJV,EAKSL,oBALT,EAMUM,MANV,EAOUC,kBAPV,EAQUC,OARV,EASUC,SATV,EAUUC,MAVV,EAWqBC,SAXrB,EAY8CC,IAZ9C,EAYyD;YAAA;;YAX/C,KAAAV,UAAA,GAAAA,UAAA;YACA,KAAAC,WAAA,GAAAA,WAAA;YACA,KAAAC,iBAAA,GAAAA,iBAAA;YACA,KAAAC,kBAAA,GAAAA,kBAAA;YACD,KAAAL,oBAAA,GAAAA,oBAAA;YACC,KAAAM,MAAA,GAAAA,MAAA;YACA,KAAAC,kBAAA,GAAAA,kBAAA;YACA,KAAAC,OAAA,GAAAA,OAAA;YACA,KAAAC,SAAA,GAAAA,SAAA;YACA,KAAAC,MAAA,GAAAA,MAAA;YACW,KAAAC,SAAA,GAAAA,SAAA;YACyB,KAAAC,IAAA,GAAAA,IAAA;YAvD9C,KAAAC,gBAAA,GAA6B,CAC3B,WAD2B,EAE3B,UAF2B,EAG3B,oBAH2B,EAI3B,cAJ2B,EAK3B,cAL2B,EAM3B,QAN2B,CAA7B;YAQA,KAAAC,UAAA,GAAqB,QAArB;YACA,KAAAC,WAAA,GAAc,IAAI,mDAAJ,EAAd;YACA,KAAAC,OAAA,GAAU,IAAI,+CAAJ,EAAV;YACA,KAAAC,QAAA,GAAW,IAAI,gDAAJ,EAAX;YACA,KAAAC,WAAA,GAAc,IAAI,mDAAJ,EAAd;YACA,KAAAC,KAAA,GAAQ,IAAI,2EAAJ,EAAR;YAOA,KAAAC,eAAA,GAAkB,EAAlB;YACA,KAAAC,YAAA,GAAe,EAAf;YACA,KAAAC,WAAA,GAAc,EAAd;YACA,KAAAC,eAAA,GAAkB,EAAlB;YAEA,KAAAC,YAAA,GAAe,KAAf;YACA,KAAAC,kBAAA,GAAqB,KAArB;YACA,KAAAC,eAAA,GAAkB,KAAlB;YAMA,KAAAC,aAAA,GAAgB,KAAhB;YACA,KAAAC,YAAA,GAAe,IAAf;YACA,KAAAC,mBAAA,GAAsB,IAAtB;YAEA,KAAAC,iBAAA,GAAoB,KAApB;;YAmBE,IAAIlB,IAAJ,EAAU;cACR,KAAKkB,iBAAL,GAAyBlB,IAAI,CAACmB,aAA9B;cACA,KAAKhB,WAAL,GAAmBH,IAAI,CAACG,WAAxB;cACA,KAAKiB,mBAAL;YACD;UAEF;;UArEI;YAAA;YAAA,OAuEL,oBAAQ;cACN,KAAKC,gBAAL;cACA,KAAKC,kBAAL;cACA,KAAKC,kBAAL,GAHM,CAIN;;cACA,KAAKC,eAAL,GAAuB,KAAK/B,kBAAL,CAAwBgC,WAAxB,EAAvB;YAED;UA9EI;YAAA;YAAA,OAgFL,gBAAI;cAAA;;cACF,KAAKtB,WAAL,CAAiBuB,QAAjB,GAA4B,KAAKvB,WAAL,CAAiBuB,QAAjB,CAA0BC,WAA1B,EAA5B;;cACA,IAAI,KAAKH,eAAL,KAAyB,kBAAzB,IAA+C,KAAKA,eAAL,KAAyB,YAA5E,EAA0F;gBACxF,KAAKrB,WAAL,CAAiBC,OAAjB,GAA2B,IAA3B;cACD,CAJC,CAKF;;;cACA,KAAKd,UAAL,CAAgBsC,IAAhB,CAAqB,kDAAUzB,WAA/B,EAA4C,KAAKA,WAAjD,EAA8D0B,SAA9D,CACE,UAACC,GAAD,EAAc;gBACZ,IAAIA,GAAG,KAAKC,SAAZ,EAAuB;kBACrB,KAAI,CAACvC,iBAAL,CAAuBwC,oBAAvB,CAA4C,wCAA5C;;kBACA,IAAMC,GAAG,GAAG;oBAAEC,KAAK,EAAE;kBAAT,CAAZ;;kBACA,IAAI,KAAI,CAAC/B,WAAL,CAAiBE,QAAjB,CAA0B8B,IAA1B,KAAmC,mDAAWC,cAAlD,EAAkE;oBAChEH,GAAG,CAACC,KAAJ,GAAY,CAAZ;kBACD,CAFD,MAEO;oBACLD,GAAG,CAACC,KAAJ,GAAY,CAAZ;kBACD;;kBACD,KAAI,CAACG,WAAL,CAAiBC,KAAjB;;kBACA,IAAI,KAAI,CAACpB,iBAAT,EAA4B;oBAC1B,KAAI,CAACpB,MAAL,CAAYyC,QAAZ;kBACD;gBACF;cACF,CAfH,EAeK,UAACC,GAAD,EAAc;;;gBACf,KAAI,CAAChD,iBAAL,CAAuBiD,kBAAvB,CAA0C,OAAAD,GAAG,SAAH,IAAAA,GAAG,WAAH,GAAG,MAAH,GAAAA,GAAG,CAAEE,KAAL,MAAU,IAAV,IAAU,aAAV,GAAU,MAAV,GAAU,GAAEC,OAAZ,IAAsBH,GAAG,CAACE,KAAJ,CAAUC,OAAhC,GAA0CH,GAAG,CAACE,KAAxF;;gBACAE,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,GAAxB;cAED,CAnBH,EAmBK,YAAM;gBACP,KAAI,CAACM,kBAAL;;gBACA,IAAG,KAAI,CAAC5C,UAAL,IAAiB,QAApB,EAA6B,KAAI,CAACoB,kBAAL,GAA7B,KACK,IAAG,KAAI,CAACpB,UAAL,IAAiB,KAApB,EAA0B,KAAI,CAACoB,kBAAL,CAAwB,qDAAayB,QAArC;gBAC/B,KAAI,CAAC5C,WAAL,GAAmB,IAAI,mDAAJ,EAAnB;cACD,CAxBH;YAyBD;UA/GI;YAAA;YAAA,OAiHL,kBAAM;cAAA;;cACJyC,OAAO,CAACC,GAAR,CAAY,QAAZ;cACA,IAAMG,QAAQ,GAAG,KAAK7C,WAAL,CAAiBE,QAAjB,CAA0B8B,IAA1B,KAAmC,mDAAWC,cAA9C,GAA+D,kDAAUjC,WAAzE,GAAuF,kDAAU8C,iBAAlH;cACA,KAAK3D,UAAL,CAAgB4D,MAAhB,CAAuBF,QAAvB,EAAiC,KAAK7C,WAAtC,EAAmD0B,SAAnD,CACE,UAACC,GAAD,EAAc;gBACZ,IAAIA,GAAG,KAAKC,SAAZ,EAAuB;kBACrB;kBACA,MAAI,CAACvC,iBAAL,CAAuBwC,oBAAvB,CAA4C,kCAA5C;;kBACA,IAAMC,GAAG,GAAG;oBAAEC,KAAK,EAAE;kBAAT,CAAZ;kBACAU,OAAO,CAACC,GAAR,CAAY,MAAI,CAAC1C,WAAjB;;kBAEA,IAAI,MAAI,CAACA,WAAL,CAAiBE,QAAjB,CAA0B8B,IAA1B,KAAmC,mDAAWC,cAAlD,EAAkE;oBAChEH,GAAG,CAACC,KAAJ,GAAY,CAAZ;kBACD,CAFD,MAEO;oBACLD,GAAG,CAACC,KAAJ,GAAY,CAAZ;kBACD,CAVoB,CAWrB;;;kBACA,MAAI,CAACG,WAAL,CAAiBC,KAAjB;;kBAEA,IAAI,MAAI,CAACpB,iBAAT,EAA4B;oBAC1B,MAAI,CAACpB,MAAL,CAAYyC,QAAZ;kBACD;gBACF;cACF,CApBH,EAoBK,UAACC,GAAD,EAAc;gBACfI,OAAO,CAACC,GAAR,CAAYL,GAAZ;;gBACA,MAAI,CAAChD,iBAAL,CAAuBkD,KAAvB,CAA6BF,GAA7B;cACD,CAvBH,EAuBK,YAAM;gBAEP,IAAG,MAAI,CAACtC,UAAL,IAAiB,QAApB,EAA6B,MAAI,CAACoB,kBAAL,GAA7B,KACK,IAAG,MAAI,CAACpB,UAAL,IAAiB,KAApB,EAA0B,MAAI,CAACoB,kBAAL,CAAwB,qDAAayB,QAArC;gBAC/B,MAAI,CAAC5C,WAAL,GAAmB,IAAI,mDAAJ,EAAnB;;gBACA,MAAI,CAAC2C,kBAAL;cACD,CA7BH;YA8BD;UAlJI;YAAA;YAAA,OAqJL,gBAAOK,UAAP,EAA0B;cAAA;;cACxB,KAAKhD,WAAL,CAAiBuB,QAAjB,GAA4B,KAAKvB,WAAL,CAAiBuB,QAAjB,CAA0BC,WAA1B,EAA5B;;cACA,IAAI,KAAKH,eAAL,KAAyB,kBAAzB,IAA+C,KAAKA,eAAL,KAAyB,YAA5E,EAA0F;gBACxF,KAAKrB,WAAL,CAAiBC,OAAjB,GAA2B,IAA3B;cACD,CAJuB,CAKxB;;;cACA,KAAKd,UAAL,CAAgB8D,MAAhB,CAAuB,kDAAUjD,WAAjC,EAA8C,KAAKA,WAAnD,EAAgEgD,UAAhE,EAA4EtB,SAA5E,CACE,UAACC,GAAD,EAAc;gBACZ,IAAIA,GAAG,KAAKC,SAAZ,EAAuB;kBACrB,MAAI,CAACvC,iBAAL,CAAuBwC,oBAAvB,CACEmB,UAAU,GAAE,wCAAF,GAA4C,kCADxD;;kBAGA,IAAMlB,GAAG,GAAG;oBAAEC,KAAK,EAAE;kBAAT,CAAZ;;kBACA,IAAI,MAAI,CAAC/B,WAAL,CAAiBE,QAAjB,CAA0B8B,IAA1B,KAAmC,mDAAWC,cAAlD,EAAkE;oBAChEH,GAAG,CAACC,KAAJ,GAAY,CAAZ;kBACD,CAFD,MAEO;oBACLD,GAAG,CAACC,KAAJ,GAAY,CAAZ;kBACD;;kBACD,MAAI,CAACG,WAAL,CAAiBC,KAAjB;;kBACA,IAAI,MAAI,CAACpB,iBAAT,EAA4B;oBAC1B,MAAI,CAACpB,MAAL,CAAYyC,QAAZ;kBACD;gBACF;cACF,CAjBH,EAiBK,UAACC,GAAD,EAAc;;;gBACf,MAAI,CAAChD,iBAAL,CAAuBiD,kBAAvB,CAA0C,OAAAD,GAAG,SAAH,IAAAA,GAAG,WAAH,GAAG,MAAH,GAAAA,GAAG,CAAEE,KAAL,MAAU,IAAV,IAAU,aAAV,GAAU,MAAV,GAAU,GAAEC,OAAZ,IAAsBH,GAAG,CAACE,KAAJ,CAAUC,OAAhC,GAA0CH,GAAG,CAACE,KAAxF;;gBACAE,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,GAAxB;cAED,CArBH,EAqBK,YAAM;gBACP,MAAI,CAACM,kBAAL;;gBACA,IAAG,MAAI,CAAC5C,UAAL,IAAiB,QAApB,EAA6B,MAAI,CAACoB,kBAAL,GAA7B,KACK,IAAG,MAAI,CAACpB,UAAL,IAAiB,KAApB,EAA0B,MAAI,CAACoB,kBAAL,CAAwB,qDAAayB,QAArC;gBAC/B,MAAI,CAAC5C,WAAL,GAAmB,IAAI,mDAAJ,EAAnB;cACD,CA1BH;YA2BD;UAtLI;YAAA;YAAA,OAwLL,6BAAoB;cAAA;;cAClB,IAAMkD,cAAc,GAAG;gBACrBC,QAAQ,EAAE,KAAKnD,WAAL,CAAiBmD,QADN;gBAErB5B,QAAQ,EAAE,KAAKvB,WAAL,CAAiBuB,QAFN;gBAGrBrB,QAAQ,EAAE,KAAKF,WAAL,CAAiBE;cAHN,CAAvB;cAKA,KAAKf,UAAL,CAAgB4D,MAAhB,CAAuB,kDAAUK,cAAjC,EAAiDF,cAAjD,EAAiExB,SAAjE,CAA2E,UAACC,GAAD,EAAc;gBACvF,IAAIA,GAAG,KAAKC,SAAZ,EAAuB;kBACrB,MAAI,CAACvC,iBAAL,CAAuBgE,OAAvB,CAA+B1B,GAA/B;;kBACA,IAAMG,GAAG,GAAG;oBAAEC,KAAK,EAAE;kBAAT,CAAZ;;kBACA,IAAI,MAAI,CAAC/B,WAAL,CAAiBE,QAAjB,CAA0B8B,IAA1B,KAAmC,mDAAWC,cAAlD,EAAkE;oBAChEH,GAAG,CAACC,KAAJ,GAAY,CAAZ;kBACD,CAFD,MAEO;oBACLD,GAAG,CAACC,KAAJ,GAAY,CAAZ;kBACD;;kBACD,MAAI,CAACuB,SAAL,CAAexB,GAAf;;kBACA,MAAI,CAACI,WAAL,CAAiBC,KAAjB;gBACD;cACF,CAZD;YAaD;UA3MI;YAAA;YAAA,OA6ML,mBAAM,CAEL;UA/MI;YAAA;YAAA,OAiNL,4BAAmBoB,CAAnB,EAAoB;cAAA;;cAClB,IAAIA,CAAJ,EAAO;gBACL,KAAKpE,UAAL,CAAgBqE,QAAhB,CAAyB,kDAAUvD,OAAnC,EAA4CsD,CAAC,CAACE,KAAF,CAAQC,EAApD,EAAwDhC,SAAxD,CACE,UAACC,GAAD,EAAc;kBACZ,MAAI,CAAC1B,OAAL,GAAe0B,GAAG,CAACgC,YAAJ,CAAiB9D,IAAhC;gBACD,CAHH;cAID;YACF;UAxNI;YAAA;YAAA,OA0NL,8BAAqC;cAAA;;cAAA,IAAlB+D,IAAkB,uEAAX,WAAW;cACnC,KAAKnE,OAAL,CAAaoE,IAAb;cACA,KAAKpD,YAAL,GAAoB,KAApB;cAEA,KAAKqD,SAAL,GAAiBF,IAAI,KAAK,WAA1B;cAEA,KAAKzE,UAAL,CAAgB4E,OAAhB,WAA2B,kDAAUC,eAArC,cAAwDJ,IAAxD,GAAgElC,SAAhE,CACE,UAACC,GAAD,EAAc;gBACZ,MAAI,CAACtB,eAAL,GAAuBsB,GAAG,CAACgC,YAAJ,CAAiB9D,IAAxC;gBACA,MAAI,CAACY,YAAL,GAAoB,IAApB;;gBACA,MAAI,CAAChB,OAAL,CAAawE,IAAb;;gBACA,MAAI,CAACC,UAAL,GAAkB,IAAI,0EAAJ,CAAoCvC,GAAG,CAACgC,YAAJ,CAAiB9D,IAArD,CAAlB,CAJY,CAKZ;gBACA;cACD,CARH;YAUD;UA1OI;YAAA;YAAA,OA4OL,8BAAkB;cAAA;;cAChB,KAAKV,UAAL,CAAgB4E,OAAhB,CAAwB,kDAAUI,eAAlC,EAAmDzC,SAAnD,CAA6D,UAACC,GAAD,EAAc;gBACzE,MAAI,CAACpB,WAAL,GAAmBoB,GAAG,CAACgC,YAAJ,CAAiB9D,IAApC;cACD,CAFD,EAEG,UAACwC,GAAD,EAAc,CAChB,CAHD;cAIA,KAAKlD,UAAL,CAAgB4E,OAAhB,CAAwB,kDAAUK,wBAAlC,EAA4D1C,SAA5D,CAAsE,UAACC,GAAD,EAAc;gBAClF,MAAI,CAACnB,eAAL,GAAuBmB,GAAG,CAACgC,YAAJ,CAAiB9D,IAAxC;cACD,CAFD,EAEG,UAACwC,GAAD,EAAc,CAChB,CAHD;cAIA,KAAKlD,UAAL,CAAgB4E,OAAhB,CAAwB,kDAAUM,KAAlC,EAAyC3C,SAAzC,CAAmD,UAACC,GAAD,EAAc;gBAC/D,MAAI,CAACrB,YAAL,GAAoBqB,GAAG,CAACgC,YAAJ,CAAiB9D,IAArC;cACD,CAFD,EAEG,UAACwC,GAAD,EAAc,CAChB,CAHD;YAKD;UA1PI;YAAA;YAAA,OA4PL,mCAA0BoB,KAA1B,EAAsCa,QAAtC,EAAmD;cACjD,IAAIb,KAAK,IAAIa,QAAb,EAAuB;gBACrB,OAAOb,KAAK,CAACc,WAAN,KAAsBD,QAAQ,CAACC,WAAtC;cACD;YACF;UAhQI;YAAA;YAAA,OAkQL,wBAAed,KAAf,EAA2Ba,QAA3B,EAAwC;cACtC,IAAIb,KAAK,IAAIa,QAAb,EAAuB;gBACrB,OAAOb,KAAK,CAACC,EAAN,KAAaY,QAAQ,CAACZ,EAA7B;cACD;YACF;UAtQI;YAAA;YAAA,OAwQL,yBAAgBD,KAAhB,EAA4Ba,QAA5B,EAAyC;cACvC,IAAIb,KAAK,IAAIa,QAAb,EAAuB;gBACrB,OAAOb,KAAK,CAACC,EAAN,KAAaY,QAAQ,CAACZ,EAA7B;cACD;YACF;UA5QI;YAAA;YAAA,OA8QL,yBAAgBP,QAAhB,EAAwB;cACtB,IAAI,KAAKnD,WAAL,CAAiBmD,QAAjB,KAA8BA,QAAlC,EAA4C;gBAC1C,KAAKvC,aAAL,GAAqB,IAArB;cACD,CAFD,MAEO;gBACL,KAAKA,aAAL,GAAqB,KAArB;cACD;YACF,CApRI,CAsRL;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;;UAlSK;YAAA;YAAA,OAmSL,+BAAmB;cAAA;;qBAAA,CACjB;cACA;cACA;;;cACA,IAAM4D,SAAS,GAAG,YAAKC,iBAAL,MAAsB,IAAtB,IAAsB,aAAtB,GAAsB,MAAtB,GAAsB,GAAEC,WAAxB,IAClB,KAAKD,iBAAL,CAAuBC,WADL,GACmB,KAAK1E,WAAL,CAAiB0D,EADtD;cAGA,KAAKtD,KAAL,CAAWuE,4BAAX,GAA0C,IAA1C;cACA,KAAKvE,KAAL,CAAWwE,OAAX,GAAqB,IAArB;cACA,KAAKxE,KAAL,CAAWyE,gBAAX,GAA8B,IAA9B;cACA,KAAK1F,UAAL,CAAgBqE,QAAhB,CAAyB,kDAAUxD,WAAnC,EAAgDwE,SAAhD,EAA2D9C,SAA3D,CACE,UAACC,GAAD,EAAc;gBACZ,MAAI,CAAC3B,WAAL,GAAmB2B,GAAG,CAACgC,YAAJ,CAAiB9D,IAApC;gBACA,MAAI,CAACI,OAAL,GAAe0B,GAAG,CAACgC,YAAJ,CAAiB9D,IAAjB,CAAsBI,OAArC;gBACA,MAAI,CAACE,WAAL,GAAmB,MAAI,CAACH,WAAL,CAAiBC,OAAjB,CAAyB6E,kBAA5C;gBACA,MAAI,CAAC5E,QAAL,GAAgB,MAAI,CAACF,WAAL,CAAiBE,QAAjC;;gBACA,IAAI,MAAI,CAACF,WAAL,CAAiB2E,4BAArB,EAAmD;kBACjD,MAAI,CAACI,aAAL;gBACD,CAFD,MAEO;kBACL,MAAI,CAACC,gBAAL,CAAsBC,aAAtB,CAAoCxB,KAApC,GAA4C,EAA5C;gBACD;cACF,CAXH;YAYD;UAzTI;YAAA;YAAA,OA2TL,gCAAoB;cAAA;;cAClB,IAAM7D,SAAS,GAAG,KAAKD,MAAL,CAAYuF,IAAZ,CAAiB,+FAAjB,EAAsC;gBACtDC,KAAK,EAAE,KAD+C;gBAEtDC,MAAM,EAAE,KAF8C;gBAGtDvF,IAAI,EAAE;kBACJwF,WAAW,EAAE,IADT;kBAEJC,kBAAkB,EAAE;gBAFhB;cAHgD,CAAtC,CAAlB;cAQA1F,SAAS,CAAC2F,WAAV,GAAwB7D,SAAxB,CAAkC,UAAA8D,MAAM,EAAI;gBAC1C/C,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqC8C,MAArC;;gBACA,IAAIA,MAAJ,EAAY;kBACV,MAAI,CAACvF,OAAL,GAAeuF,MAAf;gBACD;;gBACD,MAAI,CAACrE,kBAAL;cACD,CAND;YAOD;UA3UI;YAAA;YAAA,OA6UL,4BAAgB;cACd,KAAKsE,QAAL,GAAgB,KAAKrG,WAAL,CAAiBsG,KAAjB,CAAuB;gBACrCC,SAAS,EAAE,CAAC,EAAD,EAAK,0DAAWC,QAAhB,CAD0B;gBAErCC,UAAU,EAAE,CAAC,EAAD,CAFyB;gBAGrCC,QAAQ,EAAE,CAAC,EAAD,EAAK,0DAAWF,QAAhB,CAH2B;gBAIrCG,YAAY,EAAE,CAAC,EAAD,EAAK,0DAAWH,QAAhB,CAJuB;gBAKrC1F,QAAQ,EAAE,CAAC,EAAD,CAL2B;gBAMrCD,OAAO,EAAE,CAAC,EAAD;cAN4B,CAAvB,CAAhB;cAQA,KAAK+F,UAAL,GAAkB,KAAK5G,WAAL,CAAiBsG,KAAjB,CAAuB;gBACvCM,UAAU,EAAE,CAAC,EAAD,EAAK,0DAAWJ,QAAhB;cAD2B,CAAvB,CAAlB;;cAIA,IAAI,CAAC,KAAK7E,iBAAV,EAA6B;gBAC3B,KAAKmB,WAAL,GAAmB,KAAK9C,WAAL,CAAiBsG,KAAjB,CAAuB;kBACxCO,QAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWL,QAAZ,EAAsB,0DAAWM,OAAX,CAAmB,qDAAnB,CAAtB,CAAL,CAD8B;kBAExC;kBACAhG,QAAQ,EAAE,CAAC,EAAD,CAH8B;kBAIxCiD,QAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWyC,QAAZ,EAAsB,0DAAWM,OAAX,CAAmB,0CAAnB,CAAtB,EAAsF,0DAAWC,SAAX,CAAqB,CAArB,CAAtF,CAAL,CAJ8B;kBAKxCC,gBAAgB,EAAE,CAAC,EAAD,EAAK,0DAAWR,QAAhB;gBALsB,CAAvB,CAAnB;cAOD,CARD,MAQO;gBACL,KAAK1D,WAAL,GAAmB,KAAK9C,WAAL,CAAiBsG,KAAjB,CAAuB;kBACxCO,QAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWL,QAAZ,EAAsB,0DAAWM,OAAX,CAAmB,qDAAnB,CAAtB,CAAL,CAD8B;kBAExC/C,QAAQ,EAAE,CAAC,EAAD,EAAK,0DAAWyC,QAAhB,CAF8B;kBAGxCQ,gBAAgB,EAAE,CAAC,EAAD,EAAK,0DAAWR,QAAhB;gBAHsB,CAAvB,CAAnB;cAKD;;cACD,KAAKS,eAAL,GAAuB,IAAI,wDAAJ,CAAc;gBACnCZ,QAAQ,EAAE,IAAI,0DAAJ,EADyB;gBAEnCa,WAAW,EAAE,IAAI,0DAAJ,EAFsB;gBAGnCN,UAAU,EAAE,IAAI,0DAAJ,EAHuB;gBAInC9D,WAAW,EAAE,IAAI,0DAAJ;cAJsB,CAAd,CAAvB;YAMD;UA/WI;YAAA;YAAA,OAiXL,8BAAkB;cAChB,KAAKlC,WAAL,GAAmB,IAAI,mDAAJ,EAAnB;cACA,KAAKC,OAAL,GAAe,IAAI,+CAAJ,EAAf;cACA,KAAKE,WAAL,GAAmB,IAAI,mDAAJ,EAAnB;cACA,KAAKQ,eAAL,GAAuB,KAAvB;cACA,KAAK0F,eAAL,CAAqBE,eAArB;cACA,KAAKF,eAAL,CAAqBG,cAArB;cACA,KAAK7G,MAAL,CAAYyC,QAAZ;;cACA,IAAI,KAAKrB,iBAAT,EAA4B;gBAC1B,KAAKpB,MAAL,CAAYyC,QAAZ;cACD,CAFD,MAEO;gBACL,KAAK7C,MAAL,CAAYkH,QAAZ,CAAqB,CAAC,+BAAD,CAArB;cACD;YAEF;UA/XI;YAAA;YAAA,OAiYL,mBAAU3E,GAAV,EAAe;cACb,KAAK9B,WAAL,GAAmB,IAAI,mDAAJ,EAAnB;cACA,KAAK2C,kBAAL;;cACA,IAAIb,GAAG,CAACC,KAAJ,KAAc,CAAlB,EAAqB;gBACnB,KAAKhC,UAAL,GAAgB,QAAhB,CADmB,CAEnB;;gBACA,KAAKoB,kBAAL;gBACA,KAAKrB,gBAAL,GAAwB,CACtB,WADsB,EAEtB,UAFsB,EAGtB,oBAHsB,EAItB,cAJsB,EAKtB,cALsB,EAMtB,QANsB,CAAxB;cAQD,CAZD,MAYO,IAAIgC,GAAG,CAACC,KAAJ,KAAc,CAAlB,EAAqB;gBAC1B,KAAKhC,UAAL,GAAgB,KAAhB,CAD0B,CAE1B;;gBACA,KAAKoB,kBAAL,CAAwB,qDAAayB,QAArC;gBACA,KAAK9C,gBAAL,GAAwB,CACtB,WADsB,EAEtB,UAFsB,EAGtB,UAHsB,EAItB,cAJsB,EAKtB,QALsB,CAAxB;cAOD;YACF;UA5ZI;YAAA;YAAA,OA8ZL,oBAAW4G,KAAX,EAAkB;cAChB,KAAKhG,kBAAL,GAA0B,KAA1B;;cAEA,IAAIgG,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAJ,EAA2B;gBACzB,KAAKC,QAAL,GAAgBH,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,EAAsBE,IAAtC;;gBAEA,IAAI,KAAKD,QAAL,GAAgB,QAApB,EAA8B;kBAC5B,KAAKxH,iBAAL,CAAuBiD,kBAAvB;kBACAoE,KAAK,CAACC,MAAN,CAAalD,KAAb,GAAqB,EAArB;kBACA;gBAED,CALD,MAKO;kBACL,KAAK/C,kBAAL,GAA0B,IAA1B;kBACA,IAAMkE,OAAO,GAAGmC,GAAG,CAACC,eAAJ,CAAoBN,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAApB,CAAhB;kBACA,KAAKjG,eAAL,GAAuB,IAAvB;kBAEA,KAAKsG,gBAAL,GAAwB,KAAKvH,SAAL,CAAewH,8BAAf,CAA8CtC,OAA9C,CAAxB;kBAEA,IAAMuC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;kBACA,yCAAeV,KAAK,CAACC,MAAN,CAAaC,KAA5B;kBAAA,IAAOS,IAAP;;kBAEAF,MAAM,CAACG,aAAP,CAAqBD,IAArB;;kBACAF,MAAM,CAACI,MAAP,GAAgB,YAAM,CACrB,CADD;;kBAGA,KAAKC,YAAL,GAAoBd,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAApB;gBACD;cACF;YACF;UA1bI;YAAA;YAAA,OA4bL,wBAAe;cACb,IAAI,KAAKa,qBAAT,EAAgC;gBAC9BC,MAAM,CAACxC,IAAP,CAAY,KAAKuC,qBAAL,CAA2B7C,OAAvC;cACD,CAFD,MAEO;gBACL8C,MAAM,CAACxC,IAAP,CAAY,KAAK9E,KAAL,CAAWwE,OAAvB;cACD;YACF;UAlcI;YAAA;YAAA,OAocL,2BAAkB;cAAA;;cAChB,oDAAK+C,IAAL,CAAU;gBACRC,IAAI,EAAE,sDADE;gBAERC,IAAI,EAAE,UAFE;gBAGRC,gBAAgB,EAAE,IAHV;gBAIRC,kBAAkB,EAAE,SAJZ;gBAKRC,iBAAiB,EAAE,MALX;gBAMRC,iBAAiB,EAAE;cANX,CAAV,EAOGC,IAPH,CAOQ,UAAC1C,MAAD,EAAY;;;gBAClB,IAAIA,MAAM,CAAC/B,KAAX,EAAkB;kBAChB,OAAI,CAAChE,OAAL,CAAaoE,IAAb,GADgB,CAGhB;;;kBACA,IAAMW,SAAS,GAAG,cAAI,CAACC,iBAAL,MAAsB,IAAtB,IAAsB,aAAtB,GAAsB,MAAtB,GAAsB,GAAEC,WAAxB,IAChB,OAAI,CAACD,iBAAL,CAAuBC,WADP,GACqB,OAAI,CAAC1E,WAAL,CAAiB0D,EADxD;kBAEA,IAAMyE,MAAM,wBAAiB3D,SAAjB,CAAZ;;kBAEA,OAAI,CAAChF,kBAAL,CAAwB4I,iBAAxB,CAA0C,kDAAUC,SAApD,EAA+D,OAAI,CAACb,YAApE,EAAkFW,MAAlF,EACGzG,SADH,CACa,UAACC,GAAD,EAAc;oBACvB,OAAI,CAAC8F,qBAAL,GAA6B9F,GAAG,CAACgC,YAAJ,CAAiB9D,IAA9C;;oBAEA,OAAI,CAACyI,eAAL,CAAqB,OAAI,CAACb,qBAA1B;;oBAEA,OAAI,CAACzH,WAAL,CAAiB2E,4BAAjB,GAAgD,OAAI,CAAC8C,qBAAL,CAA2B9C,4BAA3E;;oBACA,OAAI,CAAC4D,4BAAL;;oBACA,OAAI,CAACC,WAAL;;oBACA,OAAI,CAACnJ,iBAAL,CAAuBwC,oBAAvB,CAA4C,kCAA5C;;oBACA,OAAI,CAAC2F,YAAL,GAAoB,IAApB;;oBAEA,OAAI,CAACzC,aAAL;;oBACA,OAAI,CAACrE,kBAAL,GAA0B,KAA1B;kBAED,CAfH,EAeK,UAAC2B,GAAD,EAAc;oBACf,OAAI,CAACmG,WAAL;;oBACA,OAAI,CAACnJ,iBAAL,CAAuBkD,KAAvB,CAA6BF,GAA7B;kBACD,CAlBH,EAkBK,YAAM;oBACP,OAAI,CAACmG,WAAL;kBACD,CApBH;gBAqBD,CA7BD,MA6BO;kBACL,OAAI,CAAChB,YAAL,GAAoB,IAApB;gBACD;cACF,CAxCD;YAyCD;UA9eI;YAAA;YAAA,OAgfL,wCAA+B;cAC7B,IAAM3E,QAAQ,GAAG,KAAKiB,SAAL,GAAiB,kDAAU9D,WAA3B,GAAyC,kDAAU8C,iBAApE;cACA,KAAK3D,UAAL,CAAgB4D,MAAhB,CAAuBF,QAAvB,EAAiC,KAAK7C,WAAtC,EAAmD0B,SAAnD,CACE,UAACC,GAAD,EAAc;gBACZc,OAAO,CAACC,GAAR,CAAYf,GAAZ;cACD,CAHH;YAID;UAtfI;YAAA;YAAA,OAwfL,yBAAgB8G,GAAhB,EAA0B;cACxB,KAAKrI,KAAL,CAAWuE,4BAAX,GAA0C8D,GAAG,CAAC9D,4BAA9C;cACA,KAAKvE,KAAL,CAAWsD,EAAX,GAAgB+E,GAAG,CAAC/E,EAApB;cACA,KAAKtD,KAAL,CAAWyE,gBAAX,GAA8B4D,GAAG,CAAC5D,gBAAlC;cACA,KAAKzE,KAAL,CAAWsI,QAAX,GAAsBD,GAAG,CAACC,QAA1B;cACA,KAAKtI,KAAL,CAAWuI,aAAX,GAA2BF,GAAG,CAACE,aAA/B;cACA,KAAKvI,KAAL,CAAWwE,OAAX,GAAqB6D,GAAG,CAAC7D,OAAzB;cACA,KAAKxE,KAAL,CAAWoE,SAAX,GAAuBiE,GAAG,CAACjE,SAA3B;cACA,KAAKpE,KAAL,CAAWwI,cAAX,GAA4BH,GAAG,CAACG,cAAhC;YACD;UAjgBI;YAAA;YAAA,OAmgBL,uBAAc;cAAA;;cACZC,UAAU,CAAC,YAAM;gBACf,OAAI,CAACpJ,OAAL,CAAawE,IAAb;cACD,CAFS,EAEP,CAFO,CAAV;YAGD;UAvgBI;YAAA;YAAA,OAygBL,yBAAgB;cAAA;;;;cACd,IAAMO,SAAS,GAAG,YAAKC,iBAAL,MAAsB,IAAtB,IAAsB,aAAtB,GAAsB,MAAtB,GAAsB,GAAEC,WAAxB,IAChB,KAAKD,iBAAL,CAAuBC,WADP,GACqB,KAAK1E,WAAL,CAAiB0D,EADxD;cAEA,KAAKjE,OAAL,CAAaoE,IAAb;cAEA,KAAK1E,UAAL,CAAgB2J,WAAhB,WAA+B,kDAAUT,SAAzC,kBAAiE7D,SAAjE,EAA4E9C,SAA5E,CACE,UAACC,GAAD,EAAc;;;gBACZ,IAAIA,GAAJ,EAAS;kBACP,OAAI,CAACvB,KAAL,GAAa,CAAH,KAAGuB,GAAG,SAAH,IAAAA,GAAG,WAAH,GAAG,MAAH,GAAAA,GAAG,CAAEgC,YAAL,MAAiB,IAAjB,IAAiB,aAAjB,GAAiB,MAAjB,GAAiB,GAAE9D,IAAhC;gBACD;;gBACD,OAAI,CAAC2I,WAAL;cACD,CANH,EAMK,UAACnG,GAAD,EAAc;gBACf,OAAI,CAACmG,WAAL;;gBACA/F,OAAO,CAACF,KAAR,CAAcF,GAAd;cACD,CATH;YAUD;UAxhBI;YAAA;YAAA,OA0hBL,uBAAW;cAAA;;cACT,KAAKlD,UAAL,CAAgBsC,IAAhB,CAAqB,kDAAUsH,2BAAV,cAA4C,KAAK/I,WAAL,CAAiBuB,QAA7D,CAArB,EAA8F,KAAKvB,WAAnG,EAAgH0B,SAAhH,CACE,UAACC,GAAD,EAAc;gBACZ,OAAI,CAACtC,iBAAL,CAAuBwC,oBAAvB,CAA4C,kCAA5C;cACD,CAHH;YAKD;UAhiBI;YAAA;YAAA,OAkiBL,4BAAgB;cAAA;;cACd,oDAAK8F,IAAL,CAAU;gBACRC,IAAI,EAAE,sDADE;gBAERC,IAAI,EAAE,UAFE;gBAGRC,gBAAgB,EAAE,IAHV;gBAIRC,kBAAkB,EAAE,SAJZ;gBAKRC,iBAAiB,EAAE,MALX;gBAMRC,iBAAiB,EAAE;cANX,CAAV,EAOGC,IAPH,CAOQ,UAAC1C,MAAD,EAAY;;;gBAClB,IAAIA,MAAM,CAAC/B,KAAX,EAAkB;kBAChB,OAAI,CAAChE,OAAL,CAAaoE,IAAb;;kBACA,OAAI,CAAC1E,UAAL,CAAgB6J,UAAhB,CAA2B,kDAAUX,SAArC,EAAgD,CAAF,KAAE,OAAI,CAACjI,KAAL,MAAU,IAAV,IAAU,aAAV,GAAU,MAAV,GAAU,GAAEsD,EAA5D,EAAgEhC,SAAhE,CACE,UAAAC,GAAG,EAAI;oBACL,OAAI,CAACvB,KAAL,GAAa,IAAI,2EAAJ,EAAb;oBACA,OAAI,CAACO,eAAL,GAAuB,KAAvB;;oBACA,OAAI,CAAClB,OAAL,CAAawE,IAAb;kBACD,CALH,EAKK,UAAA5B,GAAG;oBAAA,OAAI,OAAI,CAAC5C,OAAL,CAAawE,IAAb,EAAJ;kBAAA,CALR;gBAMD;cACF,CAjBD;YAkBD;UArjBI;;UAAA;QAAA;;;2BAAM/E,oB,EAAoB,sH,EAAA,2H,EAAA,6H,EAAA,8H,EAAA,+J,EAAA,wH,EAAA,2J,EAAA,+H,EAAA,wI,EAAA,mI,EAAA,yI,EAAA,gEA8DT,wEA9DS,EA8DM,CA9DN,C;QA8DM,C;;;gBA9D1BA,oB;UAAoB,iC;UAAA;YAAA;wEACpB,4D,EAAiB,I;;wEACjB,wE,EAAc,I;;wEACd,8D,EAAS,I;;;;;;;;;;;;;;;;;;;;;;cC5BtB;;cACE;;cACE;;cACE;;cACE;;cACE;;cAA6B;;cAAK;;cAAQ;;cAC5C;;cACF;;cACF;;cACA;;cAEA;;cA+PA;;cACE;;cACA;;cACE;;cASA;;cACA;;cAKF;;cACF;;cACF;;cACF;;;;cApRiC;;cAAA;;cAkQqD;;cAAA;;cAUxE;;cAAA;;;;;;;OD9PP;;;;;;;;;;;;;;;;;MEzBP;MAAA;;;MAAA;QAAA;MAAA;MAAA;;;MAAA;MAAA;MAAA;MAAA;;;MAAA;MAAA;MAAA;MAAA;;;MAAA;MAAA;MAAA;MAAA;;;MAAA;MAAA;MAAA;MAAA;;;MAAA;MAAA;MAAA;MAAA;;;MAAA;MAAA;MAAA;MAAA;;;MAAA;MAAA;MAAA;MAAA;;;MAAA;MAAA;MAAA;;MAsBO;QAAA,IAAM+J,iBAAN;UAAA;QAAA;;;gBAAMA;;;;6BAAAA,iB;UAAiB,C;UAAA,UATnB,CACP,4DADO,EAEP,qFAFO,EAGP,qEAHO,EAIP,kEAJO,EAKP,6DALO,EAMP,sFANO,CASmB;;;OAAvB;;;4HAAMA,iB,EAAiB;UAAA,eAVb,4EAUa;UAVO,UAEjC,4DAFiC,EAGjC,qFAHiC,EAIjC,qEAJiC,EAKjC,kEALiC,EAMjC,6DANiC,EAOjC,sFAPiC;QAUP,C;MAHX,C","file":"default~modules-pages-landing-page-landing-page-module~user-account-user-account-module~user-profile~be01c79e-es5.js","sourcesContent":["export * from './form-action-buttons/form-action-buttons.component';\r\nexport * from './form-list/form-list.component';","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { UserAccountComponent } from './user-account.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserAccountComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UserAccountRoutingModule { }\r\n","export class ESignature {\r\n    id: number;\r\n    accountId: number;\r\n    originalFilename: string;\r\n    filename: string;\r\n    fileExtension: string;\r\n    fileURL: string;\r\n    documentFormat: string;\r\n    signatureAttachmentReference: string;\r\n}\r\n","import { Component, ElementRef, Inject, OnInit, Optional, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatStepper } from '@angular/material/stepper';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Router } from '@angular/router';\r\nimport { FormListComponent } from '@fragments';\r\nimport { Affiliation, Company, UserAccount, UserRole } from '@models';\r\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\r\nimport { ACCOUNT_TYPE, ENDPOINTS, USER_ROLES } from '@shared';\r\nimport { ESignature } from 'app/core/models/eSignature.model';\r\nimport { FileStorageService } from 'app/core/services/file.storage.service';\r\nimport { ValidateFieldService } from 'app/core/services/validate-field.service';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport Swal from 'sweetalert2';\r\nimport { AddCompanyComponent } from '../../company/add-company/add-company.component';\r\n\r\n@Component({\r\n  selector: 'app-user-account',\r\n  templateUrl: './user-account.component.html',\r\n  styleUrls: ['./user-account.component.scss']\r\n})\r\nexport class UserAccountComponent implements OnInit {\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  @ViewChild('stepper') stepper: MatStepper;\r\n  @ViewChild('selectFileButton', { static: false }) selectFileButton: ElementRef;\r\n  dataSource: MatTableDataSource<UserAccount>;\r\n  displayedColumns: string[] = [\r\n    'firstName',\r\n    'lastName',\r\n    'companyDescription',\r\n    'emailAddress',\r\n    'mobileNumber',\r\n    'status'\r\n  ];\r\n  currentTab: string = \"NONASC\";\r\n  userAccount = new UserAccount();\r\n  company = new Company();\r\n  userRole = new UserRole();\r\n  affiliation = new Affiliation();\r\n  eSign = new ESignature();\r\n\r\n  userAccountForm: FormGroup;\r\n  userInfo: FormGroup;\r\n  companyInfo: FormGroup;\r\n  eSignature: FormGroup;\r\n  accountInfo: FormGroup;\r\n  userAccountList = [];\r\n  userRoleList = [];\r\n  companyList = [];\r\n  affiliationList = [];\r\n\r\n  displayTable = false;\r\n  isShowUploadButton = false;\r\n  previewDocument = false;\r\n  safeURLSignature: any;\r\n  selectedFile: File;\r\n  fileSize: number;\r\n  uploadedSignatureFile: any;\r\n\r\n  passwordMatch = false;\r\n  hidePassword = true;\r\n  hideConfirmPassword = true;\r\n  confirmPasswords: any;\r\n  isFromUserProfile = false;\r\n  currentUserRole: any;\r\n\r\n  isAscUser: boolean;\r\n  //isUpdateAscUser: boolean;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n    private dataStorageService: DataStorageService,\r\n    public validateFieldService: ValidateFieldService,\r\n    private router: Router,\r\n    private fileStorageService: FileStorageService,\r\n    private spinner: NgxSpinnerService,\r\n    private sanitizer: DomSanitizer,\r\n    private dialog: MatDialog,\r\n    @Optional() public dialogRef: MatDialogRef<UserAccountComponent>,\r\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any) {\r\n    if (data) {\r\n      this.isFromUserProfile = data.isFromProfile;\r\n      this.userAccount = data.userAccount;\r\n      this.viewUserInformation();\r\n    }\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.setFormValidator();\r\n    this.getUserPerTypeList();\r\n    this.getMaintenanceList();\r\n    // alert(this.isFromUserProfile)\r\n    this.currentUserRole = this.dataStorageService.getUserRole();\r\n\r\n  }\r\n\r\n  save(): void {\r\n    this.userAccount.username = this.userAccount.username.toLowerCase();\r\n    if (this.currentUserRole === 'ROLE_SUPER_ADMIN' || this.currentUserRole === 'ROLE_ADMIN') {\r\n      this.userAccount.company = null;\r\n    }\r\n    // this.apiService.save(ENDPOINTS.addUserAccount, this.userAccount).subscribe(\r\n    this.apiService.save(ENDPOINTS.userAccount, this.userAccount).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.customSuccessMessage('Account has been created successfully.');\r\n          const evt = { index: null };\r\n          if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\r\n            evt.index = 0;\r\n          } else {\r\n            evt.index = 1;\r\n          }\r\n          this.accountInfo.reset();\r\n          if (this.isFromUserProfile) {\r\n            this.dialog.closeAll();\r\n          }\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.customErrorMessage(err?.error?.message ? err.error.message : err.error);\r\n        console.log('ERROR:::', err);\r\n\r\n      }, () => {\r\n        this.resetFormValidator();\r\n        if(this.currentTab==\"NONASC\")this.getUserPerTypeList();\r\n        else if(this.currentTab==\"ASC\")this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\r\n        this.userAccount = new UserAccount();\r\n      });\r\n  }\r\n\r\n  update(): void {\r\n    console.log('update')\r\n    const endpoint = this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT ? ENDPOINTS.userAccount : ENDPOINTS.updateUserAccount;\r\n    this.apiService.update(endpoint, this.userAccount).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          // this.updateCredentials();\r\n          this.sweetAlertService.customSuccessMessage('Account was successfully updated');\r\n          const evt = { index: null };\r\n          console.log(this.userAccount);\r\n\r\n          if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\r\n            evt.index = 0;\r\n          } else {\r\n            evt.index = 1;\r\n          }\r\n          // this.changeTab(evt);\r\n          this.accountInfo.reset();\r\n          \r\n          if (this.isFromUserProfile) {\r\n            this.dialog.closeAll();\r\n          }\r\n        }\r\n      }, (err: any) => {\r\n        console.log(err);\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        \r\n        if(this.currentTab==\"NONASC\")this.getUserPerTypeList();\r\n        else if(this.currentTab==\"ASC\")this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\r\n        this.userAccount = new UserAccount();\r\n        this.resetFormValidator();\r\n      });\r\n  }\r\n\r\n\r\n  insert(isNewEntry: boolean): void {\r\n    this.userAccount.username = this.userAccount.username.toLowerCase();\r\n    if (this.currentUserRole === 'ROLE_SUPER_ADMIN' || this.currentUserRole === 'ROLE_ADMIN') {\r\n      this.userAccount.company = null;\r\n    }\r\n    // this.apiService.save(ENDPOINTS.addUserAccount, this.userAccount).subscribe(\r\n    this.apiService.insert(ENDPOINTS.userAccount, this.userAccount, isNewEntry).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.customSuccessMessage(\r\n            isNewEntry? 'Account has been created successfully.': 'Account was successfully updated'\r\n          );\r\n          const evt = { index: null };\r\n          if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\r\n            evt.index = 0;\r\n          } else {\r\n            evt.index = 1;\r\n          }\r\n          this.accountInfo.reset();\r\n          if (this.isFromUserProfile) {\r\n            this.dialog.closeAll();\r\n          }\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.customErrorMessage(err?.error?.message ? err.error.message : err.error);\r\n        console.log('ERROR:::', err);\r\n\r\n      }, () => {\r\n        this.resetFormValidator();\r\n        if(this.currentTab==\"NONASC\")this.getUserPerTypeList();\r\n        else if(this.currentTab==\"ASC\")this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\r\n        this.userAccount = new UserAccount();\r\n      });\r\n  }\r\n\r\n  updateCredentials() {\r\n    const updatedAccount = {\r\n      password: this.userAccount.password,\r\n      username: this.userAccount.username,\r\n      userRole: this.userAccount.userRole\r\n    }\r\n    this.apiService.update(ENDPOINTS.updatePassword, updatedAccount).subscribe((res: any) => {\r\n      if (res !== undefined) {\r\n        this.sweetAlertService.success(res);\r\n        const evt = { index: null };\r\n        if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\r\n          evt.index = 0;\r\n        } else {\r\n          evt.index = 1;\r\n        }\r\n        this.changeTab(evt);\r\n        this.accountInfo.reset();\r\n      }\r\n    });\r\n  }\r\n\r\n  delete(): void {\r\n\r\n  }\r\n\r\n  getSelectedCompany(i): void {\r\n    if (i) {\r\n      this.apiService.findById(ENDPOINTS.company, i.value.id).subscribe(\r\n        (res: any) => {\r\n          this.company = res.responseData.data;\r\n        });\r\n    }\r\n  }\r\n\r\n  getUserPerTypeList(type = 'APPLICANT'): void {\r\n    this.spinner.show();\r\n    this.displayTable = false;\r\n\r\n    this.isAscUser = type !== 'APPLICANT';\r\n\r\n    this.apiService.findAll(`${ENDPOINTS.userAccountType}/${type}`).subscribe(\r\n      (res: any) => {\r\n        this.userAccountList = res.responseData.data;\r\n        this.displayTable = true;\r\n        this.spinner.hide();\r\n        this.dataSource = new MatTableDataSource<UserAccount>(res.responseData.data);\r\n        // this.dataSource.paginator = this.formListComponent.paginator;\r\n        // this.dataSource.sort = this.formListComponent.sort;\r\n      }\r\n    )\r\n  }\r\n\r\n  getMaintenanceList(): void {\r\n    this.apiService.findAll(ENDPOINTS.activeCompanies).subscribe((res: any) => {\r\n      this.companyList = res.responseData.data;\r\n    }, (err: any) => {\r\n    });\r\n    this.apiService.findAll(ENDPOINTS.activeMembersAffiliation).subscribe((res: any) => {\r\n      this.affiliationList = res.responseData.data;\r\n    }, (err: any) => {\r\n    });\r\n    this.apiService.findAll(ENDPOINTS.roles).subscribe((res: any) => {\r\n      this.userRoleList = res.responseData.data;\r\n    }, (err: any) => {\r\n    });\r\n\r\n  }\r\n\r\n  compareMembersAffiliation(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  compareCompany(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.id === selected.id;\r\n    }\r\n  }\r\n\r\n  compareUserRole(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.id === selected.id;\r\n    }\r\n  }\r\n\r\n  confirmPassword(password): void {\r\n    if (this.userAccount.password === password) {\r\n      this.passwordMatch = true;\r\n    } else {\r\n      this.passwordMatch = false;\r\n    }\r\n  }\r\n\r\n  // get password() {\r\n  //   let password = this.accountInfo.controls[\"password\"].value;\r\n  //   if (password === null || password === '' || password === undefined) {\r\n  //     this.accountInfo.controls['password'].clearValidators();\r\n  //     this.accountInfo.controls[\"confirmPasswords\"].clearValidators();\r\n  //   } else {\r\n  //     this.accountInfo.controls['password'].setValidators([Validators.required, Validators.pattern('((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'), Validators.minLength(8)]);\r\n  //     this.accountInfo.controls[\"confirmPasswords\"].setValidators([Validators.required]);\r\n  //   }\r\n  //   this.accountInfo.controls['password'].updateValueAndValidity();\r\n  //   this.accountInfo.controls['confirmPasswords'].updateValueAndValidity();\r\n  //   return this.accountInfo.controls[\"password\"].value\r\n  // }\r\n  viewUserInformation(): void {\r\n    // if (this.isAscUser || this.userAccount.id) {\r\n    //   this.stepper.selectedIndex = 0;\r\n    // }\r\n    const accountId = this.formListComponent?.idForUpdate ?\r\n    this.formListComponent.idForUpdate : this.userAccount.id;\r\n\r\n    this.eSign.signatureAttachmentReference = null;\r\n    this.eSign.fileURL = null;\r\n    this.eSign.originalFilename = null;\r\n    this.apiService.findById(ENDPOINTS.userAccount, accountId).subscribe(\r\n      (res: any) => {\r\n        this.userAccount = res.responseData.data;\r\n        this.company = res.responseData.data.company;\r\n        this.affiliation = this.userAccount.company.membersAffiliation;\r\n        this.userRole = this.userAccount.userRole;\r\n        if (this.userAccount.signatureAttachmentReference) {\r\n          this.getEsignature()\r\n        } else {\r\n          this.selectFileButton.nativeElement.value = '';\r\n        }\r\n      });\r\n  }\r\n\r\n  openCompanyComponent(): void {\r\n    const dialogRef = this.dialog.open(AddCompanyComponent, {\r\n      width: '80%',\r\n      height: '85%',\r\n      data: {\r\n        isFromModal: true,\r\n        isUserRegistration: true\r\n      }\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      console.log('The dialog was closed', result);\r\n      if (result) {\r\n        this.company = result;\r\n      }\r\n      this.getUserPerTypeList();\r\n    });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.userInfo = this.formBuilder.group({\r\n      firstName: ['', Validators.required],\r\n      middleName: [''],\r\n      lastName: ['', Validators.required],\r\n      mobileNumber: ['', Validators.required],\r\n      userRole: [''],\r\n      company: [''],\r\n    });\r\n    this.eSignature = this.formBuilder.group({\r\n      eSignature: ['', Validators.required],\r\n    });\r\n\r\n    if (!this.isFromUserProfile) {\r\n      this.accountInfo = this.formBuilder.group({\r\n        userName: ['', [Validators.required, Validators.pattern('[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}')]],\r\n        // userRole: ['', Validators.required],\r\n        userRole: [''],\r\n        password: ['', [Validators.required, Validators.pattern('((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'), Validators.minLength(8)]],\r\n        confirmPasswords: ['', Validators.required],\r\n      });\r\n    } else {\r\n      this.accountInfo = this.formBuilder.group({\r\n        userName: ['', [Validators.required, Validators.pattern('[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}')]],\r\n        password: ['', Validators.required],\r\n        confirmPasswords: ['', Validators.required],\r\n      });\r\n    }\r\n    this.userAccountForm = new FormGroup({\r\n      userInfo: new FormControl(),\r\n      companyInfo: new FormControl(),\r\n      eSignature: new FormControl(),\r\n      accountInfo: new FormControl(),\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.userAccount = new UserAccount();\r\n    this.company = new Company();\r\n    this.affiliation = new Affiliation();\r\n    this.previewDocument = false;\r\n    this.userAccountForm.markAsUntouched();\r\n    this.userAccountForm.markAsPristine();\r\n    this.dialog.closeAll();\r\n    if (this.isFromUserProfile) {\r\n      this.dialog.closeAll();\r\n    } else {\r\n      this.router.navigate(['asc/page/maintenance/accounts']);\r\n    }\r\n\r\n  }\r\n\r\n  changeTab(evt) {\r\n    this.userAccount = new UserAccount();\r\n    this.resetFormValidator();\r\n    if (evt.index === 0) {\r\n      this.currentTab=\"NONASC\";\r\n      //     this.isUpdateAscUser = false;\r\n      this.getUserPerTypeList();\r\n      this.displayedColumns = [\r\n        'firstName',\r\n        'lastName',\r\n        'companyDescription',\r\n        'emailAddress',\r\n        'mobileNumber',\r\n        'status'\r\n      ];\r\n    } else if (evt.index === 1) {\r\n      this.currentTab=\"ASC\";\r\n      //     this.isUpdateAscUser = true;\r\n      this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\r\n      this.displayedColumns = [\r\n        'firstName',\r\n        'lastName',\r\n        'userRole',\r\n        'emailAddress',\r\n        'status'\r\n      ];\r\n    }\r\n  }\r\n\r\n  selectFile(event) {\r\n    this.isShowUploadButton = false;\r\n\r\n    if (event.target.files[0]) {\r\n      this.fileSize = event.target.files[0].size;\r\n\r\n      if (this.fileSize > 15000000) {\r\n        this.sweetAlertService.customErrorMessage(`Attachments total file size should not exceed 15MB.`);\r\n        event.target.value = '';\r\n        return;\r\n\r\n      } else {\r\n        this.isShowUploadButton = true;\r\n        const fileURL = URL.createObjectURL(event.target.files[0]);\r\n        this.previewDocument = true;\r\n\r\n        this.safeURLSignature = this.sanitizer.bypassSecurityTrustResourceUrl(fileURL);\r\n\r\n        const reader = new FileReader();\r\n        const [file] = event.target.files;\r\n\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => {\r\n        };\r\n\r\n        this.selectedFile = event.target.files[0];\r\n      }\r\n    }\r\n  }\r\n\r\n  viewDocument() {\r\n    if (this.uploadedSignatureFile) {\r\n      window.open(this.uploadedSignatureFile.fileURL);\r\n    } else {\r\n      window.open(this.eSign.fileURL);\r\n    }\r\n  }\r\n\r\n  uploadSignature() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to upload this as e-Signature?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.spinner.show();\r\n\r\n        // TODO: CHANGE ATTACHMENT TYPE WHEN SIGNATURE IS AVAILABLE IN BE\r\n        const accountId = this.formListComponent?.idForUpdate ?\r\n          this.formListComponent.idForUpdate : this.userAccount.id;\r\n        const params = `?accountId=${accountId}`;\r\n\r\n        this.fileStorageService.pushFileToStorage(ENDPOINTS.signature, this.selectedFile, params)\r\n          .subscribe((res: any) => {\r\n            this.uploadedSignatureFile = res.responseData.data;\r\n\r\n            this.addToESignature(this.uploadedSignatureFile);\r\n\r\n            this.userAccount.signatureAttachmentReference = this.uploadedSignatureFile.signatureAttachmentReference;\r\n            this.updateUserSignatureReference();\r\n            this.hideSpinner();\r\n            this.sweetAlertService.customSuccessMessage('Signature successfully uploaded.');\r\n            this.selectedFile = null;\r\n\r\n            this.getEsignature();\r\n            this.isShowUploadButton = false;\r\n\r\n          }, (err: any) => {\r\n            this.hideSpinner();\r\n            this.sweetAlertService.error(err);\r\n          }, () => {\r\n            this.hideSpinner();\r\n          });\r\n      } else {\r\n        this.selectedFile = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  updateUserSignatureReference() {\r\n    const endpoint = this.isAscUser ? ENDPOINTS.userAccount : ENDPOINTS.updateUserAccount;\r\n    this.apiService.update(endpoint, this.userAccount).subscribe(\r\n      (res: any) => {\r\n        console.log(res);\r\n      });\r\n  }\r\n\r\n  addToESignature(obj: any) {\r\n    this.eSign.signatureAttachmentReference = obj.signatureAttachmentReference;\r\n    this.eSign.id = obj.id;\r\n    this.eSign.originalFilename = obj.originalFilename;\r\n    this.eSign.filename = obj.filename;\r\n    this.eSign.fileExtension = obj.fileExtension;\r\n    this.eSign.fileURL = obj.fileURL;\r\n    this.eSign.accountId = obj.accountId;\r\n    this.eSign.documentFormat = obj.documentFormat;\r\n  }\r\n\r\n  hideSpinner() {\r\n    setTimeout(() => {\r\n      this.spinner.hide();\r\n    }, 1);\r\n  }\r\n\r\n  getEsignature() {\r\n    const accountId = this.formListComponent?.idForUpdate ?\r\n      this.formListComponent.idForUpdate : this.userAccount.id;\r\n    this.spinner.show();\r\n\r\n    this.apiService.findByParam(`${ENDPOINTS.signature}/account-id`, accountId).subscribe(\r\n      (res: any) => {\r\n        if (res) {\r\n          this.eSign = res?.responseData?.data;\r\n        }\r\n        this.hideSpinner();\r\n      }, (err: any) => {\r\n        this.hideSpinner();\r\n        console.error(err);\r\n      });\r\n  }\r\n\r\n  resendEmail(): void {\r\n    this.apiService.save(ENDPOINTS.adminResendVerificationCode + `/${this.userAccount.username}`, this.userAccount).subscribe(\r\n      (res: any) => {\r\n        this.sweetAlertService.customSuccessMessage('Email verification has been sent');\r\n      }\r\n    )\r\n  }\r\n\r\n  deleteESignature(): void {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to upload this as e-Signature?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.spinner.show();\r\n        this.apiService.deleteById(ENDPOINTS.signature, this.eSign?.id).subscribe(\r\n          res => {\r\n            this.eSign = new ESignature();\r\n            this.previewDocument = false;\r\n            this.spinner.hide();\r\n          }, err => this.spinner.hide());\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","<form>\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 title\">\r\n        <mat-label>\r\n          <span class=\"material-icons\">badge</span> User Account\r\n        </mat-label>\r\n      </div>\r\n    </div>\r\n    <hr>\r\n\r\n    <mat-tab-group dynamicHeight *ngIf=\"isAscUser || userAccount.id\">\r\n      <!-- 1 -->\r\n      <mat-tab label=\"User Details\">\r\n        <form [formGroup]=\"userInfo\">\r\n          <div class=\"fields\">\r\n            <h4>\r\n              <mat-icon>label_important</mat-icon> Personal Information:\r\n            </h4>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Given name: <span class=\"required-field\">\r\n                    <mat-icon>notification_important</mat-icon>\r\n                  </span></mat-label>\r\n                <input matInput [(ngModel)]=\"userAccount.firstName\" name=\"firstName\" formControlName=\"firstName\">\r\n              </mat-form-field>\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Middle name: </mat-label>\r\n                <input matInput [(ngModel)]=\"userAccount.middleName\" name=\"middleName\" formControlName=\"middleName\">\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Last name: <span class=\"required-field\">\r\n                    <mat-icon>notification_important</mat-icon>\r\n                  </span></mat-label>\r\n                <input matInput [(ngModel)]=\"userAccount.lastName\" name=\"lastName\" formControlName=\"lastName\">\r\n              </mat-form-field>\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Mobile Number: <mat-icon>notification_important</mat-icon></mat-label>\r\n                <input matInput [(ngModel)]=\"userAccount.mobileNumber\" name=\"mobileNumber\" placeholder=\"09xxxxxxxxx\"\r\n                  formControlName=\"mobileNumber\" (keydown)=\"validateFieldService.numbersOnly($event)\" maxlength=\"11\">\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\"\r\n              *ngIf=\"currentUserRole==='ROLE_SUPER_ADMIN' || currentUserRole==='ROLE_ADMIN'\">\r\n                <mat-label> User Role <mat-icon>notification_important</mat-icon>\r\n                </mat-label>\r\n                <mat-select [(ngModel)]=\"userAccount.userRole\" name=\"userRole\" [compareWith]=\"compareUserRole\"\r\n                  formControlName=\"userRole\" matNativeControl [disabled]=\"userAccount?.userRole?.name=='ROLE_APPLICANT'\">\r\n                  <mat-option *ngFor=\"let i of userRoleList\" [value]=\"i\">\r\n                    {{ i?.name?.replaceAll('ROLE_', '')?.replace('_', ' ')?.replace('ENCODER', 'EVALUATOR') }}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <div>\r\n              <button class=\"col\" mat-raised-button color=\"warn\" *ngIf=\"userAccount?.firstName != undefined\r\n              && userAccount?.status === 'VERIFICATION_SENT' && userAccount?.accountType === 'APPLICANT'\" (click)=\"resendEmail()\">\r\n              <span class=\"material-icons\">mail</span> Resend Email Verification\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"fields\" *ngIf=\"userAccount?.userRole?.name=='ROLE_APPLICANT' && !isAscUser\">\r\n            <h4>\r\n              <mat-icon>label_important</mat-icon> Company Information:\r\n            </h4>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-12\" appearance=\"outline\">\r\n                <mat-label> Company <mat-icon>notification_important</mat-icon>\r\n                </mat-label>\r\n                <mat-select [(ngModel)]=\"userAccount.company\" name=\"company\" [compareWith]=\"compareCompany\"\r\n                  formControlName=\"company\" matNativeControl (selectionChange)=\"getSelectedCompany($event)\">\r\n                  <mat-option (click)=\"openCompanyComponent()\">\r\n                    <span class=\"badge bg-success dd\">Add New Company</span>\r\n                  </mat-option>\r\n                  <mat-option *ngFor=\"let i of companyList\" [value]=\"i\">\r\n                    {{i.companyName}}\r\n                  </mat-option>\r\n\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Member Affiliation</mat-label>\r\n                <input matInput [value]=\"userAccount?.company?.membersAffiliation?.description\"\r\n                  name=\"membersAffiliation\" readonly>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Company Number: <span class=\"required-field\">*</span></mat-label>\r\n                <input matInput [value]=\"userAccount?.company?.companyMobileNo\" name=\"companyMobileNo\" readonly>\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Telephone Number: </mat-label>\r\n                <input matInput [value]=\"userAccount?.company?.companyTelephoneNo\" name=\"companyTelephoneNo\" readonly>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Alternative Telephone Number: </mat-label>\r\n                <input matInput [value]=\"userAccount?.company?.companyTelephoneNo2\" name=\"companyTelephoneNo2\" readonly>\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Contact Person: </mat-label>\r\n                <input matInput [value]=\"userAccount?.company?.contactPersonName\" name=\"contactPersonName\" readonly>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n                <mat-label> Contact Person Email: </mat-label>\r\n                <input matInput [value]=\"userAccount?.company?.contactPersonEmail\" name=\"contactPersonEmail\" readonly>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"col-md-12\" *ngIf=\"!userAccount?.id\">\r\n            <b><b class=\"material-icons\">error_outline</b> Note: Proceed to Account Information to complete adding of ASC user.</b>\r\n          </div>\r\n\r\n          <div class=\"container\">\r\n            <button mat-raised-button color=\"primary\" (click)=\"insert(false)\" [disabled]=\"!userInfo?.valid\" *ngIf=\"userAccount?.id\"><i class=\"material-icons color__white\">offline_pin</i> UPDATE</button>\r\n              <br>\r\n          </div>\r\n        </form>\r\n      </mat-tab>\r\n\r\n      <!-- 2 -->\r\n      <mat-tab label=\"E-Signature\" *ngIf=\"userAccount?.userRole?.name !== 'ROLE_APPLICANT' && userAccount?.id\">\r\n        <form [formGroup]=\"eSignature\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\" appearance=\"outline\">\r\n\r\n              <div class=\"row fields\">\r\n                <h4>\r\n                  <i class=\"material-icons\">upload</i> &nbsp;Upload e-Signature\r\n                </h4>\r\n                <br>\r\n\r\n                <div class=\"col-md-12\" appearance=\"outline\">\r\n                  <mat-label>Filename:  <mat-icon>notification_important</mat-icon></mat-label>\r\n                  <br>\r\n                  <br>\r\n                  <input #selectFileButton matInput [value]=\"eSign.originalFilename\" disabled\r\n                    *ngIf=\"eSign.originalFilename\">\r\n                  <input #selectFileButton class=\"file-upload\" type=\"file\" *ngIf=\"!eSign.originalFilename\" accept=\"image/*\"\r\n                    (change)=\"selectFile($event)\">\r\n                  <input type=\"hidden\" [(ngModel)]=\"eSign.signatureAttachmentReference\" formControlName=\"eSignature\">\r\n                  <br>\r\n                </div>\r\n                <div class=\"col-md-12\" appearance=\"outline\">\r\n\r\n                  <button mat-raised-button class=\"button-red button-right\" (click)=\"deleteESignature()\"\r\n                    *ngIf=\"eSign?.fileURL\">\r\n                    <i class=\"material-icons add-document color__white\">delete</i> DELETE E-SIGNATURE\r\n                  </button>\r\n\r\n                  <button mat-raised-button class=\"button-red button-right\" (click)=\"viewDocument()\"\r\n                    *ngIf=\"eSign?.signatureAttachmentReference\">\r\n                    <i class=\"material-icons add-document\">open_in_new</i> VIEW DOCUMENT\r\n                  </button>\r\n\r\n\r\n                  &nbsp; &nbsp;\r\n\r\n                  <button mat-raised-button class=\"button-red button-right\" (click)=\"uploadSignature()\"\r\n                    [disabled]=\"!safeURLSignature || !isShowUploadButton\" *ngIf=\"isShowUploadButton\">\r\n                    <i class=\"material-icons add-document color__white\">upload</i> UPLOAD\r\n                  </button>\r\n\r\n                  <br>\r\n                  <div class=\"row col-md-12\" appearance=\"outline\" *ngIf=\"previewDocument==true && (\r\n                          userAccount?.signatureAttachmentReference\r\n                        )\">\r\n                    <div class=\"file-upload\">\r\n                      <object [data]=\"safeURLSignature\" type=\"application/pdf\" width=\"100%\" height=\"400\">\r\n                        <iframe [src]=\"safeURLSignature\" width=\"100%\" height=\"400\">\r\n                          <p>This browser does not support PDF!</p>\r\n                        </iframe>\r\n                      </object>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"col-md-12\"><br></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </mat-tab>\r\n\r\n      <!-- 3 -->\r\n      <mat-tab label=\"Account Information\">\r\n        <form [formGroup]=\"accountInfo\">\r\n          <ng-template matStepLabel>Account Information</ng-template>\r\n          <div class=\"row fields\">\r\n            <h4>\r\n              <mat-icon>label_important</mat-icon> Account Information:\r\n            </h4>\r\n            <div class=\"row\">\r\n              <mat-form-field class=\"col-md-12\" appearance=\"outline\">\r\n                <mat-label> Email Address: <span class=\"required-field\">\r\n                    <mat-icon>notification_important</mat-icon>\r\n                  </span></mat-label>\r\n                <input matInput [(ngModel)]=\"userAccount.username\" name=\"userName\" formControlName=\"userName\"\r\n                  type=\"email\" [readonly]=\"userAccount?.id\">\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"row col-md-6\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label> Password:\r\n                  <span class=\"required-field\">\r\n                    <mat-icon>notification_important</mat-icon>\r\n                  </span>\r\n                </mat-label>\r\n                <input matInput [type]=\"hidePassword ? 'password' : 'text'\" [(ngModel)]=\"userAccount.password\"\r\n                  name=\"password\" formControlName=\"password\">\r\n                <button type=\"button\" mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\"\r\n                  [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hidePassword\">\r\n                  <mat-icon>{{hidePassword ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                </button>\r\n              </mat-form-field>\r\n              <p *ngIf=\"accountInfo.get('password').dirty && accountInfo.controls['password'].errors\" class=\"badge\">\r\n                <mat-icon>warning</mat-icon>\r\n                Password must contain lower,upper case letter and number.\r\n              </p>\r\n            </div>\r\n            <div class=\"row col-md-6\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label> Confirm Password:\r\n                  <span class=\"required-field\">\r\n                    <mat-icon>notification_important</mat-icon>\r\n                  </span>\r\n                </mat-label>\r\n                <input matInput [type]=\"hideConfirmPassword ? 'password' : 'text'\" [(ngModel)]=\"confirmPasswords\"\r\n                  name=\"confirmPasswords\" formControlName=\"confirmPasswords\"\r\n                  (keyup)=\"confirmPassword(confirmPasswords)\">\r\n                <button type=\"button\" mat-icon-button matSuffix (click)=\"hideConfirmPassword = !hideConfirmPassword\"\r\n                  [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hideConfirmPassword\">\r\n                  <mat-icon>{{hideConfirmPassword ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                </button>\r\n              </mat-form-field>\r\n              <p *ngIf=\"accountInfo.get('confirmPasswords').dirty && !passwordMatch\" class=\"badge\">\r\n                <mat-icon>warning</mat-icon>\r\n                Password not match\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </form>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-md-12\">\r\n            <button mat-raised-button color=\"primary\" (click)=\"insert(true)\" [disabled]=\"!userInfo?.valid || !accountInfo?.valid || !userAccount?.userRole || !userAccount?.password || !confirmPasswords\"\r\n            *ngIf=\"!userAccount?.id\"><i class=\"material-icons color__white\">offline_pin</i> SAVE</button>\r\n            <button mat-raised-button color=\"primary\" (click)=\"updateCredentials()\" [disabled]=\"!accountInfo?.valid\" [hidden]=\"!userAccount?.id\"><i class=\"material-icons color__white\">offline_pin</i> UPDATE</button>  \r\n          </div>\r\n        </div>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n\r\n    <div class=\"row\">\r\n      <br>\r\n      <div class=\"container\">\r\n        <mat-tab-group mat-align-tabs=\"start\" (selectedTabChange)=\"changeTab($event)\" *ngIf=\"!isFromUserProfile\">\r\n          <!-- displayed columns will be changed in changeTab() -->\r\n          <mat-tab label=\"Non ASC users\">\r\n\r\n          </mat-tab>\r\n          <mat-tab label=\"ASC users\">\r\n\r\n          </mat-tab>\r\n        </mat-tab-group>\r\n        <br>\r\n        <span *ngIf=\"!isFromUserProfile && displayTable\">\r\n          <app-form-list [dataSource]=\"dataSource\"\r\n            [displayedColumns]=\"displayedColumns\" (selectInListFunction)=\"viewUserInformation()\">\r\n          </app-form-list>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</form>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { UserAccountRoutingModule } from './user-account-routing.module';\r\nimport { UserAccountComponent } from './user-account.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [UserAccountComponent],\r\n  imports: [\r\n    CommonModule,\r\n    UserAccountRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule\r\n  ]\r\n})\r\nexport class UserAccountModule { }\r\n"]}