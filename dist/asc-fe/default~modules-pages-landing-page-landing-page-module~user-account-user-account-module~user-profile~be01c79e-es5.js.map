{"version":3,"sources":["webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/maintenance/user-account/user-account-routing.module.ts","webpack:///src/app/core/models/eSignature.model.ts","webpack:///src/app/modules/pages/maintenance/user-account/user-account.component.ts","webpack:///src/app/modules/pages/maintenance/user-account/user-account.component.html","webpack:///src/app/modules/pages/maintenance/user-account/user-account.module.ts"],"names":["routes","path","component","UserAccountRoutingModule","forChild","ESignature","validateFieldService","UserAccountComponent","apiService","formBuilder","sweetAlertService","dataStorageService","router","fileStorageService","spinner","sanitizer","dialog","dialogRef","data","displayedColumns","currentTab","userAccount","company","userRole","affiliation","eSign","userAccountList","userRoleList","companyList","affiliationList","displayTable","isShowUploadButton","previewDocument","passwordMatch","hidePassword","hideConfirmPassword","isFromUserProfile","isFromProfile","viewUserInformation","setFormValidator","getUserPerTypeList","getMaintenanceList","currentUserRole","getUserRole","username","toLowerCase","save","subscribe","res","undefined","customSuccessMessage","evt","index","name","ROLE_APPLICANT","accountInfo","reset","closeAll","err","customErrorMessage","error","message","console","log","resetFormValidator","ASC_USER","endpoint","updateUserAccount","update","isNewEntry","insert","updatedAccount","password","updatePassword","success","changeTab","i","findById","value","id","responseData","type","show","isAscUser","findAll","userAccountType","hide","dataSource","activeCompanies","activeMembersAffiliation","roles","selected","description","accountId","formListComponent","idForUpdate","signatureAttachmentReference","fileURL","originalFilename","membersAffiliation","getEsignature","selectFileButton","nativeElement","open","width","height","isFromModal","isUserRegistration","afterClosed","result","userInfo","group","firstName","required","middleName","lastName","mobileNumber","eSignature","userName","pattern","minLength","confirmPasswords","userAccountForm","companyInfo","markAsUntouched","markAsPristine","navigate","event","target","files","fileSize","size","URL","createObjectURL","safeURLSignature","bypassSecurityTrustResourceUrl","reader","FileReader","file","readAsDataURL","onload","selectedFile","uploadedSignatureFile","window","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","params","pushFileToStorage","signature","addToESignature","updateUserSignatureReference","hideSpinner","obj","filename","fileExtension","documentFormat","setTimeout","findByParam","adminResendVerificationCode","deleteById","UserAccountModule"],"mappings":"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","file":"default~modules-pages-landing-page-landing-page-module~user-account-user-account-module~user-profile~be01c79e-es5.js","sourcesContent":["export * from './form-action-buttons/form-action-buttons.component';\nexport * from './form-list/form-list.component';","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { UserAccountComponent } from './user-account.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UserAccountComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class UserAccountRoutingModule { }\n","export class ESignature {\n    id: number;\n    accountId: number;\n    originalFilename: string;\n    filename: string;\n    fileExtension: string;\n    fileURL: string;\n    documentFormat: string;\n    signatureAttachmentReference: string;\n}\n","import { Component, ElementRef, Inject, OnInit, Optional, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatStepper } from '@angular/material/stepper';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { FormListComponent } from '@fragments';\nimport { Affiliation, Company, UserAccount, UserRole } from '@models';\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\nimport { ACCOUNT_TYPE, ENDPOINTS, USER_ROLES } from '@shared';\nimport { ESignature } from 'app/core/models/eSignature.model';\nimport { FileStorageService } from 'app/core/services/file.storage.service';\nimport { ValidateFieldService } from 'app/core/services/validate-field.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport Swal from 'sweetalert2';\nimport { AddCompanyComponent } from '../../company/add-company/add-company.component';\n\n@Component({\n  selector: 'app-user-account',\n  templateUrl: './user-account.component.html',\n  styleUrls: ['./user-account.component.scss']\n})\nexport class UserAccountComponent implements OnInit {\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\n  @ViewChild('stepper') stepper: MatStepper;\n  @ViewChild('selectFileButton', { static: false }) selectFileButton: ElementRef;\n  dataSource: MatTableDataSource<UserAccount>;\n  displayedColumns: string[] = [\n    'firstName',\n    'lastName',\n    'companyDescription',\n    'emailAddress',\n    'mobileNumber',\n    'status'\n  ];\n  currentTab: string = \"NONASC\";\n  userAccount = new UserAccount();\n  company = new Company();\n  userRole = new UserRole();\n  affiliation = new Affiliation();\n  eSign = new ESignature();\n\n  userAccountForm: FormGroup;\n  userInfo: FormGroup;\n  companyInfo: FormGroup;\n  eSignature: FormGroup;\n  accountInfo: FormGroup;\n  userAccountList = [];\n  userRoleList = [];\n  companyList = [];\n  affiliationList = [];\n\n  displayTable = false;\n  isShowUploadButton = false;\n  previewDocument = false;\n  safeURLSignature: any;\n  selectedFile: File;\n  fileSize: number;\n  uploadedSignatureFile: any;\n\n  passwordMatch = false;\n  hidePassword = true;\n  hideConfirmPassword = true;\n  confirmPasswords: any;\n  isFromUserProfile = false;\n  currentUserRole: any;\n\n  isAscUser: boolean;\n  //isUpdateAscUser: boolean;\n\n  constructor(\n    private apiService: ApiService,\n    private formBuilder: FormBuilder,\n    private sweetAlertService: SweetAlertService,\n    private dataStorageService: DataStorageService,\n    public validateFieldService: ValidateFieldService,\n    private router: Router,\n    private fileStorageService: FileStorageService,\n    private spinner: NgxSpinnerService,\n    private sanitizer: DomSanitizer,\n    private dialog: MatDialog,\n    @Optional() public dialogRef: MatDialogRef<UserAccountComponent>,\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any) {\n    if (data) {\n      this.isFromUserProfile = data.isFromProfile;\n      this.userAccount = data.userAccount;\n      this.viewUserInformation();\n    }\n\n  }\n\n  ngOnInit(): void {\n    this.setFormValidator();\n    this.getUserPerTypeList();\n    this.getMaintenanceList();\n    // alert(this.isFromUserProfile)\n    this.currentUserRole = this.dataStorageService.getUserRole();\n\n  }\n\n  save(): void {\n    this.userAccount.username = this.userAccount.username.toLowerCase();\n    if (this.currentUserRole === 'ROLE_SUPER_ADMIN' || this.currentUserRole === 'ROLE_ADMIN') {\n      this.userAccount.company = null;\n    }\n    // this.apiService.save(ENDPOINTS.addUserAccount, this.userAccount).subscribe(\n    this.apiService.save(ENDPOINTS.userAccount, this.userAccount).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.customSuccessMessage('Account has been created successfully.');\n          const evt = { index: null };\n          if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\n            evt.index = 0;\n          } else {\n            evt.index = 1;\n          }\n          this.accountInfo.reset();\n          if (this.isFromUserProfile) {\n            this.dialog.closeAll();\n          }\n        }\n      }, (err: any) => {\n        this.sweetAlertService.customErrorMessage(err?.error?.message ? err.error.message : err.error);\n        console.log('ERROR:::', err);\n\n      }, () => {\n        this.resetFormValidator();\n        if(this.currentTab==\"NONASC\")this.getUserPerTypeList();\n        else if(this.currentTab==\"ASC\")this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\n        this.userAccount = new UserAccount();\n      });\n  }\n\n  update(): void {\n    console.log('update')\n    const endpoint = this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT ? ENDPOINTS.userAccount : ENDPOINTS.updateUserAccount;\n    this.apiService.update(endpoint, this.userAccount).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          // this.updateCredentials();\n          this.sweetAlertService.customSuccessMessage('Account was successfully updated');\n          const evt = { index: null };\n          console.log(this.userAccount);\n\n          if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\n            evt.index = 0;\n          } else {\n            evt.index = 1;\n          }\n          // this.changeTab(evt);\n          this.accountInfo.reset();\n          \n          if (this.isFromUserProfile) {\n            this.dialog.closeAll();\n          }\n        }\n      }, (err: any) => {\n        console.log(err);\n        this.sweetAlertService.error(err);\n      }, () => {\n        \n        if(this.currentTab==\"NONASC\")this.getUserPerTypeList();\n        else if(this.currentTab==\"ASC\")this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\n        this.userAccount = new UserAccount();\n        this.resetFormValidator();\n      });\n  }\n\n\n  insert(isNewEntry: boolean): void {\n    this.userAccount.username = this.userAccount.username.toLowerCase();\n    if (this.currentUserRole === 'ROLE_SUPER_ADMIN' || this.currentUserRole === 'ROLE_ADMIN') {\n      this.userAccount.company = null;\n    }\n    // this.apiService.save(ENDPOINTS.addUserAccount, this.userAccount).subscribe(\n    this.apiService.insert(ENDPOINTS.userAccount, this.userAccount, isNewEntry).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.customSuccessMessage(\n            isNewEntry? 'Account has been created successfully.': 'Account was successfully updated'\n          );\n          const evt = { index: null };\n          if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\n            evt.index = 0;\n          } else {\n            evt.index = 1;\n          }\n          this.accountInfo.reset();\n          if (this.isFromUserProfile) {\n            this.dialog.closeAll();\n          }\n        }\n      }, (err: any) => {\n        this.sweetAlertService.customErrorMessage(err?.error?.message ? err.error.message : err.error);\n        console.log('ERROR:::', err);\n\n      }, () => {\n        this.resetFormValidator();\n        if(this.currentTab==\"NONASC\")this.getUserPerTypeList();\n        else if(this.currentTab==\"ASC\")this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\n        this.userAccount = new UserAccount();\n      });\n  }\n\n  updateCredentials() {\n    const updatedAccount = {\n      password: this.userAccount.password,\n      username: this.userAccount.username,\n      userRole: this.userAccount.userRole\n    }\n    this.apiService.update(ENDPOINTS.updatePassword, updatedAccount).subscribe((res: any) => {\n      if (res !== undefined) {\n        this.sweetAlertService.success(res);\n        const evt = { index: null };\n        if (this.userAccount.userRole.name === USER_ROLES.ROLE_APPLICANT) {\n          evt.index = 0;\n        } else {\n          evt.index = 1;\n        }\n        this.changeTab(evt);\n        this.accountInfo.reset();\n      }\n    });\n  }\n\n  delete(): void {\n\n  }\n\n  getSelectedCompany(i): void {\n    if (i) {\n      this.apiService.findById(ENDPOINTS.company, i.value.id).subscribe(\n        (res: any) => {\n          this.company = res.responseData.data;\n        });\n    }\n  }\n\n  getUserPerTypeList(type = 'APPLICANT'): void {\n    this.spinner.show();\n    this.displayTable = false;\n\n    this.isAscUser = type !== 'APPLICANT';\n\n    this.apiService.findAll(`${ENDPOINTS.userAccountType}/${type}`).subscribe(\n      (res: any) => {\n        this.userAccountList = res.responseData.data;\n        this.displayTable = true;\n        this.spinner.hide();\n        this.dataSource = new MatTableDataSource<UserAccount>(res.responseData.data);\n        // this.dataSource.paginator = this.formListComponent.paginator;\n        // this.dataSource.sort = this.formListComponent.sort;\n      }\n    )\n  }\n\n  getMaintenanceList(): void {\n    this.apiService.findAll(ENDPOINTS.activeCompanies).subscribe((res: any) => {\n      this.companyList = res.responseData.data;\n    }, (err: any) => {\n    });\n    this.apiService.findAll(ENDPOINTS.activeMembersAffiliation).subscribe((res: any) => {\n      this.affiliationList = res.responseData.data;\n    }, (err: any) => {\n    });\n    this.apiService.findAll(ENDPOINTS.roles).subscribe((res: any) => {\n      this.userRoleList = res.responseData.data;\n    }, (err: any) => {\n    });\n\n  }\n\n  compareMembersAffiliation(value: any, selected: any): boolean {\n    if (value && selected) {\n      return value.description === selected.description;\n    }\n  }\n\n  compareCompany(value: any, selected: any): boolean {\n    if (value && selected) {\n      return value.id === selected.id;\n    }\n  }\n\n  compareUserRole(value: any, selected: any): boolean {\n    if (value && selected) {\n      return value.id === selected.id;\n    }\n  }\n\n  confirmPassword(password): void {\n    if (this.userAccount.password === password) {\n      this.passwordMatch = true;\n    } else {\n      this.passwordMatch = false;\n    }\n  }\n\n  // get password() {\n  //   let password = this.accountInfo.controls[\"password\"].value;\n  //   if (password === null || password === '' || password === undefined) {\n  //     this.accountInfo.controls['password'].clearValidators();\n  //     this.accountInfo.controls[\"confirmPasswords\"].clearValidators();\n  //   } else {\n  //     this.accountInfo.controls['password'].setValidators([Validators.required, Validators.pattern('((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'), Validators.minLength(8)]);\n  //     this.accountInfo.controls[\"confirmPasswords\"].setValidators([Validators.required]);\n  //   }\n  //   this.accountInfo.controls['password'].updateValueAndValidity();\n  //   this.accountInfo.controls['confirmPasswords'].updateValueAndValidity();\n  //   return this.accountInfo.controls[\"password\"].value\n  // }\n  viewUserInformation(): void {\n    // if (this.isAscUser || this.userAccount.id) {\n    //   this.stepper.selectedIndex = 0;\n    // }\n    const accountId = this.formListComponent?.idForUpdate ?\n    this.formListComponent.idForUpdate : this.userAccount.id;\n\n    this.eSign.signatureAttachmentReference = null;\n    this.eSign.fileURL = null;\n    this.eSign.originalFilename = null;\n    this.apiService.findById(ENDPOINTS.userAccount, accountId).subscribe(\n      (res: any) => {\n        this.userAccount = res.responseData.data;\n        this.company = res.responseData.data.company;\n        this.affiliation = this.userAccount.company.membersAffiliation;\n        this.userRole = this.userAccount.userRole;\n        if (this.userAccount.signatureAttachmentReference) {\n          this.getEsignature()\n        } else {\n          this.selectFileButton.nativeElement.value = '';\n        }\n      });\n  }\n\n  openCompanyComponent(): void {\n    const dialogRef = this.dialog.open(AddCompanyComponent, {\n      width: '80%',\n      height: '85%',\n      data: {\n        isFromModal: true,\n        isUserRegistration: true\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed', result);\n      if (result) {\n        this.company = result;\n      }\n      this.getUserPerTypeList();\n    });\n  }\n\n  setFormValidator(): void {\n    this.userInfo = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      middleName: [''],\n      lastName: ['', Validators.required],\n      mobileNumber: ['', Validators.required],\n      userRole: [''],\n      company: [''],\n    });\n    this.eSignature = this.formBuilder.group({\n      eSignature: ['', Validators.required],\n    });\n\n    if (!this.isFromUserProfile) {\n      this.accountInfo = this.formBuilder.group({\n        userName: ['', [Validators.required, Validators.pattern('[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}')]],\n        // userRole: ['', Validators.required],\n        userRole: [''],\n        password: ['', [Validators.required, Validators.pattern('((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'), Validators.minLength(8)]],\n        confirmPasswords: ['', Validators.required],\n      });\n    } else {\n      this.accountInfo = this.formBuilder.group({\n        userName: ['', [Validators.required, Validators.pattern('[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}')]],\n        password: ['', Validators.required],\n        confirmPasswords: ['', Validators.required],\n      });\n    }\n    this.userAccountForm = new FormGroup({\n      userInfo: new FormControl(),\n      companyInfo: new FormControl(),\n      eSignature: new FormControl(),\n      accountInfo: new FormControl(),\n    });\n  }\n\n  resetFormValidator(): void {\n    this.userAccount = new UserAccount();\n    this.company = new Company();\n    this.affiliation = new Affiliation();\n    this.previewDocument = false;\n    this.userAccountForm.markAsUntouched();\n    this.userAccountForm.markAsPristine();\n    this.dialog.closeAll();\n    if (this.isFromUserProfile) {\n      this.dialog.closeAll();\n    } else {\n      this.router.navigate(['asc/page/maintenance/accounts']);\n    }\n\n  }\n\n  changeTab(evt) {\n    this.userAccount = new UserAccount();\n    this.resetFormValidator();\n    if (evt.index === 0) {\n      this.currentTab=\"NONASC\";\n      //     this.isUpdateAscUser = false;\n      this.getUserPerTypeList();\n      this.displayedColumns = [\n        'firstName',\n        'lastName',\n        'companyDescription',\n        'emailAddress',\n        'mobileNumber',\n        'status'\n      ];\n    } else if (evt.index === 1) {\n      this.currentTab=\"ASC\";\n      //     this.isUpdateAscUser = true;\n      this.getUserPerTypeList(ACCOUNT_TYPE.ASC_USER);\n      this.displayedColumns = [\n        'firstName',\n        'lastName',\n        'userRole',\n        'emailAddress',\n        'status'\n      ];\n    }\n  }\n\n  selectFile(event) {\n    this.isShowUploadButton = false;\n\n    if (event.target.files[0]) {\n      this.fileSize = event.target.files[0].size;\n\n      if (this.fileSize > 15000000) {\n        this.sweetAlertService.customErrorMessage(`Attachments total file size should not exceed 15MB.`);\n        event.target.value = '';\n        return;\n\n      } else {\n        this.isShowUploadButton = true;\n        const fileURL = URL.createObjectURL(event.target.files[0]);\n        this.previewDocument = true;\n\n        this.safeURLSignature = this.sanitizer.bypassSecurityTrustResourceUrl(fileURL);\n\n        const reader = new FileReader();\n        const [file] = event.target.files;\n\n        reader.readAsDataURL(file);\n        reader.onload = () => {\n        };\n\n        this.selectedFile = event.target.files[0];\n      }\n    }\n  }\n\n  viewDocument() {\n    if (this.uploadedSignatureFile) {\n      window.open(this.uploadedSignatureFile.fileURL);\n    } else {\n      window.open(this.eSign.fileURL);\n    }\n  }\n\n  uploadSignature() {\n    Swal.fire({\n      text: 'Are you sure you want to upload this as e-Signature?',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Confirm'\n    }).then((result) => {\n      if (result.value) {\n        this.spinner.show();\n\n        // TODO: CHANGE ATTACHMENT TYPE WHEN SIGNATURE IS AVAILABLE IN BE\n        const accountId = this.formListComponent?.idForUpdate ?\n          this.formListComponent.idForUpdate : this.userAccount.id;\n        const params = `?accountId=${accountId}`;\n\n        this.fileStorageService.pushFileToStorage(ENDPOINTS.signature, this.selectedFile, params)\n          .subscribe((res: any) => {\n            this.uploadedSignatureFile = res.responseData.data;\n\n            this.addToESignature(this.uploadedSignatureFile);\n\n            this.userAccount.signatureAttachmentReference = this.uploadedSignatureFile.signatureAttachmentReference;\n            this.updateUserSignatureReference();\n            this.hideSpinner();\n            this.sweetAlertService.customSuccessMessage('Signature successfully uploaded.');\n            this.selectedFile = null;\n\n            this.getEsignature();\n            this.isShowUploadButton = false;\n\n          }, (err: any) => {\n            this.hideSpinner();\n            this.sweetAlertService.error(err);\n          }, () => {\n            this.hideSpinner();\n          });\n      } else {\n        this.selectedFile = null;\n      }\n    });\n  }\n\n  updateUserSignatureReference() {\n    const endpoint = this.isAscUser ? ENDPOINTS.userAccount : ENDPOINTS.updateUserAccount;\n    this.apiService.update(endpoint, this.userAccount).subscribe(\n      (res: any) => {\n        console.log(res);\n      });\n  }\n\n  addToESignature(obj: any) {\n    this.eSign.signatureAttachmentReference = obj.signatureAttachmentReference;\n    this.eSign.id = obj.id;\n    this.eSign.originalFilename = obj.originalFilename;\n    this.eSign.filename = obj.filename;\n    this.eSign.fileExtension = obj.fileExtension;\n    this.eSign.fileURL = obj.fileURL;\n    this.eSign.accountId = obj.accountId;\n    this.eSign.documentFormat = obj.documentFormat;\n  }\n\n  hideSpinner() {\n    setTimeout(() => {\n      this.spinner.hide();\n    }, 1);\n  }\n\n  getEsignature() {\n    const accountId = this.formListComponent?.idForUpdate ?\n      this.formListComponent.idForUpdate : this.userAccount.id;\n    this.spinner.show();\n\n    this.apiService.findByParam(`${ENDPOINTS.signature}/account-id`, accountId).subscribe(\n      (res: any) => {\n        if (res) {\n          this.eSign = res?.responseData?.data;\n        }\n        this.hideSpinner();\n      }, (err: any) => {\n        this.hideSpinner();\n        console.error(err);\n      });\n  }\n\n  resendEmail(): void {\n    this.apiService.save(ENDPOINTS.adminResendVerificationCode + `/${this.userAccount.username}`, this.userAccount).subscribe(\n      (res: any) => {\n        this.sweetAlertService.customSuccessMessage('Email verification has been sent');\n      }\n    )\n  }\n\n  deleteESignature(): void {\n    Swal.fire({\n      text: 'Are you sure you want to upload this as e-Signature?',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Confirm'\n    }).then((result) => {\n      if (result.value) {\n        this.spinner.show();\n        this.apiService.deleteById(ENDPOINTS.signature, this.eSign?.id).subscribe(\n          res => {\n            this.eSign = new ESignature();\n            this.previewDocument = false;\n            this.spinner.hide();\n          }, err => this.spinner.hide());\n      }\n    });\n  }\n\n}\n","<form>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-12 title\">\n        <mat-label>\n          <span class=\"material-icons\">badge</span> User Account\n        </mat-label>\n      </div>\n    </div>\n    <hr>\n\n    <mat-tab-group dynamicHeight *ngIf=\"isAscUser || userAccount.id\">\n      <!-- 1 -->\n      <mat-tab label=\"User Details\">\n        <form [formGroup]=\"userInfo\">\n          <div class=\"fields\">\n            <h4>\n              <mat-icon>label_important</mat-icon> Personal Information:\n            </h4>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Given name: <span class=\"required-field\">\n                    <mat-icon>notification_important</mat-icon>\n                  </span></mat-label>\n                <input matInput [(ngModel)]=\"userAccount.firstName\" name=\"firstName\" formControlName=\"firstName\">\n              </mat-form-field>\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Middle name: </mat-label>\n                <input matInput [(ngModel)]=\"userAccount.middleName\" name=\"middleName\" formControlName=\"middleName\">\n              </mat-form-field>\n            </div>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Last name: <span class=\"required-field\">\n                    <mat-icon>notification_important</mat-icon>\n                  </span></mat-label>\n                <input matInput [(ngModel)]=\"userAccount.lastName\" name=\"lastName\" formControlName=\"lastName\">\n              </mat-form-field>\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Mobile Number: <mat-icon>notification_important</mat-icon></mat-label>\n                <input matInput [(ngModel)]=\"userAccount.mobileNumber\" name=\"mobileNumber\" placeholder=\"09xxxxxxxxx\"\n                  formControlName=\"mobileNumber\" (keydown)=\"validateFieldService.numbersOnly($event)\" maxlength=\"11\">\n              </mat-form-field>\n            </div>\n\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\"\n              *ngIf=\"currentUserRole==='ROLE_SUPER_ADMIN' || currentUserRole==='ROLE_ADMIN'\">\n                <mat-label> User Role <mat-icon>notification_important</mat-icon>\n                </mat-label>\n                <mat-select [(ngModel)]=\"userAccount.userRole\" name=\"userRole\" [compareWith]=\"compareUserRole\"\n                  formControlName=\"userRole\" matNativeControl [disabled]=\"userAccount?.userRole?.name=='ROLE_APPLICANT'\">\n                  <mat-option *ngFor=\"let i of userRoleList\" [value]=\"i\">\n                    {{ i?.name?.replaceAll('ROLE_', '')?.replace('_', ' ')?.replace('ENCODER', 'EVALUATOR') }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n            </div>\n\n            <div>\n              <button class=\"col\" mat-raised-button color=\"warn\" *ngIf=\"userAccount?.firstName != undefined\n              && userAccount?.status === 'VERIFICATION_SENT' && userAccount?.accountType === 'APPLICANT'\" (click)=\"resendEmail()\">\n              <span class=\"material-icons\">mail</span> Resend Email Verification\n              </button>\n            </div>\n          </div>\n\n          <div class=\"fields\" *ngIf=\"userAccount?.userRole?.name=='ROLE_APPLICANT' && !isAscUser\">\n            <h4>\n              <mat-icon>label_important</mat-icon> Company Information:\n            </h4>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-12\" appearance=\"outline\">\n                <mat-label> Company <mat-icon>notification_important</mat-icon>\n                </mat-label>\n                <mat-select [(ngModel)]=\"userAccount.company\" name=\"company\" [compareWith]=\"compareCompany\"\n                  formControlName=\"company\" matNativeControl (selectionChange)=\"getSelectedCompany($event)\">\n                  <mat-option (click)=\"openCompanyComponent()\">\n                    <span class=\"badge bg-success dd\">Add New Company</span>\n                  </mat-option>\n                  <mat-option *ngFor=\"let i of companyList\" [value]=\"i\">\n                    {{i.companyName}}\n                  </mat-option>\n\n                </mat-select>\n              </mat-form-field>\n            </div>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Member Affiliation</mat-label>\n                <input matInput [value]=\"userAccount?.company?.membersAffiliation?.description\"\n                  name=\"membersAffiliation\" readonly>\n              </mat-form-field>\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Company Number: <span class=\"required-field\">*</span></mat-label>\n                <input matInput [value]=\"userAccount?.company?.companyMobileNo\" name=\"companyMobileNo\" readonly>\n              </mat-form-field>\n            </div>\n\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Telephone Number: </mat-label>\n                <input matInput [value]=\"userAccount?.company?.companyTelephoneNo\" name=\"companyTelephoneNo\" readonly>\n              </mat-form-field>\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Alternative Telephone Number: </mat-label>\n                <input matInput [value]=\"userAccount?.company?.companyTelephoneNo2\" name=\"companyTelephoneNo2\" readonly>\n              </mat-form-field>\n            </div>\n\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Contact Person: </mat-label>\n                <input matInput [value]=\"userAccount?.company?.contactPersonName\" name=\"contactPersonName\" readonly>\n              </mat-form-field>\n              <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n                <mat-label> Contact Person Email: </mat-label>\n                <input matInput [value]=\"userAccount?.company?.contactPersonEmail\" name=\"contactPersonEmail\" readonly>\n              </mat-form-field>\n            </div>\n          </div>\n\n          <div class=\"col-md-12\" *ngIf=\"!userAccount?.id\">\n            <b><b class=\"material-icons\">error_outline</b> Note: Proceed to Account Information to complete adding of ASC user.</b>\n          </div>\n\n          <div class=\"container\">\n            <button mat-raised-button color=\"primary\" (click)=\"insert(false)\" [disabled]=\"!userInfo?.valid\" *ngIf=\"userAccount?.id\"><i class=\"material-icons color__white\">offline_pin</i> UPDATE</button>\n              <br>\n          </div>\n        </form>\n      </mat-tab>\n\n      <!-- 2 -->\n      <mat-tab label=\"E-Signature\" *ngIf=\"userAccount?.userRole?.name !== 'ROLE_APPLICANT' && userAccount?.id\">\n        <form [formGroup]=\"eSignature\">\n          <div class=\"row\">\n            <div class=\"col-md-12\" appearance=\"outline\">\n\n              <div class=\"row fields\">\n                <h4>\n                  <i class=\"material-icons\">upload</i> &nbsp;Upload e-Signature\n                </h4>\n                <br>\n\n                <div class=\"col-md-12\" appearance=\"outline\">\n                  <mat-label>Filename:  <mat-icon>notification_important</mat-icon></mat-label>\n                  <br>\n                  <br>\n                  <input #selectFileButton matInput [value]=\"eSign.originalFilename\" disabled\n                    *ngIf=\"eSign.originalFilename\">\n                  <input #selectFileButton class=\"file-upload\" type=\"file\" *ngIf=\"!eSign.originalFilename\" accept=\"image/*\"\n                    (change)=\"selectFile($event)\">\n                  <input type=\"hidden\" [(ngModel)]=\"eSign.signatureAttachmentReference\" formControlName=\"eSignature\">\n                  <br>\n                </div>\n                <div class=\"col-md-12\" appearance=\"outline\">\n\n                  <button mat-raised-button class=\"button-red button-right\" (click)=\"deleteESignature()\"\n                    *ngIf=\"eSign?.fileURL\">\n                    <i class=\"material-icons add-document color__white\">delete</i> DELETE E-SIGNATURE\n                  </button>\n\n                  <button mat-raised-button class=\"button-red button-right\" (click)=\"viewDocument()\"\n                    *ngIf=\"eSign?.signatureAttachmentReference\">\n                    <i class=\"material-icons add-document\">open_in_new</i> VIEW DOCUMENT\n                  </button>\n\n\n                  &nbsp; &nbsp;\n\n                  <button mat-raised-button class=\"button-red button-right\" (click)=\"uploadSignature()\"\n                    [disabled]=\"!safeURLSignature || !isShowUploadButton\" *ngIf=\"isShowUploadButton\">\n                    <i class=\"material-icons add-document color__white\">upload</i> UPLOAD\n                  </button>\n\n                  <br>\n                  <div class=\"row col-md-12\" appearance=\"outline\" *ngIf=\"previewDocument==true && (\n                          userAccount?.signatureAttachmentReference\n                        )\">\n                    <div class=\"file-upload\">\n                      <object [data]=\"safeURLSignature\" type=\"application/pdf\" width=\"100%\" height=\"400\">\n                        <iframe [src]=\"safeURLSignature\" width=\"100%\" height=\"400\">\n                          <p>This browser does not support PDF!</p>\n                        </iframe>\n                      </object>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"col-md-12\"><br></div>\n              </div>\n            </div>\n          </div>\n        </form>\n      </mat-tab>\n\n      <!-- 3 -->\n      <mat-tab label=\"Account Information\">\n        <form [formGroup]=\"accountInfo\">\n          <ng-template matStepLabel>Account Information</ng-template>\n          <div class=\"row fields\">\n            <h4>\n              <mat-icon>label_important</mat-icon> Account Information:\n            </h4>\n            <div class=\"row\">\n              <mat-form-field class=\"col-md-12\" appearance=\"outline\">\n                <mat-label> Email Address: <span class=\"required-field\">\n                    <mat-icon>notification_important</mat-icon>\n                  </span></mat-label>\n                <input matInput [(ngModel)]=\"userAccount.username\" name=\"userName\" formControlName=\"userName\"\n                  type=\"email\" [readonly]=\"userAccount?.id\">\n              </mat-form-field>\n            </div>\n            <div class=\"row col-md-6\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label> Password:\n                  <span class=\"required-field\">\n                    <mat-icon>notification_important</mat-icon>\n                  </span>\n                </mat-label>\n                <input matInput [type]=\"hidePassword ? 'password' : 'text'\" [(ngModel)]=\"userAccount.password\"\n                  name=\"password\" formControlName=\"password\">\n                <button type=\"button\" mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\"\n                  [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hidePassword\">\n                  <mat-icon>{{hidePassword ? 'visibility_off' : 'visibility'}}</mat-icon>\n                </button>\n              </mat-form-field>\n              <p *ngIf=\"accountInfo.get('password').dirty && accountInfo.controls['password'].errors\" class=\"badge\">\n                <mat-icon>warning</mat-icon>\n                Password must contain lower,upper case letter and number.\n              </p>\n            </div>\n            <div class=\"row col-md-6\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label> Confirm Password:\n                  <span class=\"required-field\">\n                    <mat-icon>notification_important</mat-icon>\n                  </span>\n                </mat-label>\n                <input matInput [type]=\"hideConfirmPassword ? 'password' : 'text'\" [(ngModel)]=\"confirmPasswords\"\n                  name=\"confirmPasswords\" formControlName=\"confirmPasswords\"\n                  (keyup)=\"confirmPassword(confirmPasswords)\">\n                <button type=\"button\" mat-icon-button matSuffix (click)=\"hideConfirmPassword = !hideConfirmPassword\"\n                  [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hideConfirmPassword\">\n                  <mat-icon>{{hideConfirmPassword ? 'visibility_off' : 'visibility'}}</mat-icon>\n                </button>\n              </mat-form-field>\n              <p *ngIf=\"accountInfo.get('confirmPasswords').dirty && !passwordMatch\" class=\"badge\">\n                <mat-icon>warning</mat-icon>\n                Password not match\n              </p>\n            </div>\n          </div>\n        </form>\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <button mat-raised-button color=\"primary\" (click)=\"insert(true)\" [disabled]=\"!userInfo?.valid || !accountInfo?.valid || !userAccount?.userRole || !userAccount?.password || !confirmPasswords\"\n            *ngIf=\"!userAccount?.id\"><i class=\"material-icons color__white\">offline_pin</i> SAVE</button>\n            <button mat-raised-button color=\"primary\" (click)=\"updateCredentials()\" [disabled]=\"!accountInfo?.valid\" [hidden]=\"!userAccount?.id\"><i class=\"material-icons color__white\">offline_pin</i> UPDATE</button>  \n          </div>\n        </div>\n      </mat-tab>\n    </mat-tab-group>\n\n    <div class=\"row\">\n      <br>\n      <div class=\"container\">\n        <mat-tab-group mat-align-tabs=\"start\" (selectedTabChange)=\"changeTab($event)\" *ngIf=\"!isFromUserProfile\">\n          <!-- displayed columns will be changed in changeTab() -->\n          <mat-tab label=\"Non ASC users\">\n\n          </mat-tab>\n          <mat-tab label=\"ASC users\">\n\n          </mat-tab>\n        </mat-tab-group>\n        <br>\n        <span *ngIf=\"!isFromUserProfile && displayTable\">\n          <app-form-list [dataSource]=\"dataSource\"\n            [displayedColumns]=\"displayedColumns\" (selectInListFunction)=\"viewUserInformation()\">\n          </app-form-list>\n        </span>\n      </div>\n    </div>\n  </div>\n</form>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UserAccountRoutingModule } from './user-account-routing.module';\nimport { UserAccountComponent } from './user-account.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AngularMaterialModule } from '@shared';\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\n\n\n@NgModule({\n  declarations: [UserAccountComponent],\n  imports: [\n    CommonModule,\n    UserAccountRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n    FragmentsModule\n  ]\n})\nexport class UserAccountModule { }\n"]}