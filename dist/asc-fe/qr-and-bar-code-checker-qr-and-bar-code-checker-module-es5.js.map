{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/qr-and-bar-code-checker/qr-and-bar-code-checker.module.ts","webpack:///src/app/modules/pages/maintenance/qr-and-bar-code-checker/qr-and-bar-code-checker-routing.module.ts","webpack:///src/app/modules/pages/maintenance/qr-and-bar-code-checker/qr-and-bar-code-checker.component.ts","webpack:///src/app/modules/pages/maintenance/qr-and-bar-code-checker/qr-and-bar-code-checker.component.html"],"names":["QrAndBarCodeCheckerModule","routes","path","component","QrAndBarCodeCheckerRoutingModule","forChild","QrAndBarCodeCheckerComponent","apiService","formBuilder","sweetAlertService","qrAndBarCodeChecker","qrAndBarCodeCheckerTypeList","qrAndBarCodeCheckerType","qrBarCodeValid","setFormValidator","endpoint","s1QrCheck","s2QrCheck","qrOrBarCode","save","subscribe","res","err","customErrorMessage","qrAndBarCodeCheckerForm","group","applicationType","required","markAsUntouched","markAsPristine","validate","resetFormValidator"],"mappings":"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","file":"qr-and-bar-code-checker-qr-and-bar-code-checker-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { QrAndBarCodeCheckerRoutingModule } from './qr-and-bar-code-checker-routing.module';\nimport { QrAndBarCodeCheckerComponent } from './qr-and-bar-code-checker.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AngularMaterialModule } from '@shared';\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\n\n\n@NgModule({\n  declarations: [QrAndBarCodeCheckerComponent],\n  imports: [\n    CommonModule,\n    QrAndBarCodeCheckerRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n    FragmentsModule,\n  ]\n})\nexport class QrAndBarCodeCheckerModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { QrAndBarCodeCheckerComponent } from './qr-and-bar-code-checker.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: QrAndBarCodeCheckerComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class QrAndBarCodeCheckerRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ApiService, SweetAlertService } from '@services';\nimport { ENDPOINTS } from '@shared';\nimport { QrAndBarCodeChecker } from 'app/core/models/qrAndBarCodeChecker.model';\n\n@Component({\n  selector: 'app-qr-and-bar-code-checker',\n  templateUrl: './qr-and-bar-code-checker.component.html',\n  styleUrls: ['./qr-and-bar-code-checker.component.scss']\n})\nexport class QrAndBarCodeCheckerComponent implements OnInit {\n\n  qrAndBarCodeChecker = new QrAndBarCodeChecker();\n  qrAndBarCodeCheckerForm: FormGroup;\n  qrAndBarCodeCheckerTypeList = ['S1', 'S2'];\n  qrAndBarCodeCheckerType = '';\n\n  qrBarCodeValid: boolean = false;\n\n  constructor(\n    private apiService: ApiService,\n    private formBuilder: FormBuilder,\n    private sweetAlertService: SweetAlertService,\n  ) { }\n\n  ngOnInit(): void {\n    this.setFormValidator();\n  }\n\n  validate(): void {\n    let endpoint = this.qrAndBarCodeCheckerType === 'S1' ? ENDPOINTS.s1QrCheck : ENDPOINTS.s2QrCheck;\n    endpoint += this.qrAndBarCodeChecker.qrOrBarCode;\n\n    this.apiService.save(endpoint, this.qrAndBarCodeChecker).subscribe(\n      res => {\n        this.qrBarCodeValid = true;\n      }, err => {\n        this.qrBarCodeValid = false;\n        this.sweetAlertService.customErrorMessage('QR or Bar Code is Invalid. Please try again.');\n      }\n    );\n  }\n\n  setFormValidator(): void {\n    this.qrAndBarCodeCheckerForm = this.formBuilder.group({\n      applicationType: ['', Validators.required],\n      qrOrBarCode: ['', Validators.required],\n    });\n  }\n\n  resetFormValidator(): void {\n    this.qrAndBarCodeChecker = new QrAndBarCodeChecker();\n    this.qrAndBarCodeCheckerForm.markAsUntouched();\n    this.qrAndBarCodeCheckerForm.markAsPristine();\n  }\n\n}\n","<form>\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-12 title\">\n                <mat-label>\n                    <span class=\"material-icons\">qr_code_scanner</span> QR and BAR CODE Checker\n                </mat-label>\n            </div>\n        </div>\n        <hr>\n\n        <div class=\"row\">\n            <div class=\"col-md-7 form-group\">\n                <form [formGroup]=\"qrAndBarCodeCheckerForm\">\n                    <div class=\"row\">\n\n                        <mat-form-field appearance=\"outline\">\n                          <mat-label>Application Type</mat-label>\n                          <mat-select [(ngModel)]=\"qrAndBarCodeCheckerType\" name=\"applicationType\" formControlName=\"applicationType\">\n                            <mat-option *ngFor=\"let i of qrAndBarCodeCheckerTypeList\" [value]=\"i\">\n                              {{i}} Application\n                            </mat-option>\n                          </mat-select>\n                        </mat-form-field>\n\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>QR/BAR CODE: <span class=\"required-field\">*</span></mat-label>\n                            <input matInput [(ngModel)]=\"qrAndBarCodeChecker.qrOrBarCode\" name=\"qrOrBarCode\"\n                                formControlName=\"qrOrBarCode\">\n                        </mat-form-field>\n\n                        <app-form-action-buttons [childObject]=\"qrAndBarCodeChecker\" [childForm]=\"qrAndBarCodeCheckerForm\"\n                            (validateFunction)=\"validate()\" (cancelFunction)=\"resetFormValidator()\">\n                        </app-form-action-buttons>\n                    </div>\n                </form>\n            </div>\n            <div class=\"col-md-5 message-output\">\n                <span class=\"badge bg-success\" *ngIf=\"qrBarCodeValid\">VALID</span>\n                <span class=\"badge bg-danger\" *ngIf=\"!qrBarCodeValid\">INVALID</span>\n            </div>\n        </div>\n    </div>\n</form>\n\n"]}