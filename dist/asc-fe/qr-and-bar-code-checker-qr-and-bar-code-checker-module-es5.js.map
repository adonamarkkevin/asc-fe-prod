{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/qr-and-bar-code-checker/qr-and-bar-code-checker.module.ts","webpack:///src/app/modules/pages/maintenance/qr-and-bar-code-checker/qr-and-bar-code-checker-routing.module.ts","webpack:///src/app/modules/pages/maintenance/qr-and-bar-code-checker/qr-and-bar-code-checker.component.ts","webpack:///src/app/modules/pages/maintenance/qr-and-bar-code-checker/qr-and-bar-code-checker.component.html"],"names":["QrAndBarCodeCheckerModule","routes","path","component","QrAndBarCodeCheckerRoutingModule","forChild","QrAndBarCodeCheckerComponent","apiService","formBuilder","sweetAlertService","qrAndBarCodeChecker","qrAndBarCodeCheckerTypeList","qrAndBarCodeCheckerType","qrBarCodeValid","setFormValidator","endpoint","s1QrCheck","s2QrCheck","qrOrBarCode","save","subscribe","res","err","customErrorMessage","qrAndBarCodeCheckerForm","group","applicationType","required","markAsUntouched","markAsPristine","validate","resetFormValidator"],"mappings":"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","file":"qr-and-bar-code-checker-qr-and-bar-code-checker-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { QrAndBarCodeCheckerRoutingModule } from './qr-and-bar-code-checker-routing.module';\r\nimport { QrAndBarCodeCheckerComponent } from './qr-and-bar-code-checker.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [QrAndBarCodeCheckerComponent],\r\n  imports: [\r\n    CommonModule,\r\n    QrAndBarCodeCheckerRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule,\r\n  ]\r\n})\r\nexport class QrAndBarCodeCheckerModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { QrAndBarCodeCheckerComponent } from './qr-and-bar-code-checker.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: QrAndBarCodeCheckerComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class QrAndBarCodeCheckerRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { ENDPOINTS } from '@shared';\r\nimport { QrAndBarCodeChecker } from 'app/core/models/qrAndBarCodeChecker.model';\r\n\r\n@Component({\r\n  selector: 'app-qr-and-bar-code-checker',\r\n  templateUrl: './qr-and-bar-code-checker.component.html',\r\n  styleUrls: ['./qr-and-bar-code-checker.component.scss']\r\n})\r\nexport class QrAndBarCodeCheckerComponent implements OnInit {\r\n\r\n  qrAndBarCodeChecker = new QrAndBarCodeChecker();\r\n  qrAndBarCodeCheckerForm: FormGroup;\r\n  qrAndBarCodeCheckerTypeList = ['S1', 'S2'];\r\n  qrAndBarCodeCheckerType = '';\r\n\r\n  qrBarCodeValid: boolean = false;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.setFormValidator();\r\n  }\r\n\r\n  validate(): void {\r\n    let endpoint = this.qrAndBarCodeCheckerType === 'S1' ? ENDPOINTS.s1QrCheck : ENDPOINTS.s2QrCheck;\r\n    endpoint += this.qrAndBarCodeChecker.qrOrBarCode;\r\n\r\n    this.apiService.save(endpoint, this.qrAndBarCodeChecker).subscribe(\r\n      res => {\r\n        this.qrBarCodeValid = true;\r\n      }, err => {\r\n        this.qrBarCodeValid = false;\r\n        this.sweetAlertService.customErrorMessage('QR or Bar Code is Invalid. Please try again.');\r\n      }\r\n    );\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.qrAndBarCodeCheckerForm = this.formBuilder.group({\r\n      applicationType: ['', Validators.required],\r\n      qrOrBarCode: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.qrAndBarCodeChecker = new QrAndBarCodeChecker();\r\n    this.qrAndBarCodeCheckerForm.markAsUntouched();\r\n    this.qrAndBarCodeCheckerForm.markAsPristine();\r\n  }\r\n\r\n}\r\n","<form>\r\n    <div class=\"container-fluid\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12 title\">\r\n                <mat-label>\r\n                    <span class=\"material-icons\">qr_code_scanner</span> QR and BAR CODE Checker\r\n                </mat-label>\r\n            </div>\r\n        </div>\r\n        <hr>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-md-7 form-group\">\r\n                <form [formGroup]=\"qrAndBarCodeCheckerForm\">\r\n                    <div class=\"row\">\r\n\r\n                        <mat-form-field appearance=\"outline\">\r\n                          <mat-label>Application Type</mat-label>\r\n                          <mat-select [(ngModel)]=\"qrAndBarCodeCheckerType\" name=\"applicationType\" formControlName=\"applicationType\">\r\n                            <mat-option *ngFor=\"let i of qrAndBarCodeCheckerTypeList\" [value]=\"i\">\r\n                              {{i}} Application\r\n                            </mat-option>\r\n                          </mat-select>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>QR/BAR CODE: <span class=\"required-field\">*</span></mat-label>\r\n                            <input matInput [(ngModel)]=\"qrAndBarCodeChecker.qrOrBarCode\" name=\"qrOrBarCode\"\r\n                                formControlName=\"qrOrBarCode\">\r\n                        </mat-form-field>\r\n\r\n                        <app-form-action-buttons [childObject]=\"qrAndBarCodeChecker\" [childForm]=\"qrAndBarCodeCheckerForm\"\r\n                            (validateFunction)=\"validate()\" (cancelFunction)=\"resetFormValidator()\">\r\n                        </app-form-action-buttons>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <div class=\"col-md-5 message-output\">\r\n                <span class=\"badge bg-success\" *ngIf=\"qrBarCodeValid\">VALID</span>\r\n                <span class=\"badge bg-danger\" *ngIf=\"!qrBarCodeValid\">INVALID</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>\r\n\r\n"]}