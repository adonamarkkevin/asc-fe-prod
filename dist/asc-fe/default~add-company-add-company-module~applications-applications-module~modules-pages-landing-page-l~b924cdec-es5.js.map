{"version":3,"sources":["webpack:///src/app/modules/pages/company/add-company/add-company.component.ts","webpack:///src/app/modules/pages/company/add-company/add-company.component.html","webpack:///src/app/core/services/address/address.service.ts"],"names":["AddCompanyComponent","apiService","addressService","formBuilder","dataStorage","sweetAlertService","validateFieldService","route","router","matDialog","dialogRef","data","displayedColumns","countryList","companyList","affiliationList","regionsList","provinceList","cityMunicipalityList","barangayList","statusList","yesNoList","company","todayDate","Date","notForeignAddress","isFromModal","isUserRegistration","showApproveRejectButton","dataForModal","dataFromModal","isUpdate","country","additionalStatus","status","push","currentUser","getUserAccount","setFormValidator","getCountries","getAffiliationList","id","Number","snapshot","paramMap","get","viewApplication","findById","subscribe","res","responseData","findAll","countries","activeMembersAffiliation","endpoint","userRole","name","ROLE_ADMIN","ROLE_SUPER_ADMIN","ACTIVE","FOR_APPROVAL","delinquent","setDelinquent","save","undefined","customSuccessMessage","close","err","error","navigate","update","success","cancel","companyForm","group","companyName","required","companyMobileNo","companyTelephoneNo","companyTelephoneNo2","membersAffiliation","contactPersonName","contactPersonEmail","pattern","companyTin","completeAddress","voucherFund","markAsUntouched","markAsPristine","value","selected","description","approveCompany","delinquentVal","AddressService","http","regions","regionId","provinces","provinceId","cityMunicipalities","cityMunicipalityId","barangays","barangayId"],"mappings":"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","file":"default~add-company-add-company-module~applications-applications-module~modules-pages-landing-page-l~b924cdec-es5.js","sourcesContent":["import { Component, Inject, OnInit, Optional, ViewChild } from '@angular/core';\r\nimport { ENDPOINTS, COMMON_FUNCTION, STATUSES, USER_ROLES, YES_NO_OPTION } from '@shared';\r\nimport { Company } from '@models';\r\nimport { ApiService, SweetAlertService, DataStorageService } from '@services';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\r\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { AddressService } from '../../../../core/services/address/address.service';\r\nimport { ValidateFieldService } from 'app/core/services/validate-field.service';\r\n\r\n@Component({\r\n  selector: 'app-add-company',\r\n  templateUrl: './add-company.component.html',\r\n  styleUrls: ['./add-company.component.scss']\r\n})\r\nexport class AddCompanyComponent implements OnInit {\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  @ViewChild(MatTable, { static: false }) table: MatTable<Company>;\r\n  dataSource: MatTableDataSource<Company>;\r\n  displayedColumns: string[] = ['companyName', 'companyTelephoneNo', 'companyFaxNo', 'companyTin', 'address'];\r\n\r\n  countryList = [];\r\n  companyList = [];\r\n  affiliationList = [];\r\n  regionsList = [];\r\n  provinceList = [];\r\n  cityMunicipalityList = [];\r\n  barangayList = [];\r\n  statusList = [...STATUSES];\r\n  yesNoList = [...YES_NO_OPTION];\r\n\r\n  company = new Company();\r\n  companyForm: FormGroup;\r\n  currentUser: any;\r\n  todayDate: Date = new Date();\r\n  id: any;\r\n  notForeignAddress = true;\r\n  isFromModal = false;\r\n  isUserRegistration = false;\r\n  showApproveRejectButton = false;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private addressService: AddressService,\r\n    private formBuilder: FormBuilder,\r\n    private dataStorage: DataStorageService,\r\n    private sweetAlertService: SweetAlertService,\r\n    public validateFieldService: ValidateFieldService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private matDialog: MatDialog,\r\n    @Optional() public dialogRef: MatDialogRef<AddCompanyComponent>,\r\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    if (data) {\r\n      if (data.dataForModal) {\r\n        const dataFromModal = data.dataForModal;\r\n\r\n        this.isFromModal = dataFromModal.isFromModal;\r\n        this.showApproveRejectButton = dataFromModal.isUpdate;\r\n\r\n        if (dataFromModal.isUpdate) {\r\n          this.company = dataFromModal.company\r\n        } else {\r\n          this.company.country = dataFromModal.country\r\n        }\r\n      }\r\n      this.isUserRegistration = data.isUserRegistration;\r\n    }\r\n\r\n    const additionalStatus = [\r\n      {\r\n        status: 'APPROVED'\r\n      }, {\r\n        status: 'DISAPPROVED'\r\n      }, {\r\n        status: 'FOR_APPROVAL'\r\n      }\r\n    ];\r\n    this.statusList.push(...additionalStatus);\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.currentUser = this.dataStorage.getUserAccount();\r\n    this.setFormValidator();\r\n    this.getCountries();\r\n    this.getAffiliationList();\r\n    this.id = Number(this.route.snapshot.paramMap.get('id'));\r\n    if (this.id !== 0) {\r\n      this.viewApplication();\r\n    }\r\n  }\r\n\r\n  viewApplication() {\r\n    this.apiService.findById(ENDPOINTS.company, this.id).subscribe((res: any) => {\r\n      this.company = res.responseData.data;\r\n      this.getAffiliationList();\r\n    });\r\n  }\r\n\r\n  getCountries() {\r\n    this.apiService.findAll(ENDPOINTS.countries).subscribe((res: any) => {\r\n      this.countryList = res.responseData.data;\r\n    });\r\n  }\r\n\r\n  getAffiliationList(): void {\r\n    this.apiService.findAll(ENDPOINTS.activeMembersAffiliation).subscribe((res: any) => {\r\n      this.affiliationList = res.responseData.data;\r\n    });\r\n  }\r\n\r\n\r\n  save(endpoint) {\r\n    if (!endpoint) {\r\n      endpoint = ENDPOINTS.company;\r\n    }\r\n\r\n    if (this.currentUser && (this.currentUser.userRole.name === USER_ROLES.ROLE_ADMIN || this.currentUser.userRole.name === USER_ROLES.ROLE_SUPER_ADMIN)) {\r\n      this.company.status = COMMON_FUNCTION.ACTIVE;\r\n    } else {\r\n      this.company.status = COMMON_FUNCTION.FOR_APPROVAL;\r\n    }\r\n\r\n    // if(this.notForeignAddress){\r\n    //   this.company.country = 'PHIL'\r\n    // }\r\n\r\n    if (this.isFromModal) {\r\n      this.company.status = COMMON_FUNCTION.FOR_APPROVAL;\r\n    }\r\n    this.company.delinquent = this.setDelinquent(this.company.delinquent);\r\n\r\n    this.apiService.save(endpoint, this.company).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.id = res.responseData.data.id;\r\n          this.company = res.responseData.data;\r\n          this.sweetAlertService.customSuccessMessage('Company successfully saved.');\r\n          if (this.isFromModal) {\r\n            this.dialogRef.close(this.company);\r\n          }\r\n          if (this.isUserRegistration) {\r\n            this.dialogRef.close(this.company);\r\n          }\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        // this.resetFormValidator();\r\n        if (!this.isFromModal && !this.isUserRegistration) {\r\n          this.router.navigate(['asc/page/company/update/', this.id]);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  getCompany(id): void {\r\n    this.apiService.findById(ENDPOINTS.company, id).subscribe((res: any) => {\r\n      if (res) {\r\n        this.company = res.responseData.data;\r\n        // this.addressService.getBarangay(res.responseData.data.barangayId).subscribe(\r\n        //   (res: any) => {\r\n\r\n        // this.company.region = res.responseData.data.cityMunicipalityDto.provinceDto.regionDto.regionId;\r\n        // this.company.province = res.responseData.data.cityMunicipalityDto.provinceDto.provinceId;\r\n        // this.company.cityMunicipality = res.responseData.data.cityMunicipalityDto.cityMunicipalityId;\r\n        // this.company.barangay = res.responseData.data.barangayId;\r\n\r\n        // this.getProvinces();\r\n        // this.getCityMunicipalities();\r\n        // this.getBarangays();\r\n        // });\r\n      }\r\n    });\r\n  }\r\n\r\n  update(endpoint) {\r\n    if (!endpoint) {\r\n      endpoint = ENDPOINTS.company;\r\n    }\r\n    this.company.delinquent = this.setDelinquent(this.company.delinquent);\r\n\r\n    if (this.company.status === 'APPROVED') {\r\n      this.company.status = 'ACTIVE';\r\n    }\r\n    this.apiService.update(endpoint, this.company).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.cancel();\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.company);\r\n        }\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    // if(this.notForeignAddress){\r\n    //   this.companyForm = this.formBuilder.group({\r\n    //     companyName: ['', Validators.required],\r\n    //     companyTelephoneNo: ['', Validators.required],\r\n    //     companyFaxNo: ['', Validators.required],\r\n    //     membersAffiliation: ['', Validators.required],\r\n    //     companyTin: ['', Validators.required],\r\n    //     // region: ['', Validators.required],\r\n    //     // province: ['', Validators.required],\r\n    //     // cityMunicipality: ['', Validators.required],\r\n    //     // barangay: ['', Validators.required],\r\n    //     completeAddress: ['', Validators.required]\r\n    //   });\r\n    // }else{\r\n    //   this.companyForm = this.formBuilder.group({\r\n    //     companyName: ['', Validators.required],\r\n    //     companyTelephoneNo: ['', Validators.required],\r\n    //     companyFaxNo: ['', Validators.required],\r\n    //     membersAffiliation: ['', Validators.required],\r\n    //     companyTin: ['', Validators.required],\r\n    //     country: ['', Validators.required],\r\n    //     foreignAddress: ['', Validators.required]\r\n    //   });\r\n    // }\r\n\r\n    this.companyForm = this.formBuilder.group({\r\n      companyName: ['', Validators.required],\r\n      companyMobileNo: ['', Validators.required],\r\n      companyTelephoneNo: ['', Validators.required],\r\n      companyTelephoneNo2: ['', Validators.required],\r\n      // companyFaxNo: ['', Validators.required],\r\n      membersAffiliation: ['', Validators.required],\r\n      contactPersonName: ['', Validators.required],\r\n      contactPersonEmail: ['', [Validators.required, Validators.pattern('[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}')]],\r\n      companyTin: ['', Validators.required],\r\n      country: ['', Validators.required],\r\n      completeAddress: ['', Validators.required],\r\n      voucherFund: [''],\r\n      status: [''],\r\n      delinquent: ['']\r\n    });\r\n  }\r\n\r\n  cancel(): void {\r\n    if (!this.isFromModal) {\r\n      if (this.company.id) {\r\n        this.router.navigate(['/asc/page/company/lists']);\r\n      } else {\r\n        this.company = new Company();\r\n        this.companyForm.markAsUntouched();\r\n        this.companyForm.markAsPristine();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // getRegions() {\r\n  //   this.addressService.getRegions().subscribe(\r\n  //     (res: any) => {\r\n  //       this.regionsList = res;\r\n  //     });\r\n  // }\r\n\r\n  // getProvinces() {\r\n  //   this.addressService.getProvinces(this.company.region.regionId).subscribe(\r\n  //     (res: any) => {\r\n  //       this.provinceList = res.responseData.data;\r\n  //     });\r\n  // }\r\n\r\n  // getCityMunicipalities() {\r\n  //   this.addressService.getCityMunicipalities(this.company.province.provinceId).subscribe(\r\n  //     (res: any) => {\r\n  //       this.cityMunicipalityList = res.responseData.data;\r\n  //     });\r\n  // }\r\n\r\n  // getBarangays() {\r\n  //   this.addressService.getBarangays(this.company.cityMunicipality.cityMunicipalityId).subscribe(\r\n  //     (res: any) => {\r\n  //       this.barangayList = res.responseData.data;\r\n  //     });\r\n  // }\r\n\r\n  isForeignAddress(): void {\r\n    this.notForeignAddress = !this.notForeignAddress;\r\n    // this.setFormValidator();\r\n  }\r\n\r\n  compareMembersAffiliation(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  compareCountry(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.id === selected.id;\r\n    }\r\n  }\r\n\r\n  compareDelinquent(value: any, selected: any): boolean {\r\n    if (value) {\r\n      return value === (selected ? 'Yes' : 'No');\r\n    }\r\n  }\r\n\r\n  approve() {\r\n    this.company.status = 'APPROVED';\r\n    this.save(ENDPOINTS.approveCompany);\r\n  }\r\n\r\n  reject() {\r\n    this.company.status = 'DISAPPROVED';\r\n    this.update('');\r\n  }\r\n\r\n  closeModal() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  setDelinquent(delinquentVal: any): boolean {\r\n    return delinquentVal === 'Yes' ? true : false;\r\n  }\r\n\r\n}\r\n","<form>\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 title\">\r\n        <mat-label>\r\n          <mat-icon>apartment</mat-icon> Company\r\n        </mat-label>\r\n        <button class=\"button-right\" *ngIf=\"!isFromModal && !isUserRegistration\" mat-raised-button color=\"primary\"\r\n          [routerLink]=\"['/asc/page/company/lists']\">\r\n          <mat-icon>list</mat-icon> VIEW COMPANIES\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <hr>\r\n\r\n\r\n    <form [formGroup]=\"companyForm\">\r\n      <div class=\"row fields\">\r\n        <h4>\r\n          <mat-icon>label_important</mat-icon> Company Information\r\n        </h4>\r\n        <div class=\"row\">\r\n          <mat-form-field class=\"col-md-7\" appearance=\"outline\">\r\n            <mat-label>Company Name <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"company.companyName\" name=\"companyName\" formControlName=\"companyName\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-5\" appearance=\"outline\">\r\n            <mat-label>Member Affiliation <span class=\"required-field\">*</span></mat-label>\r\n            <mat-select [(ngModel)]=\"company.membersAffiliation\" name=\"membersAffiliation\"\r\n              [compareWith]=\"compareMembersAffiliation\" formControlName=\"membersAffiliation\">\r\n              <mat-option *ngFor=\"let i of affiliationList\" [value]=\"i\">\r\n                {{i.description}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-3\" appearance=\"outline\">\r\n            <mat-label>Mobile Number <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"company.companyMobileNo\" name=\"companyMobileNo\" placeholder=\"09xxxxxxxxx\"\r\n              formControlName=\"companyMobileNo\" (keydown)=\"validateFieldService.numbersOnly($event)\" maxlength=\"11\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-3\" appearance=\"outline\">\r\n            <mat-label>Telephone Number <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"company.companyTelephoneNo\" name=\"companyTelephoneNo\"\r\n              formControlName=\"companyTelephoneNo\" (keydown)=\"validateFieldService.numbersOnly($event)\" maxlength=\"11\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-3\" appearance=\"outline\">\r\n            <mat-label>Alternate Telephone Number <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"company.companyTelephoneNo2\" name=\"companyTelephoneNo2\"\r\n              formControlName=\"companyTelephoneNo2\" (keydown)=\"validateFieldService.numbersOnly($event)\" maxlength=\"11\">\r\n          </mat-form-field>\r\n\r\n          <!-- <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n            <mat-label>Fax Number</mat-label>\r\n            <input matInput [(ngModel)]=\"company.companyFaxNo\" name=\"companyFaxNo\" formControlName=\"companyFaxNo\">\r\n          </mat-form-field> -->\r\n          <mat-form-field class=\"col-md-3\" appearance=\"outline\">\r\n            <mat-label>TIN <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"company.companyTin\" name=\"companyTin\" formControlName=\"companyTin\"\r\n              (keydown)=\"validateFieldService.numbersOnly($event)\">\r\n          </mat-form-field>\r\n\r\n          <!-- <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n            <mat-label>Voucher Fund</mat-label>\r\n            <input matInput [(ngModel)]=\"company.voucherFund\" name=\"voucherFund\" formControlName=\"voucherFund\">\r\n          </mat-form-field> -->\r\n\r\n          <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n            <mat-label>Accounting Representative: <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"company.contactPersonName\" name=\"contactPersonName\"\r\n              formControlName=\"contactPersonName\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n            <mat-label>Representative's Email Address: <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"company.contactPersonEmail\" type=\"email\" name=\"contactPersonEmail\" email\r\n              formControlName=\"contactPersonEmail\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\"\r\n            *ngIf=\"(currentUser?.userRole?.name==='ROLE_ADMIN'||currentUser?.userRole?.name==='ROLE_SUPER_ADMIN'||currentUser?.userRole?.name==='ROLE_ENCODER') && !isUserRegistration\">\r\n            <mat-label>Delinquent</mat-label>\r\n            <mat-select [(ngModel)]=\"company.delinquent\" name=\"delinquent\" formControlName=\"delinquent\"\r\n              [compareWith]=\"compareDelinquent\">\r\n              <mat-option *ngFor=\"let i of yesNoList\" [value]=\"i\">\r\n                {{ i }}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\"\r\n            *ngIf=\"(currentUser?.userRole?.name==='ROLE_ADMIN'||currentUser?.userRole?.name==='ROLE_SUPER_ADMIN'||currentUser?.userRole?.name==='ROLE_ENCODER') && company.id\">\r\n            <mat-label>Status</mat-label>\r\n            <mat-select [(ngModel)]=\"company.status\" name=\"status\" formControlName=\"status\">\r\n              <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n                {{i?.status?.replace('_',' ')}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n\r\n\r\n        </div>\r\n\r\n        <!-- <div class=\"row\">\r\n\r\n          <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n            <mat-label>Member Affiliation</mat-label>\r\n            <mat-select [(ngModel)]=\"company.membersAffiliation\" name=\"membersAffiliation\"\r\n              [compareWith]=\"compareMembersAffiliation\" formControlName=\"membersAffiliation\" matNativeControl required>\r\n              <mat-option *ngFor=\"let i of affiliationList\" [value]=\"i\">\r\n                {{i.description}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div> -->\r\n      </div>\r\n\r\n\r\n\r\n      <div class=\"row fields\">\r\n        <h4>\r\n          <mat-icon>label_important</mat-icon> Address\r\n        </h4>\r\n\r\n        <!-- <div class=\"row\">\r\n          <mat-slide-toggle color=\"warn\" (click)=\"isForeignAddress()\"><b>Foreign Address?</b></mat-slide-toggle>\r\n        </div><br><br> -->\r\n\r\n\r\n        <!-- <div *ngIf=\"notForeignAddress\"> -->\r\n        <div class=\"row\">\r\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n            <mat-label>Country </mat-label>\r\n            <!-- <input matInput readonly [(ngModel)]=\"company.country\" formControlName=\"country\"> -->\r\n            <mat-select [(ngModel)]=\"company.country\" name=\"country\" [compareWith]=\"compareCountry\"\r\n              formControlName=\"country\" matNativeControl required>\r\n              <mat-option *ngFor=\"let i of countryList\" [value]=\"i\">\r\n                {{i.code}} - {{i.name}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n          <mat-form-field class=\"col-md-8\" appearance=\"outline\">\r\n            <mat-label>Company Address <span class=\"required-field\">*</span></mat-label>\r\n            <textarea matInput [(ngModel)]=\"company.completeAddress\" name=\"completeAddress\"\r\n              formControlName=\"completeAddress\"></textarea>\r\n          </mat-form-field>\r\n        </div>\r\n\r\n\r\n        <!-- <div class=\"row\">\r\n            <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n              <mat-label>Region</mat-label>\r\n              <mat-select [(ngModel)]=\"company.region\" (selectionChange)=\"getProvinces()\" name=\"region\"\r\n                formControlName=\"region\" matNativeControl required>\r\n                <mat-option *ngFor=\"let i of regionsList\" [value]=\"i\">\r\n                  {{i.regionName}}\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n              <mat-label>Province</mat-label>\r\n              <mat-select [(ngModel)]=\"company.province\" (selectionChange)=\"getCityMunicipalities()\"\r\n                [disabled]=\"!company.region\" name=\"province\" formControlName=\"province\" matNativeControl required>\r\n                <mat-option *ngFor=\"let i of provinceList\" [value]=\"i\">\r\n                  {{i.provinceName}}\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n              <mat-label>City/Municipality</mat-label>\r\n              <mat-select [(ngModel)]=\"company.cityMunicipality\" (selectionChange)=\"getBarangays()\"\r\n                [disabled]=\"!company.province\" name=\"cityMunicipality\" formControlName=\"cityMunicipality\"\r\n                matNativeControl required>\r\n                <mat-option *ngFor=\"let i of cityMunicipalityList\" [value]=\"i\">\r\n                  {{i.cityMunicipalityName}}\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n              <mat-label>Barangay</mat-label>\r\n              <mat-select [(ngModel)]=\"company.barangay\" [disabled]=\"!company.cityMunicipality\" name=\"barangay\"\r\n                formControlName=\"barangay\" matNativeControl required>\r\n                <mat-option *ngFor=\"let i of barangayList\" [value]=\"i\">\r\n                  {{i.barangayName}}\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div> -->\r\n        <!-- </div> -->\r\n\r\n        <!-- <div *ngIf=\"!notForeignAddress\">\r\n          <div class=\"row\">\r\n            <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n              <mat-label>Country</mat-label>\r\n              <input matInput [(ngModel)]=\"company.country\" name=\"country\" formControlName=\"country\">\r\n            </mat-form-field>\r\n            <mat-form-field class=\"col-md-8\" appearance=\"outline\">\r\n              <mat-label>Foreign Address</mat-label>\r\n              <input matInput [(ngModel)]=\"company.foreignAddress\" name=\"foreignAddress\"\r\n                formControlName=\"foreignAddress\">\r\n            </mat-form-field>\r\n          </div>\r\n        </div> -->\r\n\r\n      </div>\r\n    </form>\r\n    <hr>\r\n    <br>\r\n\r\n    <div class=\"row\" *ngIf=\"!isFromModal || !showApproveRejectButton\">\r\n      <div class=\"col-md-12\">\r\n        <button mat-raised-button color=\"primary\" (click)=\"save('')\" *ngIf=\"!company?.id\"\r\n          [disabled]=\"!(companyForm.valid)\">\r\n          <mat-icon>save</mat-icon> SAVE\r\n        </button>\r\n        <button mat-raised-button color=\"primary\" (click)=\"update('')\" *ngIf=\"company?.id\"\r\n          [disabled]=\"!(companyForm.valid)\">\r\n          <mat-icon>task_alt </mat-icon> UPDATE\r\n        </button>\r\n        <button mat-raised-button class=\"button-red\" (click)=\"approve()\" *ngIf=\"isFromModal && showApproveRejectButton\">\r\n          <i class=\"material-icons color__white\">verified</i> APPROVE\r\n        </button>\r\n        <button mat-raised-button class=\"button-red\" (click)=\"reject()\" *ngIf=\"isFromModal && showApproveRejectButton\">\r\n          <i class=\"material-icons color__white\">unpublished</i> REJECT\r\n        </button>\r\n        <button mat-raised-button color=\"warn\" (click)=\"cancel()\"\r\n          *ngIf=\"company?.id || company?.companyName || company?.companyTelephoneNo || company?.companyTin\">\r\n          <!-- <button mat-raised-button color=\"warn\" (click)=\"cancel()\"\r\n          *ngIf=\"company?.id || company?.companyName || company?.companyTelephoneNo || company?.companyFaxNo || company?.companyTin\"> -->\r\n          <mat-icon>{{ company?.id ? 'cancel' : 'refresh' }}</mat-icon> {{ company?.id ? 'CANCEL' : 'RESET' }}\r\n        </button>\r\n        <button mat-raised-button class=\"button-red\" (click)=\"closeModal()\" *ngIf=\"isFromModal\">\r\n          <i class=\"material-icons color__white\">close</i> CLOSE\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"isFromModal && showApproveRejectButton\">\r\n      <button mat-raised-button color=\"primary\" (click)=\"update('')\" *ngIf=\"company?.id\"\r\n        [disabled]=\"!(companyForm.valid)\">\r\n        <mat-icon>task_alt </mat-icon> UPDATE\r\n      </button>\r\n      <button mat-raised-button class=\"button-red\" (click)=\"approve()\">\r\n        <i class=\"material-icons color__white\">verified</i> APPROVE\r\n      </button>\r\n      <button mat-raised-button class=\"button-red\" (click)=\"reject()\">\r\n        <i class=\"material-icons color__white\">unpublished</i> REJECT\r\n      </button>\r\n      <button mat-raised-button class=\"button-red\" (click)=\"closeModal()\">\r\n        <i class=\"material-icons color__white\">close</i> CLOSE\r\n      </button>\r\n    </div>\r\n  </div>\r\n</form>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ENDPOINTS } from '@shared';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class AddressService {\r\n\r\n    constructor(\r\n        private http: HttpClient\r\n    ) { }\r\n\r\n    getRegions() {\r\n        return this.http.get(`${ENDPOINTS.regions}`);\r\n    }\r\n\r\n    getProvinces(regionId) {\r\n        return this.http.get(`${ENDPOINTS.provinces}/region-id/${regionId}`);\r\n    }\r\n\r\n    getCityMunicipalities(provinceId) {\r\n        return this.http.get(`${ENDPOINTS.cityMunicipalities}/province-id/${provinceId}`);\r\n    }\r\n\r\n    getBarangays(cityMunicipalityId) {\r\n        return this.http.get(`${ENDPOINTS.barangays}/city-municipality-id/${cityMunicipalityId}`);\r\n    }\r\n\r\n    getBarangay(barangayId) {\r\n        return this.http.get(`${ENDPOINTS.barangays}/barangay-id/${barangayId}`);\r\n    }\r\n\r\n}"]}