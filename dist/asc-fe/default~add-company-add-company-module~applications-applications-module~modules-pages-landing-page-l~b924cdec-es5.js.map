{"version":3,"sources":["webpack:///src/app/modules/pages/company/add-company/add-company.component.ts","webpack:///src/app/modules/pages/company/add-company/add-company.component.scss","webpack:///src/app/modules/pages/company/add-company/add-company.component.html","webpack:///src/app/core/services/address/address.service.ts"],"names":["AddCompanyComponent","apiService","addressService","formBuilder","dataStorage","sweetAlertService","validateFieldService","route","router","matDialog","dialogRef","data","displayedColumns","countryList","companyList","affiliationList","regionsList","provinceList","cityMunicipalityList","barangayList","statusList","yesNoList","company","todayDate","Date","notForeignAddress","isFromModal","isUserRegistration","showApproveRejectButton","dataForModal","dataFromModal","isUpdate","country","additionalStatus","status","push","currentUser","getUserAccount","setFormValidator","getCountries","getAffiliationList","id","Number","snapshot","paramMap","get","viewApplication","findById","subscribe","res","responseData","findAll","countries","activeMembersAffiliation","endpoint","userRole","name","ROLE_ADMIN","ROLE_SUPER_ADMIN","ACTIVE","FOR_APPROVAL","delinquent","setDelinquent","save","undefined","customSuccessMessage","close","err","error","navigate","update","success","cancel","companyForm","group","companyName","required","companyMobileNo","companyTelephoneNo","companyTelephoneNo2","membersAffiliation","contactPersonName","contactPersonEmail","pattern","companyTin","completeAddress","voucherFund","markAsUntouched","markAsPristine","value","selected","description","approveCompany","delinquentVal","selector","template","AddressService","http","regions","regionId","provinces","provinceId","cityMunicipalities","cityMunicipalityId","barangays","barangayId","providedIn"],"mappings":"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","file":"default~add-company-add-company-module~applications-applications-module~modules-pages-landing-page-l~b924cdec-es5.js","sourcesContent":["import { Component, Inject, OnInit, Optional, ViewChild } from '@angular/core';\r\nimport { ENDPOINTS, COMMON_FUNCTION, STATUSES, USER_ROLES, YES_NO_OPTION } from '@shared';\r\nimport { Company } from '@models';\r\nimport { ApiService, SweetAlertService, DataStorageService } from '@services';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\r\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { AddressService } from '../../../../core/services/address/address.service';\r\nimport { ValidateFieldService } from 'app/core/services/validate-field.service';\r\n\r\n@Component({\r\n  selector: 'app-add-company',\r\n  templateUrl: './add-company.component.html',\r\n  styleUrls: ['./add-company.component.scss']\r\n})\r\nexport class AddCompanyComponent implements OnInit {\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  @ViewChild(MatTable, { static: false }) table: MatTable<Company>;\r\n  dataSource: MatTableDataSource<Company>;\r\n  displayedColumns: string[] = ['companyName', 'companyTelephoneNo', 'companyFaxNo', 'companyTin', 'address'];\r\n\r\n  countryList = [];\r\n  companyList = [];\r\n  affiliationList = [];\r\n  regionsList = [];\r\n  provinceList = [];\r\n  cityMunicipalityList = [];\r\n  barangayList = [];\r\n  statusList = [...STATUSES];\r\n  yesNoList = [...YES_NO_OPTION];\r\n\r\n  company = new Company();\r\n  companyForm: FormGroup;\r\n  currentUser: any;\r\n  todayDate: Date = new Date();\r\n  id: any;\r\n  notForeignAddress = true;\r\n  isFromModal = false;\r\n  isUserRegistration = false;\r\n  showApproveRejectButton = false;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private addressService: AddressService,\r\n    private formBuilder: FormBuilder,\r\n    private dataStorage: DataStorageService,\r\n    private sweetAlertService: SweetAlertService,\r\n    public validateFieldService: ValidateFieldService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private matDialog: MatDialog,\r\n    @Optional() public dialogRef: MatDialogRef<AddCompanyComponent>,\r\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    if (data) {\r\n      if (data.dataForModal) {\r\n        const dataFromModal = data.dataForModal;\r\n\r\n        this.isFromModal = dataFromModal.isFromModal;\r\n        this.showApproveRejectButton = dataFromModal.isUpdate;\r\n\r\n        if (dataFromModal.isUpdate) {\r\n          this.company = dataFromModal.company\r\n        } else {\r\n          this.company.country = dataFromModal.country\r\n        }\r\n      }\r\n      this.isUserRegistration = data.isUserRegistration;\r\n    }\r\n\r\n    const additionalStatus = [\r\n      {\r\n        status: 'APPROVED'\r\n      }, {\r\n        status: 'DISAPPROVED'\r\n      }, {\r\n        status: 'FOR_APPROVAL'\r\n      }\r\n    ];\r\n    this.statusList.push(...additionalStatus);\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.currentUser = this.dataStorage.getUserAccount();\r\n    this.setFormValidator();\r\n    this.getCountries();\r\n    this.getAffiliationList();\r\n    this.id = Number(this.route.snapshot.paramMap.get('id'));\r\n    if (this.id !== 0) {\r\n      this.viewApplication();\r\n    }\r\n  }\r\n\r\n  viewApplication() {\r\n    this.apiService.findById(ENDPOINTS.company, this.id).subscribe((res: any) => {\r\n      this.company = res.responseData.data;\r\n      this.getAffiliationList();\r\n    });\r\n  }\r\n\r\n  getCountries() {\r\n    this.apiService.findAll(ENDPOINTS.countries).subscribe((res: any) => {\r\n      this.countryList = res.responseData.data;\r\n    });\r\n  }\r\n\r\n  getAffiliationList(): void {\r\n    this.apiService.findAll(ENDPOINTS.activeMembersAffiliation).subscribe((res: any) => {\r\n      this.affiliationList = res.responseData.data;\r\n    });\r\n  }\r\n\r\n\r\n  save(endpoint) {\r\n    if (!endpoint) {\r\n      endpoint = ENDPOINTS.company;\r\n    }\r\n\r\n    if (this.currentUser && (this.currentUser.userRole.name === USER_ROLES.ROLE_ADMIN || this.currentUser.userRole.name === USER_ROLES.ROLE_SUPER_ADMIN)) {\r\n      this.company.status = COMMON_FUNCTION.ACTIVE;\r\n    } else {\r\n      this.company.status = COMMON_FUNCTION.FOR_APPROVAL;\r\n    }\r\n\r\n    // if(this.notForeignAddress){\r\n    //   this.company.country = 'PHIL'\r\n    // }\r\n\r\n    if (this.isFromModal) {\r\n      this.company.status = COMMON_FUNCTION.FOR_APPROVAL;\r\n    }\r\n    this.company.delinquent = this.setDelinquent(this.company.delinquent);\r\n\r\n    this.apiService.save(endpoint, this.company).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.id = res.responseData.data.id;\r\n          this.company = res.responseData.data;\r\n          this.sweetAlertService.customSuccessMessage('Company successfully saved.');\r\n          if (this.isFromModal) {\r\n            this.dialogRef.close(this.company);\r\n          }\r\n          if (this.isUserRegistration) {\r\n            this.dialogRef.close(this.company);\r\n          }\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        // this.resetFormValidator();\r\n        if (!this.isFromModal && !this.isUserRegistration) {\r\n          this.router.navigate(['asc/page/company/update/', this.id]);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  getCompany(id): void {\r\n    this.apiService.findById(ENDPOINTS.company, id).subscribe((res: any) => {\r\n      if (res) {\r\n        this.company = res.responseData.data;\r\n        // this.addressService.getBarangay(res.responseData.data.barangayId).subscribe(\r\n        //   (res: any) => {\r\n\r\n        // this.company.region = res.responseData.data.cityMunicipalityDto.provinceDto.regionDto.regionId;\r\n        // this.company.province = res.responseData.data.cityMunicipalityDto.provinceDto.provinceId;\r\n        // this.company.cityMunicipality = res.responseData.data.cityMunicipalityDto.cityMunicipalityId;\r\n        // this.company.barangay = res.responseData.data.barangayId;\r\n\r\n        // this.getProvinces();\r\n        // this.getCityMunicipalities();\r\n        // this.getBarangays();\r\n        // });\r\n      }\r\n    });\r\n  }\r\n\r\n  update(endpoint) {\r\n    if (!endpoint) {\r\n      endpoint = ENDPOINTS.company;\r\n    }\r\n    this.company.delinquent = this.setDelinquent(this.company.delinquent);\r\n\r\n    if (this.company.status === 'APPROVED') {\r\n      this.company.status = 'ACTIVE';\r\n    }\r\n    this.apiService.update(endpoint, this.company).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.cancel();\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.company);\r\n        }\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    // if(this.notForeignAddress){\r\n    //   this.companyForm = this.formBuilder.group({\r\n    //     companyName: ['', Validators.required],\r\n    //     companyTelephoneNo: ['', Validators.required],\r\n    //     companyFaxNo: ['', Validators.required],\r\n    //     membersAffiliation: ['', Validators.required],\r\n    //     companyTin: ['', Validators.required],\r\n    //     // region: ['', Validators.required],\r\n    //     // province: ['', Validators.required],\r\n    //     // cityMunicipality: ['', Validators.required],\r\n    //     // barangay: ['', Validators.required],\r\n    //     completeAddress: ['', Validators.required]\r\n    //   });\r\n    // }else{\r\n    //   this.companyForm = this.formBuilder.group({\r\n    //     companyName: ['', Validators.required],\r\n    //     companyTelephoneNo: ['', Validators.required],\r\n    //     companyFaxNo: ['', Validators.required],\r\n    //     membersAffiliation: ['', Validators.required],\r\n    //     companyTin: ['', Validators.required],\r\n    //     country: ['', Validators.required],\r\n    //     foreignAddress: ['', Validators.required]\r\n    //   });\r\n    // }\r\n\r\n    this.companyForm = this.formBuilder.group({\r\n      companyName: ['', Validators.required],\r\n      companyMobileNo: ['', Validators.required],\r\n      companyTelephoneNo: ['', Validators.required],\r\n      companyTelephoneNo2: ['', Validators.required],\r\n      // companyFaxNo: ['', Validators.required],\r\n      membersAffiliation: ['', Validators.required],\r\n      contactPersonName: ['', Validators.required],\r\n      contactPersonEmail: ['', [Validators.required, Validators.pattern('[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}')]],\r\n      companyTin: ['', Validators.required],\r\n      country: ['', Validators.required],\r\n      completeAddress: ['', Validators.required],\r\n      voucherFund: [''],\r\n      status: [''],\r\n      delinquent: ['']\r\n    });\r\n  }\r\n\r\n  cancel(): void {\r\n    if (!this.isFromModal) {\r\n      if (this.company.id) {\r\n        this.router.navigate(['/asc/page/company/lists']);\r\n      } else {\r\n        this.company = new Company();\r\n        this.companyForm.markAsUntouched();\r\n        this.companyForm.markAsPristine();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // getRegions() {\r\n  //   this.addressService.getRegions().subscribe(\r\n  //     (res: any) => {\r\n  //       this.regionsList = res;\r\n  //     });\r\n  // }\r\n\r\n  // getProvinces() {\r\n  //   this.addressService.getProvinces(this.company.region.regionId).subscribe(\r\n  //     (res: any) => {\r\n  //       this.provinceList = res.responseData.data;\r\n  //     });\r\n  // }\r\n\r\n  // getCityMunicipalities() {\r\n  //   this.addressService.getCityMunicipalities(this.company.province.provinceId).subscribe(\r\n  //     (res: any) => {\r\n  //       this.cityMunicipalityList = res.responseData.data;\r\n  //     });\r\n  // }\r\n\r\n  // getBarangays() {\r\n  //   this.addressService.getBarangays(this.company.cityMunicipality.cityMunicipalityId).subscribe(\r\n  //     (res: any) => {\r\n  //       this.barangayList = res.responseData.data;\r\n  //     });\r\n  // }\r\n\r\n  isForeignAddress(): void {\r\n    this.notForeignAddress = !this.notForeignAddress;\r\n    // this.setFormValidator();\r\n  }\r\n\r\n  compareMembersAffiliation(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  compareCountry(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.id === selected.id;\r\n    }\r\n  }\r\n\r\n  compareDelinquent(value: any, selected: any): boolean {\r\n    if (value) {\r\n      return value === (selected ? 'Yes' : 'No');\r\n    }\r\n  }\r\n\r\n  approve() {\r\n    this.company.status = 'APPROVED';\r\n    this.save(ENDPOINTS.approveCompany);\r\n  }\r\n\r\n  reject() {\r\n    this.company.status = 'DISAPPROVED';\r\n    this.update('');\r\n  }\r\n\r\n  closeModal() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  setDelinquent(delinquentVal: any): boolean {\r\n    return delinquentVal === 'Yes' ? true : false;\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvY29tcGFueS9hZGQtY29tcGFueS9hZGQtY29tcGFueS5jb21wb25lbnQuc2NzcyJ9 */\";","export default \"<form>\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12 title\\\">\\r\\n        <mat-label>\\r\\n          <mat-icon>apartment</mat-icon> Company\\r\\n        </mat-label>\\r\\n        <button class=\\\"button-right\\\" *ngIf=\\\"!isFromModal && !isUserRegistration\\\" mat-raised-button color=\\\"primary\\\"\\r\\n          [routerLink]=\\\"['/asc/page/company/lists']\\\">\\r\\n          <mat-icon>list</mat-icon> VIEW COMPANIES\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n    <hr>\\r\\n\\r\\n\\r\\n    <form [formGroup]=\\\"companyForm\\\">\\r\\n      <div class=\\\"row fields\\\">\\r\\n        <h4>\\r\\n          <mat-icon>label_important</mat-icon> Company Information\\r\\n        </h4>\\r\\n        <div class=\\\"row\\\">\\r\\n          <mat-form-field class=\\\"col-md-7\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Company Name <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.companyName\\\" name=\\\"companyName\\\" formControlName=\\\"companyName\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-5\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Member Affiliation <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <mat-select [(ngModel)]=\\\"company.membersAffiliation\\\" name=\\\"membersAffiliation\\\"\\r\\n              [compareWith]=\\\"compareMembersAffiliation\\\" formControlName=\\\"membersAffiliation\\\">\\r\\n              <mat-option *ngFor=\\\"let i of affiliationList\\\" [value]=\\\"i\\\">\\r\\n                {{i.description}}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-3\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Mobile Number <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.companyMobileNo\\\" name=\\\"companyMobileNo\\\" placeholder=\\\"09xxxxxxxxx\\\"\\r\\n              formControlName=\\\"companyMobileNo\\\" (keydown)=\\\"validateFieldService.numbersOnly($event)\\\" maxlength=\\\"11\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-3\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Telephone Number <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.companyTelephoneNo\\\" name=\\\"companyTelephoneNo\\\"\\r\\n              formControlName=\\\"companyTelephoneNo\\\" (keydown)=\\\"validateFieldService.numbersOnly($event)\\\" maxlength=\\\"11\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-3\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Alternate Telephone Number <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.companyTelephoneNo2\\\" name=\\\"companyTelephoneNo2\\\"\\r\\n              formControlName=\\\"companyTelephoneNo2\\\" (keydown)=\\\"validateFieldService.numbersOnly($event)\\\" maxlength=\\\"11\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n          <!-- <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Fax Number</mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.companyFaxNo\\\" name=\\\"companyFaxNo\\\" formControlName=\\\"companyFaxNo\\\">\\r\\n          </mat-form-field> -->\\r\\n          <mat-form-field class=\\\"col-md-3\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>TIN <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.companyTin\\\" name=\\\"companyTin\\\" formControlName=\\\"companyTin\\\"\\r\\n              (keydown)=\\\"validateFieldService.numbersOnly($event)\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n          <!-- <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Voucher Fund</mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.voucherFund\\\" name=\\\"voucherFund\\\" formControlName=\\\"voucherFund\\\">\\r\\n          </mat-form-field> -->\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Accounting Representative: <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.contactPersonName\\\" name=\\\"contactPersonName\\\"\\r\\n              formControlName=\\\"contactPersonName\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Representative's Email Address: <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.contactPersonEmail\\\" type=\\\"email\\\" name=\\\"contactPersonEmail\\\" email\\r\\n              formControlName=\\\"contactPersonEmail\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\"\\r\\n            *ngIf=\\\"(currentUser?.userRole?.name==='ROLE_ADMIN'||currentUser?.userRole?.name==='ROLE_SUPER_ADMIN'||currentUser?.userRole?.name==='ROLE_ENCODER') && !isUserRegistration\\\">\\r\\n            <mat-label>Delinquent</mat-label>\\r\\n            <mat-select [(ngModel)]=\\\"company.delinquent\\\" name=\\\"delinquent\\\" formControlName=\\\"delinquent\\\"\\r\\n              [compareWith]=\\\"compareDelinquent\\\">\\r\\n              <mat-option *ngFor=\\\"let i of yesNoList\\\" [value]=\\\"i\\\">\\r\\n                {{ i }}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\"\\r\\n            *ngIf=\\\"(currentUser?.userRole?.name==='ROLE_ADMIN'||currentUser?.userRole?.name==='ROLE_SUPER_ADMIN'||currentUser?.userRole?.name==='ROLE_ENCODER') && company.id\\\">\\r\\n            <mat-label>Status</mat-label>\\r\\n            <mat-select [(ngModel)]=\\\"company.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n              <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n                {{i?.status?.replace('_',' ')}}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n\\r\\n\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <!-- <div class=\\\"row\\\">\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Member Affiliation</mat-label>\\r\\n            <mat-select [(ngModel)]=\\\"company.membersAffiliation\\\" name=\\\"membersAffiliation\\\"\\r\\n              [compareWith]=\\\"compareMembersAffiliation\\\" formControlName=\\\"membersAffiliation\\\" matNativeControl required>\\r\\n              <mat-option *ngFor=\\\"let i of affiliationList\\\" [value]=\\\"i\\\">\\r\\n                {{i.description}}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n        </div> -->\\r\\n      </div>\\r\\n\\r\\n\\r\\n\\r\\n      <div class=\\\"row fields\\\">\\r\\n        <h4>\\r\\n          <mat-icon>label_important</mat-icon> Address\\r\\n        </h4>\\r\\n\\r\\n        <!-- <div class=\\\"row\\\">\\r\\n          <mat-slide-toggle color=\\\"warn\\\" (click)=\\\"isForeignAddress()\\\"><b>Foreign Address?</b></mat-slide-toggle>\\r\\n        </div><br><br> -->\\r\\n\\r\\n\\r\\n        <!-- <div *ngIf=\\\"notForeignAddress\\\"> -->\\r\\n        <div class=\\\"row\\\">\\r\\n          <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Country </mat-label>\\r\\n            <!-- <input matInput readonly [(ngModel)]=\\\"company.country\\\" formControlName=\\\"country\\\"> -->\\r\\n            <mat-select [(ngModel)]=\\\"company.country\\\" name=\\\"country\\\" [compareWith]=\\\"compareCountry\\\"\\r\\n              formControlName=\\\"country\\\" matNativeControl required>\\r\\n              <mat-option *ngFor=\\\"let i of countryList\\\" [value]=\\\"i\\\">\\r\\n                {{i.code}} - {{i.name}}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Company Address <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <textarea matInput [(ngModel)]=\\\"company.completeAddress\\\" name=\\\"completeAddress\\\"\\r\\n              formControlName=\\\"completeAddress\\\"></textarea>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n\\r\\n        <!-- <div class=\\\"row\\\">\\r\\n            <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Region</mat-label>\\r\\n              <mat-select [(ngModel)]=\\\"company.region\\\" (selectionChange)=\\\"getProvinces()\\\" name=\\\"region\\\"\\r\\n                formControlName=\\\"region\\\" matNativeControl required>\\r\\n                <mat-option *ngFor=\\\"let i of regionsList\\\" [value]=\\\"i\\\">\\r\\n                  {{i.regionName}}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Province</mat-label>\\r\\n              <mat-select [(ngModel)]=\\\"company.province\\\" (selectionChange)=\\\"getCityMunicipalities()\\\"\\r\\n                [disabled]=\\\"!company.region\\\" name=\\\"province\\\" formControlName=\\\"province\\\" matNativeControl required>\\r\\n                <mat-option *ngFor=\\\"let i of provinceList\\\" [value]=\\\"i\\\">\\r\\n                  {{i.provinceName}}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"row\\\">\\r\\n            <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>City/Municipality</mat-label>\\r\\n              <mat-select [(ngModel)]=\\\"company.cityMunicipality\\\" (selectionChange)=\\\"getBarangays()\\\"\\r\\n                [disabled]=\\\"!company.province\\\" name=\\\"cityMunicipality\\\" formControlName=\\\"cityMunicipality\\\"\\r\\n                matNativeControl required>\\r\\n                <mat-option *ngFor=\\\"let i of cityMunicipalityList\\\" [value]=\\\"i\\\">\\r\\n                  {{i.cityMunicipalityName}}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Barangay</mat-label>\\r\\n              <mat-select [(ngModel)]=\\\"company.barangay\\\" [disabled]=\\\"!company.cityMunicipality\\\" name=\\\"barangay\\\"\\r\\n                formControlName=\\\"barangay\\\" matNativeControl required>\\r\\n                <mat-option *ngFor=\\\"let i of barangayList\\\" [value]=\\\"i\\\">\\r\\n                  {{i.barangayName}}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n          </div> -->\\r\\n        <!-- </div> -->\\r\\n\\r\\n        <!-- <div *ngIf=\\\"!notForeignAddress\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Country</mat-label>\\r\\n              <input matInput [(ngModel)]=\\\"company.country\\\" name=\\\"country\\\" formControlName=\\\"country\\\">\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Foreign Address</mat-label>\\r\\n              <input matInput [(ngModel)]=\\\"company.foreignAddress\\\" name=\\\"foreignAddress\\\"\\r\\n                formControlName=\\\"foreignAddress\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div> -->\\r\\n\\r\\n      </div>\\r\\n    </form>\\r\\n    <hr>\\r\\n    <br>\\r\\n\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"!isFromModal || !showApproveRejectButton\\\">\\r\\n      <div class=\\\"col-md-12\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"save('')\\\" *ngIf=\\\"!company?.id\\\"\\r\\n          [disabled]=\\\"!(companyForm.valid)\\\">\\r\\n          <mat-icon>save</mat-icon> SAVE\\r\\n        </button>\\r\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"update('')\\\" *ngIf=\\\"company?.id\\\"\\r\\n          [disabled]=\\\"!(companyForm.valid)\\\">\\r\\n          <mat-icon>task_alt </mat-icon> UPDATE\\r\\n        </button>\\r\\n        <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"approve()\\\" *ngIf=\\\"isFromModal && showApproveRejectButton\\\">\\r\\n          <i class=\\\"material-icons color__white\\\">verified</i> APPROVE\\r\\n        </button>\\r\\n        <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"reject()\\\" *ngIf=\\\"isFromModal && showApproveRejectButton\\\">\\r\\n          <i class=\\\"material-icons color__white\\\">unpublished</i> REJECT\\r\\n        </button>\\r\\n        <button mat-raised-button color=\\\"warn\\\" (click)=\\\"cancel()\\\"\\r\\n          *ngIf=\\\"company?.id || company?.companyName || company?.companyTelephoneNo || company?.companyTin\\\">\\r\\n          <!-- <button mat-raised-button color=\\\"warn\\\" (click)=\\\"cancel()\\\"\\r\\n          *ngIf=\\\"company?.id || company?.companyName || company?.companyTelephoneNo || company?.companyFaxNo || company?.companyTin\\\"> -->\\r\\n          <mat-icon>{{ company?.id ? 'cancel' : 'refresh' }}</mat-icon> {{ company?.id ? 'CANCEL' : 'RESET' }}\\r\\n        </button>\\r\\n        <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"closeModal()\\\" *ngIf=\\\"isFromModal\\\">\\r\\n          <i class=\\\"material-icons color__white\\\">close</i> CLOSE\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div *ngIf=\\\"isFromModal && showApproveRejectButton\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"update('')\\\" *ngIf=\\\"company?.id\\\"\\r\\n        [disabled]=\\\"!(companyForm.valid)\\\">\\r\\n        <mat-icon>task_alt </mat-icon> UPDATE\\r\\n      </button>\\r\\n      <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"approve()\\\">\\r\\n        <i class=\\\"material-icons color__white\\\">verified</i> APPROVE\\r\\n      </button>\\r\\n      <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"reject()\\\">\\r\\n        <i class=\\\"material-icons color__white\\\">unpublished</i> REJECT\\r\\n      </button>\\r\\n      <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"closeModal()\\\">\\r\\n        <i class=\\\"material-icons color__white\\\">close</i> CLOSE\\r\\n      </button>\\r\\n    </div>\\r\\n  </div>\\r\\n</form>\\r\\n\";","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ENDPOINTS } from '@shared';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class AddressService {\r\n\r\n    constructor(\r\n        private http: HttpClient\r\n    ) { }\r\n\r\n    getRegions() {\r\n        return this.http.get(`${ENDPOINTS.regions}`);\r\n    }\r\n\r\n    getProvinces(regionId) {\r\n        return this.http.get(`${ENDPOINTS.provinces}/region-id/${regionId}`);\r\n    }\r\n\r\n    getCityMunicipalities(provinceId) {\r\n        return this.http.get(`${ENDPOINTS.cityMunicipalities}/province-id/${provinceId}`);\r\n    }\r\n\r\n    getBarangays(cityMunicipalityId) {\r\n        return this.http.get(`${ENDPOINTS.barangays}/city-municipality-id/${cityMunicipalityId}`);\r\n    }\r\n\r\n    getBarangay(barangayId) {\r\n        return this.http.get(`${ENDPOINTS.barangays}/barangay-id/${barangayId}`);\r\n    }\r\n\r\n}"]}