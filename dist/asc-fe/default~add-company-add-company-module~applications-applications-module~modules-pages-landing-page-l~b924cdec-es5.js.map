{"version":3,"sources":["webpack:///src/app/modules/pages/company/add-company/add-company.component.ts","webpack:///src/app/modules/pages/company/add-company/add-company.component.html","webpack:///src/app/core/services/address/address.service.ts"],"names":["AddCompanyComponent","apiService","addressService","formBuilder","dataStorage","sweetAlertService","validateFieldService","route","router","matDialog","dialogRef","data","displayedColumns","countryList","companyList","affiliationList","regionsList","provinceList","cityMunicipalityList","barangayList","statusList","yesNoList","company","todayDate","Date","notForeignAddress","isFromModal","isUserRegistration","showApproveRejectButton","dataForModal","dataFromModal","isUpdate","country","additionalStatus","status","push","currentUser","getUserAccount","setFormValidator","getCountries","getAffiliationList","id","Number","snapshot","paramMap","get","viewApplication","findById","subscribe","res","responseData","findAll","countries","activeMembersAffiliation","endpoint","userRole","name","ROLE_ADMIN","ROLE_SUPER_ADMIN","ACTIVE","FOR_APPROVAL","delinquent","setDelinquent","save","undefined","customSuccessMessage","close","err","error","navigate","update","success","cancel","companyForm","group","companyName","required","companyMobileNo","companyTelephoneNo","companyTelephoneNo2","membersAffiliation","contactPersonName","contactPersonEmail","pattern","companyTin","completeAddress","voucherFund","markAsUntouched","markAsPristine","value","selected","description","approveCompany","delinquentVal","AddressService","http","regions","regionId","provinces","provinceId","cityMunicipalities","cityMunicipalityId","barangays","barangayId"],"mappings":"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","file":"default~add-company-add-company-module~applications-applications-module~modules-pages-landing-page-l~b924cdec-es5.js","sourcesContent":["import { Component, Inject, OnInit, Optional, ViewChild } from '@angular/core';\nimport { ENDPOINTS, COMMON_FUNCTION, STATUSES, USER_ROLES, YES_NO_OPTION } from '@shared';\nimport { Company } from '@models';\nimport { ApiService, SweetAlertService, DataStorageService } from '@services';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AddressService } from '../../../../core/services/address/address.service';\nimport { ValidateFieldService } from 'app/core/services/validate-field.service';\n\n@Component({\n  selector: 'app-add-company',\n  templateUrl: './add-company.component.html',\n  styleUrls: ['./add-company.component.scss']\n})\nexport class AddCompanyComponent implements OnInit {\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\n  @ViewChild(MatTable, { static: false }) table: MatTable<Company>;\n  dataSource: MatTableDataSource<Company>;\n  displayedColumns: string[] = ['companyName', 'companyTelephoneNo', 'companyFaxNo', 'companyTin', 'address'];\n\n  countryList = [];\n  companyList = [];\n  affiliationList = [];\n  regionsList = [];\n  provinceList = [];\n  cityMunicipalityList = [];\n  barangayList = [];\n  statusList = [...STATUSES];\n  yesNoList = [...YES_NO_OPTION];\n\n  company = new Company();\n  companyForm: FormGroup;\n  currentUser: any;\n  todayDate: Date = new Date();\n  id: any;\n  notForeignAddress = true;\n  isFromModal = false;\n  isUserRegistration = false;\n  showApproveRejectButton = false;\n\n  constructor(\n    private apiService: ApiService,\n    private addressService: AddressService,\n    private formBuilder: FormBuilder,\n    private dataStorage: DataStorageService,\n    private sweetAlertService: SweetAlertService,\n    public validateFieldService: ValidateFieldService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private matDialog: MatDialog,\n    @Optional() public dialogRef: MatDialogRef<AddCompanyComponent>,\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    if (data) {\n      if (data.dataForModal) {\n        const dataFromModal = data.dataForModal;\n\n        this.isFromModal = dataFromModal.isFromModal;\n        this.showApproveRejectButton = dataFromModal.isUpdate;\n\n        if (dataFromModal.isUpdate) {\n          this.company = dataFromModal.company\n        } else {\n          this.company.country = dataFromModal.country\n        }\n      }\n      this.isUserRegistration = data.isUserRegistration;\n    }\n\n    const additionalStatus = [\n      {\n        status: 'APPROVED'\n      }, {\n        status: 'DISAPPROVED'\n      }, {\n        status: 'FOR_APPROVAL'\n      }\n    ];\n    this.statusList.push(...additionalStatus);\n\n  }\n\n  ngOnInit(): void {\n    this.currentUser = this.dataStorage.getUserAccount();\n    this.setFormValidator();\n    this.getCountries();\n    this.getAffiliationList();\n    this.id = Number(this.route.snapshot.paramMap.get('id'));\n    if (this.id !== 0) {\n      this.viewApplication();\n    }\n  }\n\n  viewApplication() {\n    this.apiService.findById(ENDPOINTS.company, this.id).subscribe((res: any) => {\n      this.company = res.responseData.data;\n      this.getAffiliationList();\n    });\n  }\n\n  getCountries() {\n    this.apiService.findAll(ENDPOINTS.countries).subscribe((res: any) => {\n      this.countryList = res.responseData.data;\n    });\n  }\n\n  getAffiliationList(): void {\n    this.apiService.findAll(ENDPOINTS.activeMembersAffiliation).subscribe((res: any) => {\n      this.affiliationList = res.responseData.data;\n    });\n  }\n\n\n  save(endpoint) {\n    if (!endpoint) {\n      endpoint = ENDPOINTS.company;\n    }\n\n    if (this.currentUser && (this.currentUser.userRole.name === USER_ROLES.ROLE_ADMIN || this.currentUser.userRole.name === USER_ROLES.ROLE_SUPER_ADMIN)) {\n      this.company.status = COMMON_FUNCTION.ACTIVE;\n    } else {\n      this.company.status = COMMON_FUNCTION.FOR_APPROVAL;\n    }\n\n    // if(this.notForeignAddress){\n    //   this.company.country = 'PHIL'\n    // }\n\n    if (this.isFromModal) {\n      this.company.status = COMMON_FUNCTION.FOR_APPROVAL;\n    }\n    this.company.delinquent = this.setDelinquent(this.company.delinquent);\n\n    this.apiService.save(endpoint, this.company).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.id = res.responseData.data.id;\n          this.company = res.responseData.data;\n          this.sweetAlertService.customSuccessMessage('Company successfully saved.');\n          if (this.isFromModal) {\n            this.dialogRef.close(this.company);\n          }\n          if (this.isUserRegistration) {\n            this.dialogRef.close(this.company);\n          }\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        // actions after subscription\n        // this.resetFormValidator();\n        if (!this.isFromModal && !this.isUserRegistration) {\n          this.router.navigate(['asc/page/company/update/', this.id]);\n        }\n      });\n  }\n\n\n  getCompany(id): void {\n    this.apiService.findById(ENDPOINTS.company, id).subscribe((res: any) => {\n      if (res) {\n        this.company = res.responseData.data;\n        // this.addressService.getBarangay(res.responseData.data.barangayId).subscribe(\n        //   (res: any) => {\n\n        // this.company.region = res.responseData.data.cityMunicipalityDto.provinceDto.regionDto.regionId;\n        // this.company.province = res.responseData.data.cityMunicipalityDto.provinceDto.provinceId;\n        // this.company.cityMunicipality = res.responseData.data.cityMunicipalityDto.cityMunicipalityId;\n        // this.company.barangay = res.responseData.data.barangayId;\n\n        // this.getProvinces();\n        // this.getCityMunicipalities();\n        // this.getBarangays();\n        // });\n      }\n    });\n  }\n\n  update(endpoint) {\n    if (!endpoint) {\n      endpoint = ENDPOINTS.company;\n    }\n    this.company.delinquent = this.setDelinquent(this.company.delinquent);\n\n    if (this.company.status === 'APPROVED') {\n      this.company.status = 'ACTIVE';\n    }\n    this.apiService.update(endpoint, this.company).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.success(res);\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        // actions after subscription\n        this.cancel();\n        if (this.isFromModal) {\n          this.dialogRef.close(this.company);\n        }\n      });\n  }\n\n  setFormValidator(): void {\n    // if(this.notForeignAddress){\n    //   this.companyForm = this.formBuilder.group({\n    //     companyName: ['', Validators.required],\n    //     companyTelephoneNo: ['', Validators.required],\n    //     companyFaxNo: ['', Validators.required],\n    //     membersAffiliation: ['', Validators.required],\n    //     companyTin: ['', Validators.required],\n    //     // region: ['', Validators.required],\n    //     // province: ['', Validators.required],\n    //     // cityMunicipality: ['', Validators.required],\n    //     // barangay: ['', Validators.required],\n    //     completeAddress: ['', Validators.required]\n    //   });\n    // }else{\n    //   this.companyForm = this.formBuilder.group({\n    //     companyName: ['', Validators.required],\n    //     companyTelephoneNo: ['', Validators.required],\n    //     companyFaxNo: ['', Validators.required],\n    //     membersAffiliation: ['', Validators.required],\n    //     companyTin: ['', Validators.required],\n    //     country: ['', Validators.required],\n    //     foreignAddress: ['', Validators.required]\n    //   });\n    // }\n\n    this.companyForm = this.formBuilder.group({\n      companyName: ['', Validators.required],\n      companyMobileNo: ['', Validators.required],\n      companyTelephoneNo: ['', Validators.required],\n      companyTelephoneNo2: ['', Validators.required],\n      // companyFaxNo: ['', Validators.required],\n      membersAffiliation: ['', Validators.required],\n      contactPersonName: ['', Validators.required],\n      contactPersonEmail: ['', [Validators.required, Validators.pattern('[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}')]],\n      companyTin: ['', Validators.required],\n      country: ['', Validators.required],\n      completeAddress: ['', Validators.required],\n      voucherFund: [''],\n      status: [''],\n      delinquent: ['']\n    });\n  }\n\n  cancel(): void {\n    if (!this.isFromModal) {\n      if (this.company.id) {\n        this.router.navigate(['/asc/page/company/lists']);\n      } else {\n        this.company = new Company();\n        this.companyForm.markAsUntouched();\n        this.companyForm.markAsPristine();\n      }\n    }\n  }\n\n\n  // getRegions() {\n  //   this.addressService.getRegions().subscribe(\n  //     (res: any) => {\n  //       this.regionsList = res;\n  //     });\n  // }\n\n  // getProvinces() {\n  //   this.addressService.getProvinces(this.company.region.regionId).subscribe(\n  //     (res: any) => {\n  //       this.provinceList = res.responseData.data;\n  //     });\n  // }\n\n  // getCityMunicipalities() {\n  //   this.addressService.getCityMunicipalities(this.company.province.provinceId).subscribe(\n  //     (res: any) => {\n  //       this.cityMunicipalityList = res.responseData.data;\n  //     });\n  // }\n\n  // getBarangays() {\n  //   this.addressService.getBarangays(this.company.cityMunicipality.cityMunicipalityId).subscribe(\n  //     (res: any) => {\n  //       this.barangayList = res.responseData.data;\n  //     });\n  // }\n\n  isForeignAddress(): void {\n    this.notForeignAddress = !this.notForeignAddress;\n    // this.setFormValidator();\n  }\n\n  compareMembersAffiliation(value: any, selected: any): boolean {\n    if (value && selected) {\n      return value.description === selected.description;\n    }\n  }\n\n  compareCountry(value: any, selected: any): boolean {\n    if (value && selected) {\n      return value.id === selected.id;\n    }\n  }\n\n  compareDelinquent(value: any, selected: any): boolean {\n    if (value) {\n      return value === (selected ? 'Yes' : 'No');\n    }\n  }\n\n  approve() {\n    this.company.status = 'APPROVED';\n    this.save(ENDPOINTS.approveCompany);\n  }\n\n  reject() {\n    this.company.status = 'DISAPPROVED';\n    this.update('');\n  }\n\n  closeModal() {\n    this.dialogRef.close();\n  }\n\n  setDelinquent(delinquentVal: any): boolean {\n    return delinquentVal === 'Yes' ? true : false;\n  }\n\n}\n","<form>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-12 title\">\n        <mat-label>\n          <mat-icon>apartment</mat-icon> Company\n        </mat-label>\n        <button class=\"button-right\" *ngIf=\"!isFromModal && !isUserRegistration\" mat-raised-button color=\"primary\"\n          [routerLink]=\"['/asc/page/company/lists']\">\n          <mat-icon>list</mat-icon> VIEW COMPANIES\n        </button>\n      </div>\n    </div>\n    <hr>\n\n\n    <form [formGroup]=\"companyForm\">\n      <div class=\"row fields\">\n        <h4>\n          <mat-icon>label_important</mat-icon> Company Information\n        </h4>\n        <div class=\"row\">\n          <mat-form-field class=\"col-md-7\" appearance=\"outline\">\n            <mat-label>Company Name <span class=\"required-field\">*</span></mat-label>\n            <input matInput [(ngModel)]=\"company.companyName\" name=\"companyName\" formControlName=\"companyName\">\n          </mat-form-field>\n\n          <mat-form-field class=\"col-md-5\" appearance=\"outline\">\n            <mat-label>Member Affiliation <span class=\"required-field\">*</span></mat-label>\n            <mat-select [(ngModel)]=\"company.membersAffiliation\" name=\"membersAffiliation\"\n              [compareWith]=\"compareMembersAffiliation\" formControlName=\"membersAffiliation\">\n              <mat-option *ngFor=\"let i of affiliationList\" [value]=\"i\">\n                {{i.description}}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <mat-form-field class=\"col-md-3\" appearance=\"outline\">\n            <mat-label>Mobile Number <span class=\"required-field\">*</span></mat-label>\n            <input matInput [(ngModel)]=\"company.companyMobileNo\" name=\"companyMobileNo\" placeholder=\"09xxxxxxxxx\"\n              formControlName=\"companyMobileNo\" (keydown)=\"validateFieldService.numbersOnly($event)\" maxlength=\"11\">\n          </mat-form-field>\n\n          <mat-form-field class=\"col-md-3\" appearance=\"outline\">\n            <mat-label>Telephone Number <span class=\"required-field\">*</span></mat-label>\n            <input matInput [(ngModel)]=\"company.companyTelephoneNo\" name=\"companyTelephoneNo\"\n              formControlName=\"companyTelephoneNo\" (keydown)=\"validateFieldService.numbersOnly($event)\" maxlength=\"11\">\n          </mat-form-field>\n\n          <mat-form-field class=\"col-md-3\" appearance=\"outline\">\n            <mat-label>Alternate Telephone Number <span class=\"required-field\">*</span></mat-label>\n            <input matInput [(ngModel)]=\"company.companyTelephoneNo2\" name=\"companyTelephoneNo2\"\n              formControlName=\"companyTelephoneNo2\" (keydown)=\"validateFieldService.numbersOnly($event)\" maxlength=\"11\">\n          </mat-form-field>\n\n          <!-- <mat-form-field class=\"col-md-4\" appearance=\"outline\">\n            <mat-label>Fax Number</mat-label>\n            <input matInput [(ngModel)]=\"company.companyFaxNo\" name=\"companyFaxNo\" formControlName=\"companyFaxNo\">\n          </mat-form-field> -->\n          <mat-form-field class=\"col-md-3\" appearance=\"outline\">\n            <mat-label>TIN <span class=\"required-field\">*</span></mat-label>\n            <input matInput [(ngModel)]=\"company.companyTin\" name=\"companyTin\" formControlName=\"companyTin\"\n              (keydown)=\"validateFieldService.numbersOnly($event)\">\n          </mat-form-field>\n\n          <!-- <mat-form-field class=\"col-md-4\" appearance=\"outline\">\n            <mat-label>Voucher Fund</mat-label>\n            <input matInput [(ngModel)]=\"company.voucherFund\" name=\"voucherFund\" formControlName=\"voucherFund\">\n          </mat-form-field> -->\n\n          <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n            <mat-label>Accounting Representative: <span class=\"required-field\">*</span></mat-label>\n            <input matInput [(ngModel)]=\"company.contactPersonName\" name=\"contactPersonName\"\n              formControlName=\"contactPersonName\">\n          </mat-form-field>\n\n          <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n            <mat-label>Representative's Email Address: <span class=\"required-field\">*</span></mat-label>\n            <input matInput [(ngModel)]=\"company.contactPersonEmail\" type=\"email\" name=\"contactPersonEmail\" email\n              formControlName=\"contactPersonEmail\">\n          </mat-form-field>\n\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\"\n            *ngIf=\"(currentUser?.userRole?.name==='ROLE_ADMIN'||currentUser?.userRole?.name==='ROLE_SUPER_ADMIN'||currentUser?.userRole?.name==='ROLE_ENCODER') && !isUserRegistration\">\n            <mat-label>Delinquent</mat-label>\n            <mat-select [(ngModel)]=\"company.delinquent\" name=\"delinquent\" formControlName=\"delinquent\"\n              [compareWith]=\"compareDelinquent\">\n              <mat-option *ngFor=\"let i of yesNoList\" [value]=\"i\">\n                {{ i }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\"\n            *ngIf=\"(currentUser?.userRole?.name==='ROLE_ADMIN'||currentUser?.userRole?.name==='ROLE_SUPER_ADMIN'||currentUser?.userRole?.name==='ROLE_ENCODER') && company.id\">\n            <mat-label>Status</mat-label>\n            <mat-select [(ngModel)]=\"company.status\" name=\"status\" formControlName=\"status\">\n              <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\n                {{i?.status?.replace('_',' ')}}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n\n\n        </div>\n\n        <!-- <div class=\"row\">\n\n          <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n            <mat-label>Member Affiliation</mat-label>\n            <mat-select [(ngModel)]=\"company.membersAffiliation\" name=\"membersAffiliation\"\n              [compareWith]=\"compareMembersAffiliation\" formControlName=\"membersAffiliation\" matNativeControl required>\n              <mat-option *ngFor=\"let i of affiliationList\" [value]=\"i\">\n                {{i.description}}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div> -->\n      </div>\n\n\n\n      <div class=\"row fields\">\n        <h4>\n          <mat-icon>label_important</mat-icon> Address\n        </h4>\n\n        <!-- <div class=\"row\">\n          <mat-slide-toggle color=\"warn\" (click)=\"isForeignAddress()\"><b>Foreign Address?</b></mat-slide-toggle>\n        </div><br><br> -->\n\n\n        <!-- <div *ngIf=\"notForeignAddress\"> -->\n        <div class=\"row\">\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\">\n            <mat-label>Country </mat-label>\n            <!-- <input matInput readonly [(ngModel)]=\"company.country\" formControlName=\"country\"> -->\n            <mat-select [(ngModel)]=\"company.country\" name=\"country\" [compareWith]=\"compareCountry\"\n              formControlName=\"country\" matNativeControl required>\n              <mat-option *ngFor=\"let i of countryList\" [value]=\"i\">\n                {{i.code}} - {{i.name}}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          <mat-form-field class=\"col-md-8\" appearance=\"outline\">\n            <mat-label>Company Address <span class=\"required-field\">*</span></mat-label>\n            <textarea matInput [(ngModel)]=\"company.completeAddress\" name=\"completeAddress\"\n              formControlName=\"completeAddress\"></textarea>\n          </mat-form-field>\n        </div>\n\n\n        <!-- <div class=\"row\">\n            <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n              <mat-label>Region</mat-label>\n              <mat-select [(ngModel)]=\"company.region\" (selectionChange)=\"getProvinces()\" name=\"region\"\n                formControlName=\"region\" matNativeControl required>\n                <mat-option *ngFor=\"let i of regionsList\" [value]=\"i\">\n                  {{i.regionName}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n              <mat-label>Province</mat-label>\n              <mat-select [(ngModel)]=\"company.province\" (selectionChange)=\"getCityMunicipalities()\"\n                [disabled]=\"!company.region\" name=\"province\" formControlName=\"province\" matNativeControl required>\n                <mat-option *ngFor=\"let i of provinceList\" [value]=\"i\">\n                  {{i.provinceName}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n          </div>\n\n          <div class=\"row\">\n            <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n              <mat-label>City/Municipality</mat-label>\n              <mat-select [(ngModel)]=\"company.cityMunicipality\" (selectionChange)=\"getBarangays()\"\n                [disabled]=\"!company.province\" name=\"cityMunicipality\" formControlName=\"cityMunicipality\"\n                matNativeControl required>\n                <mat-option *ngFor=\"let i of cityMunicipalityList\" [value]=\"i\">\n                  {{i.cityMunicipalityName}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n              <mat-label>Barangay</mat-label>\n              <mat-select [(ngModel)]=\"company.barangay\" [disabled]=\"!company.cityMunicipality\" name=\"barangay\"\n                formControlName=\"barangay\" matNativeControl required>\n                <mat-option *ngFor=\"let i of barangayList\" [value]=\"i\">\n                  {{i.barangayName}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n          </div> -->\n        <!-- </div> -->\n\n        <!-- <div *ngIf=\"!notForeignAddress\">\n          <div class=\"row\">\n            <mat-form-field class=\"col-md-4\" appearance=\"outline\">\n              <mat-label>Country</mat-label>\n              <input matInput [(ngModel)]=\"company.country\" name=\"country\" formControlName=\"country\">\n            </mat-form-field>\n            <mat-form-field class=\"col-md-8\" appearance=\"outline\">\n              <mat-label>Foreign Address</mat-label>\n              <input matInput [(ngModel)]=\"company.foreignAddress\" name=\"foreignAddress\"\n                formControlName=\"foreignAddress\">\n            </mat-form-field>\n          </div>\n        </div> -->\n\n      </div>\n    </form>\n    <hr>\n    <br>\n\n    <div class=\"row\" *ngIf=\"!isFromModal || !showApproveRejectButton\">\n      <div class=\"col-md-12\">\n        <button mat-raised-button color=\"primary\" (click)=\"save('')\" *ngIf=\"!company?.id\"\n          [disabled]=\"!(companyForm.valid)\">\n          <mat-icon>save</mat-icon> SAVE\n        </button>\n        <button mat-raised-button color=\"primary\" (click)=\"update('')\" *ngIf=\"company?.id\"\n          [disabled]=\"!(companyForm.valid)\">\n          <mat-icon>task_alt </mat-icon> UPDATE\n        </button>\n        <button mat-raised-button class=\"button-red\" (click)=\"approve()\" *ngIf=\"isFromModal && showApproveRejectButton\">\n          <i class=\"material-icons color__white\">verified</i> APPROVE\n        </button>\n        <button mat-raised-button class=\"button-red\" (click)=\"reject()\" *ngIf=\"isFromModal && showApproveRejectButton\">\n          <i class=\"material-icons color__white\">unpublished</i> REJECT\n        </button>\n        <button mat-raised-button color=\"warn\" (click)=\"cancel()\"\n          *ngIf=\"company?.id || company?.companyName || company?.companyTelephoneNo || company?.companyTin\">\n          <!-- <button mat-raised-button color=\"warn\" (click)=\"cancel()\"\n          *ngIf=\"company?.id || company?.companyName || company?.companyTelephoneNo || company?.companyFaxNo || company?.companyTin\"> -->\n          <mat-icon>{{ company?.id ? 'cancel' : 'refresh' }}</mat-icon> {{ company?.id ? 'CANCEL' : 'RESET' }}\n        </button>\n        <button mat-raised-button class=\"button-red\" (click)=\"closeModal()\" *ngIf=\"isFromModal\">\n          <i class=\"material-icons color__white\">close</i> CLOSE\n        </button>\n      </div>\n    </div>\n\n    <div *ngIf=\"isFromModal && showApproveRejectButton\">\n      <button mat-raised-button color=\"primary\" (click)=\"update('')\" *ngIf=\"company?.id\"\n        [disabled]=\"!(companyForm.valid)\">\n        <mat-icon>task_alt </mat-icon> UPDATE\n      </button>\n      <button mat-raised-button class=\"button-red\" (click)=\"approve()\">\n        <i class=\"material-icons color__white\">verified</i> APPROVE\n      </button>\n      <button mat-raised-button class=\"button-red\" (click)=\"reject()\">\n        <i class=\"material-icons color__white\">unpublished</i> REJECT\n      </button>\n      <button mat-raised-button class=\"button-red\" (click)=\"closeModal()\">\n        <i class=\"material-icons color__white\">close</i> CLOSE\n      </button>\n    </div>\n  </div>\n</form>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ENDPOINTS } from '@shared';\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class AddressService {\n\n    constructor(\n        private http: HttpClient\n    ) { }\n\n    getRegions() {\n        return this.http.get(`${ENDPOINTS.regions}`);\n    }\n\n    getProvinces(regionId) {\n        return this.http.get(`${ENDPOINTS.provinces}/region-id/${regionId}`);\n    }\n\n    getCityMunicipalities(provinceId) {\n        return this.http.get(`${ENDPOINTS.cityMunicipalities}/province-id/${provinceId}`);\n    }\n\n    getBarangays(cityMunicipalityId) {\n        return this.http.get(`${ENDPOINTS.barangays}/city-municipality-id/${cityMunicipalityId}`);\n    }\n\n    getBarangay(barangayId) {\n        return this.http.get(`${ENDPOINTS.barangays}/barangay-id/${barangayId}`);\n    }\n\n}"]}