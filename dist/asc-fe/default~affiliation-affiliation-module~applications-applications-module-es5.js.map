{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/affiliation/affiliation.component.ts","webpack:///src/app/modules/pages/maintenance/affiliation/affiliation.component.html"],"names":["AffiliationComponent","apiService","formBuilder","sweetAlertService","displayedColumns","statusList","yesNoList","affiliation","affiliationList","getList","setFormValidator","findAll","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","member","toString","setValue","status","ACTIVE","save","undefined","success","err","error","resetFormValidator","findById","idForUpdate","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","update","affiliationForm","group","description","required","markAsUntouched","markAsPristine","param","selected","deleteById","id","customSuccessMessage","confirmUpdate","getAffiliation"],"mappings":"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","file":"default~affiliation-affiliation-module~applications-applications-module-es5.js","sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ApiService, SweetAlertService } from '@services';\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES, YES_NO_OPTION } from '@shared';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Affiliation } from '@models';\nimport { FormListComponent } from '@fragments';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-affiliation',\n  templateUrl: './affiliation.component.html',\n  styleUrls: ['./affiliation.component.scss']\n})\nexport class AffiliationComponent implements OnInit {\n\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\n  dataSource: MatTableDataSource<Affiliation>;\n  displayedColumns: string[] = ['affiliationDesc', 'member', 'status'];\n  statusList = [...STATUSES];\n  yesNoList = [...YES_NO_OPTION];\n\n  affiliation = new Affiliation();\n  affiliationList = [];\n\n  affiliationForm: FormGroup;\n\n  constructor(\n    private apiService: ApiService,\n    private formBuilder: FormBuilder,\n    private sweetAlertService: SweetAlertService\n  ) { }\n\n  ngOnInit() {\n    this.getList();\n    this.setFormValidator();\n  }\n\n  getList(): void {\n    this.apiService.findAll(ENDPOINTS.affiliation).subscribe((res: any) => {\n      this.affiliationList = res.responseData.data;\n      this.dataSource = new MatTableDataSource<Affiliation>(res.responseData.data);\n      this.dataSource.paginator = this.formListComponent.paginator;\n      this.dataSource.sort = this.formListComponent.sort;\n    });\n  }\n\n  save(): void {\n    if (this.affiliation.member.toString() === 'No') {\n      this.affiliation.member = this.setValue(this.affiliation.member);\n    }\n    this.affiliation.status = COMMON_FUNCTION.ACTIVE;\n    this.apiService.save(ENDPOINTS.affiliation, this.affiliation).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.success(res);\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        // actions after subscription\n        this.resetFormValidator();\n        this.getList();\n      });\n  }\n\n  getAffiliation(): void {\n    this.apiService.findById(ENDPOINTS.affiliation, this.formListComponent.idForUpdate).subscribe((res: any) => {\n      if (res) {\n        this.affiliation = res.responseData.data;\n      }\n    });\n  }\n\n  confirmUpdate() {\n    if (this.affiliation.status === 'INACTIVE') {\n      Swal.fire({\n        text: `Admin should manually change the company's membership affiliation value to its equivalent non member value. Continue?`,\n        icon: 'question',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Confirm'\n      }).then((result) => {\n        if (result.value) {\n          this.update();\n        }\n      });\n    } else {\n      this.update();\n    }\n  }\n\n  update(): void {\n    this.affiliation.member = this.setValue(this.affiliation.member);\n    this.apiService.update(ENDPOINTS.affiliation, this.affiliation).subscribe(\n      (res: any) => {\n        if (res !== undefined) {\n          this.sweetAlertService.success(res);\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        // actions after subscription\n        this.resetFormValidator();\n        this.getList();\n      });\n  }\n\n  setFormValidator(): void {\n    this.affiliation.status = COMMON_FUNCTION.ACTIVE;\n    this.affiliation.member = true;\n    this.affiliationForm = this.formBuilder.group({\n      description: ['', Validators.required],\n      member: ['', Validators.required],\n      status: [''],\n    });\n  }\n\n  resetFormValidator(): void {\n    this.affiliation = new Affiliation();\n    this.affiliation.status = COMMON_FUNCTION.ACTIVE;\n    this.affiliation.member = true;\n    this.affiliationForm.markAsUntouched();\n    this.affiliationForm.markAsPristine();\n  }\n\n  setValue(param): boolean {\n    return param === 'Yes' || param === true ? true : false;\n  }\n\n  compareMember(value: any, selected: any): boolean {\n    if (value) {\n      return value === (selected ? 'Yes' : 'No');\n    }\n  }\n\n  delete() {\n    Swal.fire({\n      text: 'Are you sure you want to delete this brand?',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Confirm'\n    }).then((result) => {\n      if (result.value) {\n        this.apiService.deleteById(ENDPOINTS.affiliation, this.affiliation.id).subscribe(\n          () => {\n            this.sweetAlertService.customSuccessMessage('Affiliation successfully deleted.');\n            this.resetFormValidator();\n            this.getList();\n          }\n        );\n      }\n    });\n  }\n\n}\n","<form>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-12 title\">\n        <mat-label>\n          <mat-icon>groups</mat-icon> Member's Affiliation\n        </mat-label>\n      </div>\n    </div>\n    <hr>\n\n    <form [formGroup]=\"affiliationForm\">\n      <div class=\"row\">\n        <mat-form-field class=\"col-md-8\" appearance=\"outline\">\n          <mat-label>Member's Affiliation <span class=\"required-field\">*</span></mat-label>\n          <input matInput [(ngModel)]=\"affiliation.description\" name=\"description\" formControlName=\"description\">\n        </mat-form-field>\n\n        <mat-form-field class=\"col-md-4\" appearance=\"outline\">\n          <mat-label>Member</mat-label>\n          <mat-select [(ngModel)]=\"affiliation.member\" name=\"member\" formControlName=\"member\"\n            [compareWith]=\"compareMember\">\n            <mat-option *ngFor=\"let i of yesNoList\" [value]=\"i\">\n              {{ i }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field class=\"col-md-4\" appearance=\"outline\" *ngIf=\"affiliation.id\">\n          <mat-label>Status</mat-label>\n          <mat-select [(ngModel)]=\"affiliation.status\" name=\"status\" formControlName=\"status\">\n            <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\n              {{i.status}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </form>\n\n    <app-form-action-buttons [childObject]=\"affiliation\" [childForm]=\"affiliationForm\" (saveFunction)=\"save()\"\n      (updateFunction)=\"confirmUpdate()\" (cancelFunction)=\"resetFormValidator()\" (deleteFunction)=\"delete()\"></app-form-action-buttons>\n    <br>\n    <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\n      (selectInListFunction)=\"getAffiliation()\"></app-form-list>\n\n  </div>\n</form>\n"]}