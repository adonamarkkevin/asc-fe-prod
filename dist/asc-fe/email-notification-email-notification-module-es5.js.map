<<<<<<< HEAD
{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/email-notification/email-notification.module.ts","webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/maintenance/email-notification/email-notification-routing.module.ts","webpack:///src/app/modules/pages/maintenance/email-notification/email-notification.component.ts","webpack:///src/app/modules/pages/maintenance/email-notification/email-notification.component.html"],"names":["EmailNotificationModule","routes","path","component","EmailNotificationRoutingModule","forChild","EmailNotificationComponent","apiService","formBuilder","sweetAlertService","spinner","displayedColumns","statusList","emailNotification","emailNotificationList","editorConfig","editable","spellcheck","height","minHeight","maxHeight","width","minWidth","translate","enableToolbar","showToolbar","placeholder","defaultParagraphSeparator","defaultFontName","defaultFontSize","fonts","name","customClasses","tag","uploadUrl","uploadWithCredentials","sanitize","toolbarPosition","toolbarHiddenButtons","getList","setFormValidator","findAll","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","show","console","log","save","undefined","hide","success","err","error","resetFormValidator","findById","idForUpdate","update","status","ACTIVE","emailNotificationForm","group","emailCode","required","subject","description","body","markAsUntouched","markAsPristine","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","deleteById","id","customSuccessMessage","getEmailNotification"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAyBO;AAAA,YAAMA,uBAAN;AAAA;AAAA;;;gBAAMA;;;;6BAAAA,uB;AAAuB,W;AAAA,oBAVzB,CACP,4DADO,EAEP,iGAFO,EAGP,qEAHO,EAIP,kEAJO,EAKP,6DALO,EAMP,sFANO,EAOP,wGAPO,CAUyB;;;OAA7B;;;4HAAMA,uB,EAAuB;AAAA,yBAXnB,wFAWmB;AAXO,oBAEvC,4DAFuC,EAGvC,iGAHuC,EAIvC,qEAJuC,EAKvC,kEALuC,EAMvC,6DANuC,EAOvC,sFAPuC,EAQvC,wGARuC;AAWP,S;AAHP,O;;;;;;;;;;;;;;;;;ACtB7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,UAAMC,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,CAAvB;;AAWO;AAAA,YAAMC,8BAAN;AAAA;AAAA;;;gBAAMA;;;;6BAAAA,8B;AAA8B,W;AAAA,oBAHhC,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAGgC,EAF/B,4DAE+B;;;OAApC;;;4HAAMG,8B,EAA8B;AAAA;AAAA,oBAF/B,4DAE+B;AAAA,S;AAFnB,O;;;;;;;;;;;;;;;;;ACbxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AC2BwB;;AACI;;AACJ;;;;;;AAFyC;;AACrC;;AAAA;;;;ADZrB;AAAA,YAAME,0BAAN;AA+DL,8CACUC,UADV,EAEUC,WAFV,EAGUC,iBAHV,EAIUC,OAJV,EAIoC;AAAA;;AAH1B,iBAAAH,UAAA,GAAAA,UAAA;AACA,iBAAAC,WAAA,GAAAA,WAAA;AACA,iBAAAC,iBAAA,GAAAA,iBAAA;AACA,iBAAAC,OAAA,GAAAA,OAAA;AA/DV,iBAAAC,gBAAA,GAA6B,CAAC,WAAD,EAAc,SAAd,EAAyB,aAAzB,EAAwC,QAAxC,CAA7B;AACA,iBAAAC,UAAA,sBAAiB,gDAAjB;AAEA,iBAAAC,iBAAA,GAAoB,IAAI,0FAAJ,EAApB;AACA,iBAAAC,qBAAA,GAAwB,EAAxB;AAIA,iBAAAC,YAAA,GAAoC;AAClCC,sBAAQ,EAAE,IADwB;AAEhCC,wBAAU,EAAE,IAFoB;AAGhCC,oBAAM,EAAE,MAHwB;AAIhCC,uBAAS,EAAE,GAJqB;AAKhCC,uBAAS,EAAE,MALqB;AAMhCC,mBAAK,EAAE,MANyB;AAOhCC,sBAAQ,EAAE,GAPsB;AAQhCC,uBAAS,EAAE,IARqB;AAShCC,2BAAa,EAAE,IATiB;AAUhCC,yBAAW,EAAE,IAVmB;AAWhCC,yBAAW,EAAE,kCAXmB;AAYhCC,uCAAyB,EAAE,GAZK;AAahCC,6BAAe,EAAE,OAbe;AAchCC,6BAAe,EAAE,EAde;AAehCC,mBAAK,EAAE,CACL;AAAC,yBAAO,OAAR;AAAiBC,oBAAI,EAAE;AAAvB,eADK,EAEL;AAAC,yBAAO,iBAAR;AAA2BA,oBAAI,EAAE;AAAjC,eAFK,EAGL;AAAC,yBAAO,SAAR;AAAmBA,oBAAI,EAAE;AAAzB,eAHK,EAIL;AAAC,yBAAO,eAAR;AAAyBA,oBAAI,EAAE;AAA/B,eAJK,CAfyB;AAqBhCC,2BAAa,EAAE,CACf;AACED,oBAAI,EAAE,OADR;AAEE,yBAAO;AAFT,eADe,EAKf;AACEA,oBAAI,EAAE,SADR;AAEE,yBAAO;AAFT,eALe,EASf;AACEA,oBAAI,EAAE,WADR;AAEE,yBAAO,WAFT;AAGEE,mBAAG,EAAE;AAHP,eATe,CArBiB;AAoClCC,uBAAS,EAAE,UApCuB;AAqClC;AACAC,mCAAqB,EAAE,KAtCW;AAuClCC,sBAAQ,EAAE,IAvCwB;AAwClCC,6BAAe,EAAE,KAxCiB;AAyClCC,kCAAoB,EAAE,CACpB,CAAC,MAAD,EACA,QADA,EAEA,aAFA,EAGA,aAHA,CADoB;AAzCY,aAApC;AAwDK;;AApEA;AAAA;AAAA,mBAsEL,oBAAW;AACT,mBAAKC,OAAL;AACA,mBAAKC,gBAAL;AACD;AAzEI;AAAA;AAAA,mBA2EL,mBAAO;AAAA;;AACL,mBAAKjC,UAAL,CAAgBkC,OAAhB,CAAwB,kDAAU5B,iBAAlC,EAAqD6B,SAArD,CAA+D,UAACC,GAAD,EAAc;AAC3E,qBAAI,CAAC7B,qBAAL,GAA6B6B,GAAG,CAACC,YAAJ,CAAiBC,IAA9C;AACA,qBAAI,CAACC,UAAL,GAAkB,IAAI,0EAAJ,CAA0CH,GAAG,CAACC,YAAJ,CAAiBC,IAA3D,CAAlB;AACA,qBAAI,CAACC,UAAL,CAAgBC,SAAhB,GAA4B,KAAI,CAACC,iBAAL,CAAuBD,SAAnD;AACA,qBAAI,CAACD,UAAL,CAAgBG,IAAhB,GAAuB,KAAI,CAACD,iBAAL,CAAuBC,IAA9C;AACD,eALD;AAMD;AAlFI;AAAA;AAAA,mBAoFL,gBAAI;AAAA;;AACF,mBAAKvC,OAAL,CAAawC,IAAb;AACAC,qBAAO,CAACC,GAAR,CAAY,KAAKvC,iBAAjB;AAEA,mBAAKN,UAAL,CAAgB8C,IAAhB,CAAqB,kDAAUxC,iBAA/B,EAAkD,KAAKA,iBAAvD,EAA0E6B,SAA1E,CACI,UAACC,GAAD,EAAc;AACZ,oBAAIA,GAAG,KAAKW,SAAZ,EAAsB;AACpB,wBAAI,CAAC5C,OAAL,CAAa6C,IAAb;;AACA,wBAAI,CAAC9C,iBAAL,CAAuB+C,OAAvB,CAA+Bb,GAA/B;AACD;AACF,eANL,EAMO,UAACc,GAAD,EAAc;AACf,sBAAI,CAAC/C,OAAL,CAAa6C,IAAb;;AACA,sBAAI,CAAC9C,iBAAL,CAAuBiD,KAAvB,CAA6BD,GAA7B;AACD,eATL,EASO,YAAM;AACP,sBAAI,CAAC/C,OAAL,CAAa6C,IAAb;;AACA,sBAAI,CAACI,kBAAL,IACA,MAAI,CAACpB,OAAL,EADA;AAED,eAbL;AAeD;AAvGI;AAAA;AAAA,mBAyGL,gCAAoB;AAAA;;AAClB,mBAAK7B,OAAL,CAAawC,IAAb;AACA,mBAAK3C,UAAL,CAAgBqD,QAAhB,CAAyB,kDAAU/C,iBAAnC,EAAsD,KAAKmC,iBAAL,CAAuBa,WAA7E,EAA0FnB,SAA1F,CAAoG,UAACC,GAAD,EAAc;AAChH,oBAAIA,GAAJ,EAAS;AACP,wBAAI,CAAC9B,iBAAL,GAAyB8B,GAAG,CAACC,YAAJ,CAAiBC,IAA1C;AACAM,yBAAO,CAACC,GAAR,CAAYT,GAAZ;;AACA,wBAAI,CAACjC,OAAL,CAAa6C,IAAb;AACD;AACF,eAND;AAOD;AAlHI;AAAA;AAAA,mBAoHL,kBAAM;AAAA;;AACJ,mBAAK7C,OAAL,CAAawC,IAAb;AACA,mBAAK3C,UAAL,CAAgBuD,MAAhB,CAAuB,kDAAUjD,iBAAjC,EAAoD,KAAKA,iBAAzD,EAA4E6B,SAA5E,CACE,UAACC,GAAD,EAAc;AACZ,oBAAIA,GAAG,KAAKW,SAAZ,EAAsB;AACpB,wBAAI,CAAC5C,OAAL,CAAa6C,IAAb;;AACA,wBAAI,CAAC9C,iBAAL,CAAuB+C,OAAvB,CAA+Bb,GAA/B;AACD;AACF,eANH,EAMK,UAACc,GAAD,EAAc;AACf,sBAAI,CAAC/C,OAAL,CAAa6C,IAAb;;AACA,sBAAI,CAAC9C,iBAAL,CAAuBiD,KAAvB,CAA6BD,GAA7B;AACD,eATH,EASK,YAAM;AACP,sBAAI,CAAC/C,OAAL,CAAa6C,IAAb;;AACA,sBAAI,CAACI,kBAAL;;AACA,sBAAI,CAACpB,OAAL;AACD,eAbH;AAcD;AApII;AAAA;AAAA,mBAsIL,4BAAgB;AACd,mBAAK1B,iBAAL,CAAuBkD,MAAvB,GAAgC,wDAAgBC,MAAhD;AACA,mBAAKC,qBAAL,GAA6B,KAAKzD,WAAL,CAAiB0D,KAAjB,CAAuB;AAClDC,yBAAS,EAAE,CAAC,EAAD,EAAK,0DAAWC,QAAhB,CADuC;AAElDC,uBAAO,EAAE,CAAC,EAAD,EAAK,0DAAWD,QAAhB,CAFyC;AAGlDE,2BAAW,EAAE,CAAC,EAAD,EAAK,0DAAWF,QAAhB,CAHqC;AAIlDG,oBAAI,EAAE,CAAC,EAAD,EAAK,0DAAWH,QAAhB,CAJ4C;AAKlDL,sBAAM,EAAE,CAAC,EAAD;AAL0C,eAAvB,CAA7B;AAOD;AA/II;AAAA;AAAA,mBAiJL,8BAAkB;AAChB,mBAAKlD,iBAAL,GAAyB,IAAI,0FAAJ,EAAzB;AACA,mBAAKA,iBAAL,CAAuBkD,MAAvB,GAAgC,wDAAgBC,MAAhD;AACA,mBAAKC,qBAAL,CAA2BO,eAA3B;AACA,mBAAKP,qBAAL,CAA2BQ,cAA3B;AACD;AAtJI;AAAA;AAAA,mBAwJL,mBAAS;AAAA;;AACP,iEAAKC,IAAL,CAAU;AACRC,oBAAI,EAAE,0DADE;AAERC,oBAAI,EAAE,UAFE;AAGRC,gCAAgB,EAAE,IAHV;AAIRC,kCAAkB,EAAE,SAJZ;AAKRC,iCAAiB,EAAE,MALX;AAMRC,iCAAiB,EAAE;AANX,eAAV,EAOGC,IAPH,CAOQ,UAACC,MAAD,EAAY;AAClB,oBAAIA,MAAM,CAACC,KAAX,EAAkB;AAChB,wBAAI,CAACzE,OAAL,CAAawC,IAAb;;AACA,wBAAI,CAAC3C,UAAL,CAAgB6E,UAAhB,CAA2B,kDAAUvE,iBAArC,EAAwD,MAAI,CAACA,iBAAL,CAAuBwE,EAA/E,EAAmF3C,SAAnF,CACE,YAAM;AACJ,0BAAI,CAAChC,OAAL,CAAa6C,IAAb;;AACA,0BAAI,CAAC9C,iBAAL,CAAuB6E,oBAAvB,CAA4C,0CAA5C;;AACA,0BAAI,CAAC3B,kBAAL;;AACA,0BAAI,CAACpB,OAAL;AACD,mBANH;AAQD;AACF,eAnBD;AAoBD;AA7KI;;AAAA;AAAA;;;2BAAMjC,0B,EAA0B,qH,EAAA,2H,EAAA,4H,EAAA,8H;AAAA,S;;;gBAA1BA,0B;AAA0B,iD;AAAA;AAAA;wEAE1B,4D,EAAiB,I;;;;;;;;;;;;;;AClB9B;;AACI;;AACI;;AACI;;AACI;;AACI;;AACJ;;AACJ;;AACJ;;AACA;;AAEA;;AACI;;AACI;;AACI;;AAAW;;AAAW;;AAA6B;;AAAC;;AAAO;;AAC3D;;AAAgB;AAAA;AAAA;;AAAhB;;AAEJ;;AAEA;;AACI;;AAAW;;AAAO;;AAClB;;AAAgB;AAAA;AAAA;;AAAhB;;AACJ;;AAEA;;AACI;;AAAW;;AAAM;;AACjB;;AAAY;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AAEA;;AACI;;AAAW;;AAAW;;AACtB;;AAAmB;AAAA;AAAA;;AAA6F;;AACpH;;AAEA;;AACI;;AAAW;;AAAI;;AACf;;AACI;AAAA;AAAA;;AAIJ;;AAAiB;;AACrB;;AACJ;;AACJ;;AAEA;;AACI;AAAA,uBAAgB,IAAA+C,IAAA,EAAhB;AAAsB,eAAtB,EAAuB,gBAAvB,EAAuB;AAAA,uBAAmB,IAAAS,MAAA,EAAnB;AAA2B,eAAlD,EAAuB,gBAAvB,EAAuB;AAAA,uBAA+C,IAAAH,kBAAA,EAA/C;AAAmE,eAA1F,EAAuB,gBAAvB,EAAuB;AAAA,uBACL,eADK;AACG,eAD1B;;AAEJ;;AACA;;AACA;;AACI;AAAA,uBAAwB,IAAA4B,oBAAA,EAAxB;AAA8C,eAA9C;;AAAgD;;AAExD;;AACJ;;;;AAhDc;;AAAA;;AAIsB;;AAAA;;AAMA;;AAAA;;AAKJ;;AAAA;;AACI;;AAAA;;AAQG;;AAAA;;AAMf;;AAAA,8GAAoC,QAApC,EAAoC,gBAApC;;AASS;;AAAA,6GAAiC,WAAjC,EAAiC,yBAAjC;;AAKV;;AAAA,qGAAyB,kBAAzB,EAAyB,oBAAzB;;;;;;;ODvChB","file":"email-notification-email-notification-module-es5.js","sourcesContent":["import { CustomAngularEditorModule } from './../../applications/editor/lib/angular-editor.module';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { EmailNotificationRoutingModule } from './email-notification-routing.module';\r\nimport { EmailNotificationComponent } from './email-notification.component';\r\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [EmailNotificationComponent],\r\n  imports: [\r\n    CommonModule,\r\n    EmailNotificationRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule,\r\n    CustomAngularEditorModule\r\n  ]\r\n})\r\nexport class EmailNotificationModule { }\r\n","export * from './form-action-buttons/form-action-buttons.component';\r\nexport * from './form-list/form-list.component';","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { EmailNotificationComponent } from './email-notification.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: EmailNotificationComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class EmailNotificationRoutingModule { }\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\r\nimport { EmailNotification } from 'app/core/models/email-notification.model';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport Swal from 'sweetalert2';\r\nimport { AngularEditorConfig } from '../../applications/editor/public-api';\r\n\r\n@Component({\r\n  selector: 'app-email-notification',\r\n  templateUrl: './email-notification.component.html',\r\n  styleUrls: ['./email-notification.component.scss']\r\n})\r\nexport class EmailNotificationComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<EmailNotification>;\r\n  displayedColumns: string[] = ['emailCode', 'subject', 'description', 'status'];\r\n  statusList = [...STATUSES];\r\n\r\n  emailNotification = new EmailNotification();\r\n  emailNotificationList = [];\r\n\r\n  emailNotificationForm: FormGroup;\r\n\r\n  editorConfig: AngularEditorConfig = {\r\n    editable: true,\r\n      spellcheck: true,\r\n      height: '15em',\r\n      minHeight: '0',\r\n      maxHeight: 'auto',\r\n      width: 'auto',\r\n      minWidth: '0',\r\n      translate: 'no',\r\n      enableToolbar: true,\r\n      showToolbar: true,\r\n      placeholder: 'Enter email body message here...',\r\n      defaultParagraphSeparator: 'p',\r\n      defaultFontName: 'Arial',\r\n      defaultFontSize: '',\r\n      fonts: [\r\n        {class: 'arial', name: 'Arial'},\r\n        {class: 'times-new-roman', name: 'Times New Roman'},\r\n        {class: 'calibri', name: 'Calibri'},\r\n        {class: 'comic-sans-ms', name: 'Comic Sans MS'}\r\n      ],\r\n      customClasses: [\r\n      {\r\n        name: 'quote',\r\n        class: 'quote',\r\n      },\r\n      {\r\n        name: 'redText',\r\n        class: 'redText'\r\n      },\r\n      {\r\n        name: 'titleText',\r\n        class: 'titleText',\r\n        tag: 'h1',\r\n      },\r\n    ],\r\n    uploadUrl: 'v1/image',\r\n    // upload: (file: File) => { ... }\r\n    uploadWithCredentials: false,\r\n    sanitize: true,\r\n    toolbarPosition: 'top',\r\n    toolbarHiddenButtons: [\r\n      ['link',\r\n      'unlink',\r\n      'insertImage',\r\n      'insertVideo',],\r\n\r\n    ]\r\n};\r\n\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n    private spinner: NgxSpinnerService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.emailNotification).subscribe((res: any) => {\r\n      this.emailNotificationList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<EmailNotification>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void{\r\n    this.spinner.show();\r\n    console.log(this.emailNotification);\r\n\r\n    this.apiService.save(ENDPOINTS.emailNotification, this.emailNotification).subscribe(\r\n        (res: any) => {\r\n          if (res !== undefined){\r\n            this.spinner.hide();\r\n            this.sweetAlertService.success(res);\r\n          }\r\n        }, (err: any) => {\r\n          this.spinner.hide();\r\n          this.sweetAlertService.error(err);\r\n        }, () => {\r\n          this.spinner.hide();\r\n          this.resetFormValidator(),\r\n          this.getList();\r\n        }\r\n    )\r\n  }\r\n\r\n  getEmailNotification(): void {\r\n    this.spinner.show();\r\n    this.apiService.findById(ENDPOINTS.emailNotification, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.emailNotification = res.responseData.data;\r\n        console.log(res);\r\n        this.spinner.hide();\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.spinner.show();\r\n    this.apiService.update(ENDPOINTS.emailNotification, this.emailNotification).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined){\r\n          this.spinner.hide();\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.spinner.hide();\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.spinner.hide();\r\n        this.resetFormValidator()\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.emailNotification.status = COMMON_FUNCTION.ACTIVE;\r\n    this.emailNotificationForm = this.formBuilder.group({\r\n      emailCode: ['', Validators.required],\r\n      subject: ['', Validators.required],\r\n      description: ['', Validators.required],\r\n      body: ['', Validators.required],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.emailNotification = new EmailNotification();\r\n    this.emailNotification.status = COMMON_FUNCTION.ACTIVE;\r\n    this.emailNotificationForm.markAsUntouched();\r\n    this.emailNotificationForm.markAsPristine();\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this email notification?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.spinner.show();\r\n        this.apiService.deleteById(ENDPOINTS.emailNotification, this.emailNotification.id).subscribe(\r\n          () => {\r\n            this.spinner.hide();\r\n            this.sweetAlertService.customSuccessMessage('Email notification successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","<form>\r\n    <div class=\"container-fluid\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12 title\">\r\n                <mat-label>\r\n                    Email Notification\r\n                </mat-label>\r\n            </div>\r\n        </div>\r\n        <hr>\r\n\r\n        <form [formGroup]=\"emailNotificationForm\">\r\n            <div class=\"row\">\r\n                <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                    <mat-label>Email Code <span class=\"required-field\">*</span></mat-label>\r\n                    <input matInput [(ngModel)]=\"emailNotification.emailCode\" name=\"emailCode\"\r\n                        formControlName=\"emailCode\">\r\n                </mat-form-field>\r\n\r\n                <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                    <mat-label>Subject</mat-label>\r\n                    <input matInput [(ngModel)]=\"emailNotification.subject\" name=\"subject\" formControlName=\"subject\">\r\n                </mat-form-field>\r\n\r\n                <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                    <mat-label>Status</mat-label>\r\n                    <mat-select [(ngModel)]=\"emailNotification.status\" name=\"status\" formControlName=\"status\">\r\n                        <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n                            {{i.status}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field class=\"col-md-12\" appearance=\"outline\">\r\n                    <mat-label>Description</mat-label>\r\n                    <textarea matInput [(ngModel)]=\"emailNotification.description\" name=\"description\" formControlName=\"description\"></textarea>\r\n                </mat-form-field>\r\n\r\n                <div class=\"col-md-12\" appearance=\"outline\">\r\n                    <mat-label>Body</mat-label>\r\n                    <angular-editor \r\n                        [(ngModel)]=\"emailNotification.body\" \r\n                        [config]=\"editorConfig\" \r\n                        name=\"body\"\r\n                        formControlName=\"body\">\r\n                    </angular-editor><br>\r\n                </div>\r\n            </div>\r\n        </form>\r\n\r\n        <app-form-action-buttons [childObject]=\"emailNotification\" [childForm]=\"emailNotificationForm\"\r\n            (saveFunction)=\"save()\" (updateFunction)=\"update()\" (cancelFunction)=\"resetFormValidator()\"\r\n            (deleteFunction)=\"delete()\">\r\n        </app-form-action-buttons>\r\n        <br>\r\n        <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\r\n            (selectInListFunction)=\"getEmailNotification()\"></app-form-list>\r\n\r\n    </div>\r\n</form>\r\n"]}
=======
{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/email-notification/email-notification.module.ts","webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/maintenance/email-notification/email-notification-routing.module.ts","webpack:///src/app/modules/pages/maintenance/email-notification/email-notification.component.ts","webpack:///src/app/modules/pages/maintenance/email-notification/email-notification.component.html"],"names":["EmailNotificationModule","routes","path","component","EmailNotificationRoutingModule","forChild","EmailNotificationComponent","apiService","formBuilder","sweetAlertService","spinner","displayedColumns","statusList","emailNotification","emailNotificationList","editorConfig","editable","spellcheck","height","minHeight","maxHeight","width","minWidth","translate","enableToolbar","showToolbar","placeholder","defaultParagraphSeparator","defaultFontName","defaultFontSize","fonts","name","customClasses","tag","uploadUrl","uploadWithCredentials","sanitize","toolbarPosition","toolbarHiddenButtons","getList","setFormValidator","findAll","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","show","console","log","save","undefined","hide","success","err","error","resetFormValidator","findById","idForUpdate","update","status","ACTIVE","emailNotificationForm","group","emailCode","required","subject","description","body","markAsUntouched","markAsPristine","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","deleteById","id","customSuccessMessage","getEmailNotification"],"mappings":"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","file":"email-notification-email-notification-module-es5.js","sourcesContent":["import { CustomAngularEditorModule } from './../../applications/editor/lib/angular-editor.module';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { EmailNotificationRoutingModule } from './email-notification-routing.module';\r\nimport { EmailNotificationComponent } from './email-notification.component';\r\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [EmailNotificationComponent],\r\n  imports: [\r\n    CommonModule,\r\n    EmailNotificationRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule,\r\n    CustomAngularEditorModule\r\n  ]\r\n})\r\nexport class EmailNotificationModule { }\r\n","export * from './form-action-buttons/form-action-buttons.component';\r\nexport * from './form-list/form-list.component';","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { EmailNotificationComponent } from './email-notification.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: EmailNotificationComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class EmailNotificationRoutingModule { }\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\r\nimport { EmailNotification } from 'app/core/models/email-notification.model';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport Swal from 'sweetalert2';\r\nimport { AngularEditorConfig } from '../../applications/editor/public-api';\r\n\r\n@Component({\r\n  selector: 'app-email-notification',\r\n  templateUrl: './email-notification.component.html',\r\n  styleUrls: ['./email-notification.component.scss']\r\n})\r\nexport class EmailNotificationComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<EmailNotification>;\r\n  displayedColumns: string[] = ['emailCode', 'subject', 'description', 'status'];\r\n  statusList = [...STATUSES];\r\n\r\n  emailNotification = new EmailNotification();\r\n  emailNotificationList = [];\r\n\r\n  emailNotificationForm: FormGroup;\r\n\r\n  editorConfig: AngularEditorConfig = {\r\n    editable: true,\r\n      spellcheck: true,\r\n      height: '15em',\r\n      minHeight: '0',\r\n      maxHeight: 'auto',\r\n      width: 'auto',\r\n      minWidth: '0',\r\n      translate: 'no',\r\n      enableToolbar: true,\r\n      showToolbar: true,\r\n      placeholder: 'Enter email body message here...',\r\n      defaultParagraphSeparator: 'p',\r\n      defaultFontName: 'Arial',\r\n      defaultFontSize: '',\r\n      fonts: [\r\n        {class: 'arial', name: 'Arial'},\r\n        {class: 'times-new-roman', name: 'Times New Roman'},\r\n        {class: 'calibri', name: 'Calibri'},\r\n        {class: 'comic-sans-ms', name: 'Comic Sans MS'}\r\n      ],\r\n      customClasses: [\r\n      {\r\n        name: 'quote',\r\n        class: 'quote',\r\n      },\r\n      {\r\n        name: 'redText',\r\n        class: 'redText'\r\n      },\r\n      {\r\n        name: 'titleText',\r\n        class: 'titleText',\r\n        tag: 'h1',\r\n      },\r\n    ],\r\n    uploadUrl: 'v1/image',\r\n    // upload: (file: File) => { ... }\r\n    uploadWithCredentials: false,\r\n    sanitize: true,\r\n    toolbarPosition: 'top',\r\n    toolbarHiddenButtons: [\r\n      ['link',\r\n      'unlink',\r\n      'insertImage',\r\n      'insertVideo',],\r\n\r\n    ]\r\n};\r\n\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n    private spinner: NgxSpinnerService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.emailNotification).subscribe((res: any) => {\r\n      this.emailNotificationList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<EmailNotification>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void{\r\n    this.spinner.show();\r\n    console.log(this.emailNotification);\r\n\r\n    this.apiService.save(ENDPOINTS.emailNotification, this.emailNotification).subscribe(\r\n        (res: any) => {\r\n          if (res !== undefined){\r\n            this.spinner.hide();\r\n            this.sweetAlertService.success(res);\r\n          }\r\n        }, (err: any) => {\r\n          this.spinner.hide();\r\n          this.sweetAlertService.error(err);\r\n        }, () => {\r\n          this.spinner.hide();\r\n          this.resetFormValidator(),\r\n          this.getList();\r\n        }\r\n    )\r\n  }\r\n\r\n  getEmailNotification(): void {\r\n    this.spinner.show();\r\n    this.apiService.findById(ENDPOINTS.emailNotification, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.emailNotification = res.responseData.data;\r\n        console.log(res);\r\n        this.spinner.hide();\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.spinner.show();\r\n    this.apiService.update(ENDPOINTS.emailNotification, this.emailNotification).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined){\r\n          this.spinner.hide();\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.spinner.hide();\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.spinner.hide();\r\n        this.resetFormValidator()\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.emailNotification.status = COMMON_FUNCTION.ACTIVE;\r\n    this.emailNotificationForm = this.formBuilder.group({\r\n      emailCode: ['', Validators.required],\r\n      subject: ['', Validators.required],\r\n      description: ['', Validators.required],\r\n      body: ['', Validators.required],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.emailNotification = new EmailNotification();\r\n    this.emailNotification.status = COMMON_FUNCTION.ACTIVE;\r\n    this.emailNotificationForm.markAsUntouched();\r\n    this.emailNotificationForm.markAsPristine();\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this email notification?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.spinner.show();\r\n        this.apiService.deleteById(ENDPOINTS.emailNotification, this.emailNotification.id).subscribe(\r\n          () => {\r\n            this.spinner.hide();\r\n            this.sweetAlertService.customSuccessMessage('Email notification successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","<form>\r\n    <div class=\"container-fluid\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12 title\">\r\n                <mat-label>\r\n                    Email Notification\r\n                </mat-label>\r\n            </div>\r\n        </div>\r\n        <hr>\r\n\r\n        <form [formGroup]=\"emailNotificationForm\">\r\n            <div class=\"row\">\r\n                <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                    <mat-label>Email Code <span class=\"required-field\">*</span></mat-label>\r\n                    <input matInput [(ngModel)]=\"emailNotification.emailCode\" name=\"emailCode\"\r\n                        formControlName=\"emailCode\">\r\n                </mat-form-field>\r\n\r\n                <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                    <mat-label>Subject</mat-label>\r\n                    <input matInput [(ngModel)]=\"emailNotification.subject\" name=\"subject\" formControlName=\"subject\">\r\n                </mat-form-field>\r\n\r\n                <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n                    <mat-label>Status</mat-label>\r\n                    <mat-select [(ngModel)]=\"emailNotification.status\" name=\"status\" formControlName=\"status\">\r\n                        <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n                            {{i.status}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field class=\"col-md-12\" appearance=\"outline\">\r\n                    <mat-label>Description</mat-label>\r\n                    <textarea matInput [(ngModel)]=\"emailNotification.description\" name=\"description\" formControlName=\"description\"></textarea>\r\n                </mat-form-field>\r\n\r\n                <div class=\"col-md-12\" appearance=\"outline\">\r\n                    <mat-label>Body</mat-label>\r\n                    <angular-editor \r\n                        [(ngModel)]=\"emailNotification.body\" \r\n                        [config]=\"editorConfig\" \r\n                        name=\"body\"\r\n                        formControlName=\"body\">\r\n                    </angular-editor><br>\r\n                </div>\r\n            </div>\r\n        </form>\r\n\r\n        <app-form-action-buttons [childObject]=\"emailNotification\" [childForm]=\"emailNotificationForm\"\r\n            (saveFunction)=\"save()\" (updateFunction)=\"update()\" (cancelFunction)=\"resetFormValidator()\"\r\n            (deleteFunction)=\"delete()\">\r\n        </app-form-action-buttons>\r\n        <br>\r\n        <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\r\n            (selectInListFunction)=\"getEmailNotification()\"></app-form-list>\r\n\r\n    </div>\r\n</form>\r\n"]}
>>>>>>> 53dc5baaa640736d2cc27f9eee7c34fe4a9274c2
