{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/email-notification/email-notification.module.ts","webpack:///src/app/modules/pages/maintenance/email-notification/email-notification.component.scss","webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/maintenance/email-notification/email-notification.component.html","webpack:///src/app/modules/pages/maintenance/email-notification/email-notification-routing.module.ts","webpack:///src/app/modules/pages/maintenance/email-notification/email-notification.component.ts"],"names":["EmailNotificationModule","declarations","imports","routes","path","component","EmailNotificationRoutingModule","forChild","exports","EmailNotificationComponent","apiService","formBuilder","sweetAlertService","spinner","displayedColumns","statusList","emailNotification","emailNotificationList","editorConfig","editable","spellcheck","height","minHeight","maxHeight","width","minWidth","translate","enableToolbar","showToolbar","placeholder","defaultParagraphSeparator","defaultFontName","defaultFontSize","fonts","name","customClasses","tag","uploadUrl","uploadWithCredentials","sanitize","toolbarPosition","toolbarHiddenButtons","getList","setFormValidator","findAll","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","show","console","log","save","undefined","hide","success","err","error","resetFormValidator","findById","idForUpdate","update","status","ACTIVE","emailNotificationForm","group","emailCode","required","subject","description","body","markAsUntouched","markAsPristine","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","deleteById","id","customSuccessMessage","selector","template"],"mappings":"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","file":"email-notification-email-notification-module-es5.js","sourcesContent":["import { CustomAngularEditorModule } from './../../applications/editor/lib/angular-editor.module';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { EmailNotificationRoutingModule } from './email-notification-routing.module';\r\nimport { EmailNotificationComponent } from './email-notification.component';\r\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [EmailNotificationComponent],\r\n  imports: [\r\n    CommonModule,\r\n    EmailNotificationRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    FragmentsModule,\r\n    CustomAngularEditorModule\r\n  ]\r\n})\r\nexport class EmailNotificationModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvbWFpbnRlbmFuY2UvZW1haWwtbm90aWZpY2F0aW9uL2VtYWlsLW5vdGlmaWNhdGlvbi5jb21wb25lbnQuc2NzcyJ9 */\";","export * from './form-action-buttons/form-action-buttons.component';\r\nexport * from './form-list/form-list.component';","export default \"<form>\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12 title\\\">\\r\\n                <mat-label>\\r\\n                    Email Notification\\r\\n                </mat-label>\\r\\n            </div>\\r\\n        </div>\\r\\n        <hr>\\r\\n\\r\\n        <form [formGroup]=\\\"emailNotificationForm\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n                    <mat-label>Email Code <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n                    <input matInput [(ngModel)]=\\\"emailNotification.emailCode\\\" name=\\\"emailCode\\\"\\r\\n                        formControlName=\\\"emailCode\\\">\\r\\n                </mat-form-field>\\r\\n\\r\\n                <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n                    <mat-label>Subject</mat-label>\\r\\n                    <input matInput [(ngModel)]=\\\"emailNotification.subject\\\" name=\\\"subject\\\" formControlName=\\\"subject\\\">\\r\\n                </mat-form-field>\\r\\n\\r\\n                <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n                    <mat-label>Status</mat-label>\\r\\n                    <mat-select [(ngModel)]=\\\"emailNotification.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n                        <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n                            {{i.status}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n\\r\\n                <mat-form-field class=\\\"col-md-12\\\" appearance=\\\"outline\\\">\\r\\n                    <mat-label>Description</mat-label>\\r\\n                    <textarea matInput [(ngModel)]=\\\"emailNotification.description\\\" name=\\\"description\\\" formControlName=\\\"description\\\"></textarea>\\r\\n                </mat-form-field>\\r\\n\\r\\n                <div class=\\\"col-md-12\\\" appearance=\\\"outline\\\">\\r\\n                    <mat-label>Body</mat-label>\\r\\n                    <angular-editor \\r\\n                        [(ngModel)]=\\\"emailNotification.body\\\" \\r\\n                        [config]=\\\"editorConfig\\\" \\r\\n                        name=\\\"body\\\"\\r\\n                        formControlName=\\\"body\\\">\\r\\n                    </angular-editor><br>\\r\\n                </div>\\r\\n            </div>\\r\\n        </form>\\r\\n\\r\\n        <app-form-action-buttons [childObject]=\\\"emailNotification\\\" [childForm]=\\\"emailNotificationForm\\\"\\r\\n            (saveFunction)=\\\"save()\\\" (updateFunction)=\\\"update()\\\" (cancelFunction)=\\\"resetFormValidator()\\\"\\r\\n            (deleteFunction)=\\\"delete()\\\">\\r\\n        </app-form-action-buttons>\\r\\n        <br>\\r\\n        <app-form-list [dataSource]=\\\"dataSource\\\" [displayedColumns]=\\\"displayedColumns\\\"\\r\\n            (selectInListFunction)=\\\"getEmailNotification()\\\"></app-form-list>\\r\\n\\r\\n    </div>\\r\\n</form>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { EmailNotificationComponent } from './email-notification.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: EmailNotificationComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class EmailNotificationRoutingModule { }\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormListComponent } from '@fragments';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES } from '@shared';\r\nimport { EmailNotification } from 'app/core/models/email-notification.model';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport Swal from 'sweetalert2';\r\nimport { AngularEditorConfig } from '../../applications/editor/public-api';\r\n\r\n@Component({\r\n  selector: 'app-email-notification',\r\n  templateUrl: './email-notification.component.html',\r\n  styleUrls: ['./email-notification.component.scss']\r\n})\r\nexport class EmailNotificationComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<EmailNotification>;\r\n  displayedColumns: string[] = ['emailCode', 'subject', 'description', 'status'];\r\n  statusList = [...STATUSES];\r\n\r\n  emailNotification = new EmailNotification();\r\n  emailNotificationList = [];\r\n\r\n  emailNotificationForm: FormGroup;\r\n\r\n  editorConfig: AngularEditorConfig = {\r\n    editable: true,\r\n      spellcheck: true,\r\n      height: '15em',\r\n      minHeight: '0',\r\n      maxHeight: 'auto',\r\n      width: 'auto',\r\n      minWidth: '0',\r\n      translate: 'no',\r\n      enableToolbar: true,\r\n      showToolbar: true,\r\n      placeholder: 'Enter email body message here...',\r\n      defaultParagraphSeparator: 'p',\r\n      defaultFontName: 'Arial',\r\n      defaultFontSize: '',\r\n      fonts: [\r\n        {class: 'arial', name: 'Arial'},\r\n        {class: 'times-new-roman', name: 'Times New Roman'},\r\n        {class: 'calibri', name: 'Calibri'},\r\n        {class: 'comic-sans-ms', name: 'Comic Sans MS'}\r\n      ],\r\n      customClasses: [\r\n      {\r\n        name: 'quote',\r\n        class: 'quote',\r\n      },\r\n      {\r\n        name: 'redText',\r\n        class: 'redText'\r\n      },\r\n      {\r\n        name: 'titleText',\r\n        class: 'titleText',\r\n        tag: 'h1',\r\n      },\r\n    ],\r\n    uploadUrl: 'v1/image',\r\n    // upload: (file: File) => { ... }\r\n    uploadWithCredentials: false,\r\n    sanitize: true,\r\n    toolbarPosition: 'top',\r\n    toolbarHiddenButtons: [\r\n      ['link',\r\n      'unlink',\r\n      'insertImage',\r\n      'insertVideo',],\r\n\r\n    ]\r\n};\r\n\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n    private spinner: NgxSpinnerService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.emailNotification).subscribe((res: any) => {\r\n      this.emailNotificationList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<EmailNotification>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void{\r\n    this.spinner.show();\r\n    console.log(this.emailNotification);\r\n\r\n    this.apiService.save(ENDPOINTS.emailNotification, this.emailNotification).subscribe(\r\n        (res: any) => {\r\n          if (res !== undefined){\r\n            this.spinner.hide();\r\n            this.sweetAlertService.success(res);\r\n          }\r\n        }, (err: any) => {\r\n          this.spinner.hide();\r\n          this.sweetAlertService.error(err);\r\n        }, () => {\r\n          this.spinner.hide();\r\n          this.resetFormValidator(),\r\n          this.getList();\r\n        }\r\n    )\r\n  }\r\n\r\n  getEmailNotification(): void {\r\n    this.spinner.show();\r\n    this.apiService.findById(ENDPOINTS.emailNotification, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.emailNotification = res.responseData.data;\r\n        console.log(res);\r\n        this.spinner.hide();\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.spinner.show();\r\n    this.apiService.update(ENDPOINTS.emailNotification, this.emailNotification).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined){\r\n          this.spinner.hide();\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.spinner.hide();\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.spinner.hide();\r\n        this.resetFormValidator()\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.emailNotification.status = COMMON_FUNCTION.ACTIVE;\r\n    this.emailNotificationForm = this.formBuilder.group({\r\n      emailCode: ['', Validators.required],\r\n      subject: ['', Validators.required],\r\n      description: ['', Validators.required],\r\n      body: ['', Validators.required],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.emailNotification = new EmailNotification();\r\n    this.emailNotification.status = COMMON_FUNCTION.ACTIVE;\r\n    this.emailNotificationForm.markAsUntouched();\r\n    this.emailNotificationForm.markAsPristine();\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this email notification?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.spinner.show();\r\n        this.apiService.deleteById(ENDPOINTS.emailNotification, this.emailNotification.id).subscribe(\r\n          () => {\r\n            this.spinner.hide();\r\n            this.sweetAlertService.customSuccessMessage('Email notification successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n"]}