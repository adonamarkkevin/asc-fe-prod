{"version":3,"sources":["webpack:///src/app/modules/fragments/index.ts","webpack:///src/app/modules/pages/maintenance/login-images/login-images.module.ts","webpack:///src/app/modules/pages/maintenance/login-images/login-images.component.ts","webpack:///src/app/modules/pages/maintenance/login-images/login-images.component.html","webpack:///src/app/modules/pages/maintenance/login-images/login-images-routing.module.ts"],"names":["LoginImagesModule","LoginImagesComponent","apiService","formBuilder","sweetAlertService","dateService","sanitizer","spinner","fileStorageService","displayedColumns","loginImage","loginImageList","isShowUploadButton","setFormValidator","getLoginImageList","findAll","subscribe","res","responseData","data","dataSource","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","show","uploadImage","selectedFile","uploadedLoginImage","hideSpinner","originalFilename","customSuccessMessage","myDocInput","nativeElement","myDocFile","err","error","findById","formListComponent","idForUpdate","obj","window","open","fileURL","deleteById","event","target","files","fileSize","size","URL","createObjectURL","safeURL","bypassSecurityTrustResourceUrl","reader","FileReader","file","readAsDataURL","onload","selected","id","loginImageForm","group","originalFileName","displayed","setTimeout","hide","selectFile","save","resetFormValidator","viewLoginImageList","routes","path","component","LoginImagesRoutingModule","forChild"],"mappings":"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","file":"login-images-login-images-module-es5.js","sourcesContent":["export * from './form-action-buttons/form-action-buttons.component';\nexport * from './form-list/form-list.component';","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LoginImagesRoutingModule } from './login-images-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AngularMaterialModule } from '@shared';\nimport { FragmentsModule } from 'app/modules/fragments/fragments.module';\nimport { LoginImagesComponent } from './login-images.component';\n\n\n@NgModule({\n  declarations: [LoginImagesComponent],\n  imports: [\n    CommonModule,\n    LoginImagesRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n    FragmentsModule,\n  ]\n})\nexport class LoginImagesModule { }\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { FormListComponent } from '@fragments';\nimport { ApiService, SweetAlertService } from '@services';\nimport { ENDPOINTS } from '@shared';\nimport { LoginImage } from 'app/core/models/login-image.model';\nimport { DateService } from 'app/core/services/date.service';\nimport { FileStorageService } from 'app/core/services/file.storage.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-login-images',\n  templateUrl: './login-images.component.html',\n  styleUrls: ['./login-images.component.scss']\n})\nexport class LoginImagesComponent implements OnInit {\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\n  dataSource: MatTableDataSource<LoginImage>;\n  displayedColumns: string[] = [\n    'originalFilename',\n    'fileURL',\n    'fileExtension',\n    // 'displayed'\n  ];\n\n  @ViewChild('docInput') myDocInput: ElementRef;\n  @ViewChild('docFile') myDocFile: ElementRef;\n\n  loginImage = new LoginImage();\n  loginImageForm: FormGroup;\n  loginImageList = [];\n  safeURL: any;\n  uploadedLoginImage: any;\n  fileSize: number;\n  selectedFile: File;\n  isShowUploadButton = false;\n\n  constructor(\n    private apiService: ApiService,\n    private formBuilder: FormBuilder,\n    private sweetAlertService: SweetAlertService,\n    private dateService: DateService,\n    private sanitizer: DomSanitizer,\n    private spinner: NgxSpinnerService,\n    private fileStorageService: FileStorageService,\n  ) { }\n\n  ngOnInit(): void {\n    this.setFormValidator();\n    this.getLoginImageList();\n  }\n\n  getLoginImageList(): void {\n    this.apiService.findAll(ENDPOINTS.loginImage).subscribe(\n      (res: any) => {\n        this.loginImageList = res.responseData.data;\n        this.dataSource = new MatTableDataSource<LoginImage>(res.responseData.data);\n      });\n\n  }\n\n  save(): void {\n    Swal.fire({\n      text: 'Are you sure you want to upload this image?',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Confirm'\n    }).then((result) => {\n      if (result.value) {\n        this.spinner.show();\n        this.fileStorageService.uploadImage(ENDPOINTS.loginImage + `?displayed=true`, this.selectedFile)\n          .subscribe((res: any) => {\n            this.uploadedLoginImage = res.responseData.data\n            this.hideSpinner();\n            this.selectedFile = null;\n            this.isShowUploadButton = false;\n            this.loginImage.originalFilename = null;\n            this.sweetAlertService.customSuccessMessage('Image successfully uploaded.');\n            this.getLoginImageList();\n            this.myDocInput.nativeElement.value = '';\n            this.myDocFile.nativeElement.value = '';\n            this.loginImage = new LoginImage();\n          }, (err: any) => {\n            this.hideSpinner();\n            this.sweetAlertService.error(err);\n          }, () => {\n            this.hideSpinner();\n          });\n      } else {\n        this.selectedFile = null;\n      }\n    });\n  }\n\n  viewLoginImageList(): void {\n    this.apiService.findById(ENDPOINTS.loginImage, this.formListComponent.idForUpdate).subscribe(\n      (res: any) => {\n        this.loginImage = res?.responseData?.data;\n      }\n    )\n  }\n\n  viewDocument(obj) {\n    window.open(obj.fileURL);\n  }\n\n  delete(): void {\n    Swal.fire({\n      text: 'Are you sure you want to delete this login image?',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Confirm'\n    }).then((result) => {\n\n      this.apiService.deleteById(ENDPOINTS.loginImage, this.formListComponent.idForUpdate).subscribe(\n        (res: any) => {\n          this.myDocInput.nativeElement.value = '';\n          this.myDocFile.nativeElement.value = '';\n          this.sweetAlertService.customSuccessMessage('Login image successfully deleted.');\n          this.getLoginImageList();\n          this.loginImage = new LoginImage();\n        }\n      )\n    });\n  }\n\n  selectFile(event) {\n    if (event.target.files[0]) {\n      this.fileSize = event.target.files[0].size;\n      const fileURL = URL.createObjectURL(event.target.files[0]);\n      this.safeURL = this.sanitizer.bypassSecurityTrustResourceUrl(fileURL);\n      const reader = new FileReader();\n      const [file] = event.target.files;\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n      };\n      this.selectedFile = event.target.files[0];\n    }\n  }\n\n  compareImageLogin(value: any, selected: any): boolean {\n    if (value && selected) {\n      return value.id === selected.id;\n    }\n  }\n\n\n  setFormValidator(): void {\n    this.loginImageForm = this.formBuilder.group({\n      originalFileName: [''],\n      displayed: [''],\n    });\n  }\n\n  resetFormValidator(): void {\n    this.loginImage = new LoginImage();\n  }\n\n  hideSpinner() {\n    setTimeout(() => {\n      this.spinner.hide();\n    }, 1);\n  }\n\n}\n","<form>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-12 title\">\n        <mat-label>\n          Login Image\n        </mat-label>\n      </div>\n    </div>\n    <hr>\n    <form [formGroup]=\"loginImageForm\">\n\n        <div class=\"row\">\n          <div class=\"col-md-8\" appearance=\"outline\">\n            <mat-label>Filename:  </mat-label>\n            <br>\n            <input #docInput matInput [value]=\"loginImage?.originalFilename\" *ngIf=\"loginImage?.originalFilename\" disabled>\n\n            <input #docFile class=\"file-upload\" type=\"file\" accept=\"image/jpg, image/jpeg\" (change)=\"selectFile($event)\" [hidden]=\"loginImage?.originalFilename\"/>\n          </div>\n          <div class=\"col-md-12\"><br></div>\n          <div class=\"col-md-7\" appearance=\"outline\">\n            <button mat-raised-button\n              *ngIf=\"loginImage?.originalFilename\"\n              class=\"button-red button-right\" (click)=\"viewDocument(loginImage)\">\n              <i class=\"material-icons color__white\">open_in_new</i> VIEW IMAGE\n            </button>\n          </div>\n        </div><br>\n    </form>\n\n    <app-form-action-buttons [childObject]=\"loginImage\" [childForm]=\"loginImageForm\" (saveFunction)=\"save()\"\n      (cancelFunction)=\"resetFormValidator()\" (deleteFunction)=\"delete()\">\n    </app-form-action-buttons>\n\n    <div class=\"col-md-12\"><hr></div>\n    <div class=\"col-md-12\"><br></div>\n\n    <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\n      (selectInListFunction)=\"viewLoginImageList()\"></app-form-list>\n  </div>\n\n\n\n\n</form>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginImagesComponent } from './login-images.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginImagesComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LoginImagesRoutingModule { }\n"]}