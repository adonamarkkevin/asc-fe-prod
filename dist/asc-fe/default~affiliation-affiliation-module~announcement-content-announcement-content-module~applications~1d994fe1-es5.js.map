{"version":3,"sources":["webpack:///src/app/modules/fragments/request-for-special-clearing/request-for-special-clearing.component.ts","webpack:///src/app/modules/fragments/incomplete-disapproved-rationale/incomplete-disapproved-rationale.component.html","webpack:///src/app/core/models/screener-reviewer-pair.model.ts","webpack:///src/app/core/models/numberOfMultipleApplicationAllowed.model.ts","webpack:///src/app/core/models/type-of-document.model.ts","webpack:///src/app/core/models/application-rejection.model.ts","webpack:///src/app/core/models/country.model.ts","webpack:///src/app/core/models/type-of-main-document.model.ts","webpack:///src/app/modules/fragments/reject-disapproved-reason/reject-disapproved-reason.component.ts","webpack:///src/app/core/models/rationale-s2.model.ts","webpack:///src/app/core/models/type-of-reason.model.ts","webpack:///src/app/core/models/rationale.model.ts","webpack:///src/app/modules/fragments/fragments.module.ts","webpack:///src/app/core/models/type-of-application.model.ts","webpack:///src/app/core/models/application-rationale-list.model.ts","webpack:///src/app/core/models/s1-application.model.ts","webpack:///src/app/modules/fragments/incomplete-disapproved-rationale/incomplete-disapproved-rationale.component.ts","webpack:///src/app/modules/fragments/request-for-special-clearing/request-for-special-clearing.component.html","webpack:///src/app/core/models/product.model.ts","webpack:///src/app/modules/fragments/form-list/form-list.component.ts","webpack:///src/app/core/models/type-of-rational.model.ts","webpack:///src/app/core/models/email-notification.model.ts","webpack:///src/app/modules/fragments/fragments-routing.module.ts","webpack:///src/app/modules/fragments/incomplete-disapproved-rationale/incomplete-disapproved-rationale.component.scss","webpack:///src/app/core/models/asc-rate-special.model.ts","webpack:///src/app/core/models/payment.model.ts","webpack:///src/app/core/models/type-of-medium.model.ts","webpack:///src/app/core/models/application-multimedia.model.ts","webpack:///src/app/core/models/s2-application.model.ts","webpack:///src/app/core/models/or-preparation.model.ts","webpack:///src/app/core/models/medium-execution-controller.model.ts","webpack:///src/app/core/models/promissory-note-period.model.ts","webpack:///src/app/core/models/dialect.model.ts","webpack:///src/app/core/models/user-account.model.ts","webpack:///src/app/modules/fragments/form-action-buttons/form-action-buttons.component.ts","webpack:///src/app/core/models/login-image.model.ts","webpack:///src/app/modules/fragments/reject-disapproved-reason/reject-disapproved-reason.component.html","webpack:///src/app/modules/fragments/form-list/form-list.component.scss","webpack:///src/app/core/models/asc-rate.model.ts","webpack:///src/app/core/models/application-single-media.model.ts","webpack:///src/app/core/models/type-of-medium-execution.model.ts","webpack:///src/app/modules/fragments/form-list/form-list.component.html","webpack:///src/app/modules/fragments/request-for-special-clearing/request-for-special-clearing.component.scss","webpack:///src/app/core/models/application-request.model.ts","webpack:///src/app/core/models/profile.model.ts","webpack:///src/app/core/models/uploading-document-file-size-model.ts","webpack:///src/app/core/models/attachment-document.model.ts","webpack:///src/app/core/models/announcement.model.ts","webpack:///src/app/modules/fragments/form-action-buttons/form-action-buttons.component.html","webpack:///src/app/core/models/category.model.ts","webpack:///src/app/core/models/company-penalties.model.ts","webpack:///src/app/core/models/supporting-document.model.ts","webpack:///src/app/core/models/user-role.model.ts","webpack:///src/app/core/models/payment-type.model.ts","webpack:///src/app/core/models/or-preparation-reference.model.ts","webpack:///src/app/core/models/holiday.model.ts","webpack:///src/app/core/models/brand-penalties.model.ts","webpack:///src/app/core/models/performance-metrics.model.ts","webpack:///src/app/core/models/payment-method.model.ts","webpack:///src/app/modules/fragments/reject-disapproved-reason/reject-disapproved-reason.component.scss","webpack:///src/app/core/models/qrAndBarCodeChecker.model.ts","webpack:///src/app/core/models/index.ts","webpack:///src/app/modules/fragments/form-action-buttons/form-action-buttons.component.scss","webpack:///src/app/core/models/affiliation.model.ts","webpack:///src/app/core/models/brand.model.ts","webpack:///src/app/core/models/company.model.ts","webpack:///src/app/core/models/application-rationale-list-s2.model.ts","webpack:///src/app/core/models/s1-and-s2-form-expiration-period.model.ts"],"names":["RequestForSpecialClearingComponent","apiService","dataStorage","sweetAlertService","router","dialogRef","data","s1Application","s2Application","applicationRequest","applicationForm","currentUser","getUserAccount","setApplicationRequest","hasSpecialClearing","applicationType","adTitle","applicationOwner","brand","product","company","formType","submitApplicationForm","tagLine","status","displayStatus","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","endpointExtension","actionBy","username","save","applicationRequests","id","subscribe","res","customSuccessMessage","toLowerCase","navigate","err","error","message","under_maintenance","close","specialClearing","submissionType","ORIGINAL","internalStatus","externalStatus","console","log","s2ApplicationFormPresentorSave","responseData","selector","template","ScreenerReviewerPair","NumberOfMultipleApplicationAllowed","TypeOfDocument","ApplicationRejection","typeOfReason","Country","TypeOfMainDocument","RejectDisapprovedReasonComponent","spinner","applicationRejection","applicationRejectionList","typeOfReasonList","selectedReasonList","getTypeOfReasonsList","ascUser","action","headerTitle","findAll","endpoint","applicationStage","s1ReasonOfRejection","applicationS2","s2ReasonOfRejection","actionDate","Date","push","isExist","filter","reason","length","setRejectionData","errMsg","mySelectReason","nativeElement","e","index","findIndex","srl","splice","msg","endpointReason","endpointReject","swalMsg","navigateToList","S1_APPLICATION_REJECTED","S2_APPLICATION_REJECTED","REJECT","S1_APPLICATION_DISAPPROVED","S2_APPLICATION_DISAPPROVED","DISAPPROVED","show","decisionStatus","INCOMPLETE","s1ApplicationFormEncoderRejectCompliance","s1ApplicationFormEncoderReject","s1ApplicationFormEncoderRejectRevision","s2ApplicationFormEncoderReject","info","remarks","res1","multipleApplication","actualNumberOfApplicationForm","countVerifiedApplicationForm","S1_APPLICATION_REVIEWED","forwardMultipleAppsTo","hide","navigateByUrl","assignedEncoder","forwardMultipleAppFormToAdSpe","RationaleS2","TypeOfReason","Rationale","FragmentsModule","declarations","imports","exports","TypeOfApplication","ApplicationRationaleList","S1Application","IncompleteDisapprovedRationaleComponent","rationale","rationaleS2","typeOfRational","applicationRationaleList","applicationRationaleListS2","rationaleList","selectedRationaleList","isOther","otherDescription","getRationale","submissionTypeForm","applicationFormS2","typeOfRationale","REVISION","COMPLIANCE","hasToa","list","swalMessage","activeModel","applicationRationale","applicationRationaleS2","applicationRationaleLists","others","Product","FormListComponent","dialog","api","alert","displayedColumns","selectInListFunction","deleteInListFunction","updateListFunction","idForUpdate","idForDelete","getVoucherRef","signatory","signatoryRef","dataSource","paginator","sort","emit","obj","elementObject","JSON","parse","stringify","open","signatoryEditModal","disableClose","width","undefined","r","closeAll","findByParam","voucherAttachment","voucherAttachmentReference","fileURL","customErrorMessage","window","TypeOfRational","EmailNotification","routes","FragmentsRoutingModule","forChild","AscRateSpecial","Payment","paymentMethod","filedBirForm","TypeOfMedium","ApplicationMultimedia","ApplicationMultimediaItemsDTO","ApplicationMultimediaMovingDTO","ApplicationMultimediaStaticDTO","S2Application","OrPreparation","totals","totalSales","totalAmountDue","totalVat","totalWithholdingtax","MediumExecutionController","PromissoryNotePeriod","Dialect","UserAccount","FormActionButtonsComponent","isFromModal","showApproveRejectButton","saveFunction","validateFunction","updateFunction","deleteFunction","cancelFunction","closeModalFunction","approveFunction","rejectFunction","isHideSaveButton","isShowApproveDisapproveButton","isHideDeleteButton","isHideUpdateButton","isShowValidateButton","childObject","LoginImage","AscRate","ApplicationSingleMedia","TypeOfMediumExecution","ApplicationRequest","Profile","UploadingDocumentFileSize","AttachmentDocument","Announcement","Category","CompanyPenalties","SupportingDocument","UserRole","PaymentType","OrPreparationReference","Holiday","BrandPenalties","PerformanceMetrics","PaymentMethod","QrAndBarCodeChecker","Affiliation","Brand","Company","ApplicationS2RationaleList","S1AndS2FormExpirationPeriod"],"mappings":"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;;;AAAA;AAAA;AAAA;;UAAaC,W;;;;;;;;;;;;;;;;;;;ACAb;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,sB;;;;;;;;;;;;;;;;;;;ACAb;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,O;;;;;;;;;;;;;;;;;;;ACEb;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,c;;;;;;;;;;;;;;;;;;;ACFb;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,kB;;;;;;;;;;;;;;;;;;;ACEb;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,a;;;;;;;;;;;;;;;;;;;ACFb;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,mB;;;;;;;;;;;;;;;;;;;ACAbe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,W;;;;;;;;;;;;;;;;;;;ACEb;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,K;;;;;;;;;;;;;;;;;;;ACCb;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,O;;;;;;;;;;;;;;;;;;;ACDb;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,0B;;;;;;;;;;;;;;;;;;;ACFb;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,2B","file":"default~affiliation-affiliation-module~announcement-content-announcement-content-module~applications~1d994fe1-es5.js","sourcesContent":["import { i18nMetaToJSDoc } from '@angular/compiler/src/render3/view/i18n/meta';\r\nimport { Component, Inject, OnInit, Optional } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\nimport { S1Application, S2Application } from '@models';\r\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\r\nimport { ENDPOINTS, ERROR_MESSAGES, SUBMISSION_TYPE } from '@shared';\r\nimport { ApplicationRequest } from 'app/core/models/application-request.model';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-request-for-special-clearing',\r\n  templateUrl: './request-for-special-clearing.component.html',\r\n  styleUrls: ['./request-for-special-clearing.component.scss']\r\n})\r\nexport class RequestForSpecialClearingComponent implements OnInit {\r\n\r\n  s1Application = new S1Application();\r\n  s2Application = new S2Application();\r\n  applicationRequest = new ApplicationRequest();\r\n\r\n  currentUser: any;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private dataStorage: DataStorageService,\r\n    private sweetAlertService: SweetAlertService,\r\n    private router: Router,\r\n    @Optional() public dialogRef: MatDialogRef<RequestForSpecialClearingComponent>,\r\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.applicationRequest = this.data.applicationRequest;\r\n    this.s1Application = this.applicationRequest.applicationForm;\r\n    this.currentUser = this.dataStorage.getUserAccount();\r\n    this.setApplicationRequest();\r\n  }\r\n\r\n\r\n  // static id to select special clearing application type.\r\n  setApplicationRequest(): void {\r\n    this.applicationRequest.hasSpecialClearing = true;\r\n    this.applicationRequest.applicationType = this.s1Application.applicationType;\r\n    this.applicationRequest.adTitle = this.s1Application.adTitle;\r\n    this.applicationRequest.applicationOwner = this.currentUser;\r\n    this.applicationRequest.brand = this.s1Application.brand;\r\n    this.applicationRequest.product = this.s1Application.product;\r\n    // this.applicationRequest.category = this.s1Application.category;\r\n    this.applicationRequest.company = this.s1Application.company;\r\n    this.applicationRequest.formType = this.s1Application.formType;\r\n    // this.applicationRequest.membersAffiliation = this.s1Application.membersAffiliation;\r\n    this.applicationRequest.submitApplicationForm = false;\r\n    this.applicationRequest.tagLine = this.s1Application.tagLine;\r\n    this.applicationRequest.applicationForm = this.s1Application;\r\n  }\r\n\r\n  onApproveOrDisapprove(status = 'APPROVED'): void {\r\n    const displayStatus = status === 'APPROVED' ? 'approve' : 'disapprove';\r\n    Swal.fire({\r\n      text: `Are you sure you want to ${displayStatus} this application?`,\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        const endpointExtension = status === 'APPROVED' ? '/approve' : '/disapprove';\r\n        // this.s1Application.actionDate = new Date();\r\n        this.s1Application.actionBy = this.currentUser.username;\r\n\r\n        this.apiService.save(`${ENDPOINTS.applicationRequests}${endpointExtension}/${this.applicationRequest.id}`, this.applicationRequest)\r\n          .subscribe(\r\n            (res: any) => {\r\n              this.sweetAlertService.customSuccessMessage(`Application successfully ${status.toLowerCase()}.`);\r\n              this.router.navigate(['asc/page/application/s2/special']);\r\n            }, (err: any) => {\r\n              err.error.message = ERROR_MESSAGES.under_maintenance;\r\n              this.sweetAlertService.error(err);\r\n            }, () => {\r\n              this.dialogRef.close(this.s1Application);\r\n            }\r\n          );\r\n      }\r\n    });\r\n  }\r\n\r\n  submitRequest(): void {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to submit request?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.save(ENDPOINTS.applicationRequests, this.applicationRequest).subscribe(\r\n          (res: any) => {\r\n            this.sweetAlertService.customSuccessMessage('Request has been submit successfully.');\r\n            this.router.navigate(['asc/page/application/s2/special']);\r\n            this.dialogRef.close();\r\n          }, (err: any) => {\r\n            err.error.message = ERROR_MESSAGES.under_maintenance;\r\n            this.sweetAlertService.error(err);\r\n          });\r\n        this.dialogRef.close();\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n  proceedToS2() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to apply this application to S2?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.s2Application.specialClearing = true;\r\n        this.s2Application.applicationRequest = this.applicationRequest;\r\n        this.s2Application.applicationForm = this.s1Application;\r\n        this.s2Application.submissionType = SUBMISSION_TYPE.ORIGINAL; // this.s2Application.applicationForm.submissionType;\r\n        this.s2Application.internalStatus = 'SAVED';\r\n        this.s2Application.externalStatus = 'SAVED';\r\n        console.log('View S2:', this.s2Application);\r\n        this.apiService.save(ENDPOINTS.s2ApplicationFormPresentorSave, this.s2Application).subscribe(\r\n          (res: any) => {\r\n            this.router.navigate(['asc/page/application/s2/update', res.responseData.data.id]);\r\n            this.dialogRef.close();\r\n          }, (err: any) => {\r\n          })\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n","export default \"<div class=\\\"container-fluid\\\">\\r\\n    <h1><span class=\\\"material-icons\\\" >info</span> Add Rationale</h1>\\r\\n    <hr>\\r\\n    <div class=\\\"row\\\">\\r\\n        <mat-form-field class=\\\"col-md-12\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Select Rationale:</mat-label>\\r\\n                <mat-select class=\\\"mat-select-value-text\\\" (selectionChange)=\\\"selectRationale($event.value)\\\">\\r\\n                    <mat-option *ngFor=\\\"let i of rationaleList\\\" [value]=\\\"i\\\" [matTooltip]=\\\"i.rationale\\\">\\r\\n                        {{i.rationale}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field class=\\\"col-md-12\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>OTHER, PLEASE SPECIFY:</mat-label>\\r\\n            <textarea matInput [(ngModel)]=\\\"otherDescription\\\"></textarea>\\r\\n        </mat-form-field>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row \\\">\\r\\n        <th >Selected Rationale:</th>\\r\\n        <div class=\\\"col list-content\\\" >\\r\\n\\r\\n            <table *ngFor=\\\"let i of selectedRationaleList\\\">\\r\\n                <tr>\\r\\n                    <td class=\\\"reason-description\\\">\\r\\n                        <span class=\\\"material-icons\\\" >label_important</span>  {{i?.typeOfRationale?.rationale}}\\r\\n                    </td>\\r\\n                    <td>\\r\\n                        <span class=\\\"material-icons\\\" (click)=\\\"removeRationale(i.id)\\\">delete</span>\\r\\n                    </td>\\r\\n                </tr>\\r\\n            </table>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row button-content\\\">\\r\\n        <div class=\\\"col\\\">\\r\\n            <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"submitRationale()\\\" [disabled]=\\\"selectedRationaleList.length === 0 && !otherDescription\\\">\\r\\n                <i class=\\\"material-icons color__white\\\">verified</i> Submit Rationale\\r\\n            </button>\\r\\n        </div>\\r\\n        <div class=\\\"col\\\">\\r\\n            <button class=\\\"col-md-6\\\" mat-raised-button class=\\\"button-red\\\" (click)=\\\"cancel()\\\">\\r\\n                <i class=\\\"material-icons color__white\\\">cancel</i> Cancel\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\";","import { UserAccount } from './user-account.model';\r\n\r\nexport class ScreenerReviewerPair {\r\n    id: number;\r\n    screener: UserAccount;\r\n    reviewer: UserAccount;\r\n  }\r\n","export class NumberOfMultipleApplicationAllowed{\r\n    id: number;\r\n    minimum: String;\r\n    maximum: String;\r\n}","export class TypeOfDocument {\r\n    id: number;\r\n    description: string;\r\n    remarksEnable: boolean;\r\n    basedOnEnable: boolean;\r\n    variantEnable: boolean;\r\n    dateOfLaunchEnable: boolean;\r\n    expiresOnEnable: boolean;\r\n    inputEnable: boolean;\r\n    status: string;\r\n}\r\n","import { S1Application } from \"./s1-application.model\";\r\nimport { S2Application } from \"./s2-application.model\";\r\nimport { TypeOfReason } from \"./type-of-reason.model\";\r\nimport { UserAccount } from \"./user-account.model\";\r\n\r\nexport class ApplicationRejection {\r\n    id: number;\r\n    applicationForm: S1Application;\r\n    applicationS2: S2Application;\r\n    actionDate: Date;\r\n    actionBy: UserAccount;\r\n    typeOfReason: TypeOfReason = new TypeOfReason();\r\n    remarks: string;\r\n}","export class Country {\r\n  id: number;\r\n  code: string;\r\n  name: string;\r\n}","export class TypeOfMainDocument {\r\n    id: number;\r\n    status: string;\r\n    typeOfMainDocument: string;\r\n}","import { Component, ElementRef, Inject, OnInit, Type, ViewChild } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\nimport { S1Application, S2Application, TypeOfReason } from '@models';\r\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\r\nimport { APPLICATION_STATUS, APPLICATION_STATUS_S2, APP_DECISION_STATUS, COMMON_FUNCTION, ENDPOINTS, SUBMISSION_TYPE } from '@shared';\r\nimport { ApplicationRejection } from 'app/core/models/application-rejection.model';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-reject-disapproved-reason',\r\n  templateUrl: './reject-disapproved-reason.component.html',\r\n  styleUrls: ['./reject-disapproved-reason.component.scss']\r\n})\r\nexport class RejectDisapprovedReasonComponent implements OnInit {\r\n\r\n  @ViewChild('selectReason')\r\n  mySelectReason: ElementRef;\r\n  s1Application = new S1Application();\r\n  s2Application = new S2Application();\r\n  applicationRejection = new ApplicationRejection();\r\n  typeOfReason = new TypeOfReason();\r\n  applicationRejectionList: Array<ApplicationRejection> = [];\r\n  typeOfReasonList = [];\r\n  selectedReasonList = [];\r\n  errMsg: any;\r\n\r\n  headerTitle;\r\n  ascUser;\r\n  action;\r\n  status;\r\n  currentUser: any;\r\n\r\n  remarks: string;\r\n\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private sweetAlertService: SweetAlertService,\r\n    private router: Router,\r\n    private dataStorage: DataStorageService,\r\n    private spinner: NgxSpinnerService,\r\n    public dialogRef: MatDialogRef<RejectDisapprovedReasonComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getTypeOfReasonsList();\r\n\r\n    this.s1Application = this.data.s1Application;\r\n    this.s2Application = this.data.s2Application;\r\n    this.ascUser = this.data.ascUser;\r\n    this.action = this.data.action;\r\n    this.status = this.data.status;\r\n    this.headerTitle = this.action;\r\n    this.currentUser = this.dataStorage.getUserAccount();\r\n  }\r\n\r\n  getTypeOfReasonsList(): void {\r\n    this.apiService.findAll(ENDPOINTS.typeOfReason).subscribe(\r\n      (res: any) => {\r\n        this.typeOfReasonList = res.responseData.data;\r\n        console.log('reasons => ', this.typeOfReasonList)\r\n      }\r\n    )\r\n  }\r\n\r\n  setRejectionData(): void {\r\n    let endpoint\r\n    if (this.data.applicationStage === 's1') {\r\n      this.applicationRejection.applicationForm = this.s1Application;\r\n      endpoint = ENDPOINTS.s1ReasonOfRejection;\r\n    } else {\r\n      this.applicationRejection.applicationS2 = this.s2Application;\r\n      endpoint = ENDPOINTS.s2ReasonOfRejection;\r\n    }\r\n    this.applicationRejection.actionBy = this.currentUser;\r\n    this.applicationRejection.actionDate = new Date();\r\n    this.applicationRejection.typeOfReason = this.typeOfReason;\r\n    this.applicationRejectionList.push(this.applicationRejection);\r\n    this.applicationRejection = new ApplicationRejection();\r\n  }\r\n\r\n  selectedReason(data) {\r\n    const isExist = this.selectedReasonList.filter(reason => reason.id === data.id);\r\n\r\n    if (isExist.length === 0) {\r\n      this.selectedReasonList.push(data);\r\n      this.typeOfReason = data;\r\n      this.setRejectionData();\r\n      this.errMsg = '';\r\n    } else {\r\n      this.errMsg = 'The selected reason is already added.';\r\n    }\r\n    this.mySelectReason.nativeElement = '';\r\n    \r\n  }\r\n\r\n  checkOthersReason(): boolean{\r\n    return this.selectedReasonList.filter(e=> e.id ===4).length? true : false;\r\n  }\r\n\r\n  removeReason(id) {\r\n    const index: number = this.selectedReasonList.findIndex(srl => srl.id === id);\r\n    this.selectedReasonList.splice(index, 1);\r\n  }\r\n\r\n  cancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  submitRejectionDisapproved(): void {\r\n    // console.log('PARAMETER', this.ascUser, this.action, this.status);\r\n\r\n    let msg;\r\n    let endpointReason;\r\n    let endpointReject;\r\n    let swalMsg = 'Application has been rejected/disapproved successfully.';\r\n    let applicationForm: any;\r\n    let navigateToList;\r\n\r\n    if (this.status === APPLICATION_STATUS.S1_APPLICATION_REJECTED || this.status === APPLICATION_STATUS_S2.S2_APPLICATION_REJECTED) {\r\n      msg = COMMON_FUNCTION.REJECT;\r\n      swalMsg = 'Application has been rejected successfully.';\r\n    } else if (this.status === APPLICATION_STATUS.S1_APPLICATION_DISAPPROVED ||\r\n      this.status === APPLICATION_STATUS_S2.S2_APPLICATION_DISAPPROVED) {\r\n      msg = COMMON_FUNCTION.DISAPPROVED;\r\n      swalMsg = 'Application has been disapproved.';\r\n    }\r\n\r\n    Swal.fire({\r\n      text: 'Are you sure you want to ' + msg + ' this application?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.spinner.show();\r\n        if (this.data.applicationStage === 's1') {\r\n          applicationForm = this.s1Application;\r\n          navigateToList = 'asc/page/application/s1/lists';\r\n          endpointReason = ENDPOINTS.s1ReasonOfRejection;\r\n          endpointReject = this.s1Application.submissionType === SUBMISSION_TYPE.ORIGINAL\r\n            ? this.s1Application.decisionStatus === APP_DECISION_STATUS.INCOMPLETE\r\n              ? ENDPOINTS.s1ApplicationFormEncoderRejectCompliance : ENDPOINTS.s1ApplicationFormEncoderReject\r\n            : ENDPOINTS.s1ApplicationFormEncoderRejectRevision;\r\n        } else {\r\n          applicationForm = this.s2Application;\r\n          navigateToList = 'asc/page/application/s2/lists';\r\n          endpointReason = ENDPOINTS.s2ReasonOfRejection;\r\n          endpointReject = ENDPOINTS.s2ApplicationFormEncoderReject;\r\n        }\r\n        console.info('apllicationRejectionList => ', this.applicationRejectionList)\r\n        // this.spinner.hide();\r\n        this.applicationRejectionList.filter( e=>{\r\n          if(e.typeOfReason.id === 4){\r\n            e.remarks = this.remarks\r\n          }\r\n        });\r\n        this.apiService.save(endpointReason, this.applicationRejectionList).subscribe(\r\n          (res: any) => {\r\n            this.apiService.save(endpointReject, applicationForm).subscribe(\r\n              (res1: any) => {\r\n                this.s1Application = res1.responseData.data;\r\n                // Forward Multiple Application\r\n                if (this.s1Application.submissionType === SUBMISSION_TYPE.ORIGINAL &&\r\n                  this.data.applicationStage === 's1' && this.s1Application.multipleApplication &&\r\n                  this.s1Application.multipleApplication.actualNumberOfApplicationForm ===\r\n                  this.s1Application.multipleApplication.countVerifiedApplicationForm &&\r\n                  this.s1Application.internalStatus !== APPLICATION_STATUS.S1_APPLICATION_REVIEWED) {\r\n                  this.forwardMultipleAppsTo();\r\n                } else {\r\n                  this.spinner.hide();\r\n                  this.sweetAlertService.customSuccessMessage(swalMsg);\r\n                  this.dialogRef.close();\r\n                  this.router.navigateByUrl(navigateToList);\r\n                }\r\n              })\r\n          })\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  forwardMultipleAppsTo() {\r\n    console.log('forwardMultipleAppsTo');\r\n    console.log(this.s1Application);\r\n    this.s1Application.multipleApplication.assignedEncoder = this.s1Application.assignedEncoder;\r\n    this.apiService.save(ENDPOINTS.forwardMultipleAppFormToAdSpe, this.s1Application.multipleApplication).subscribe(\r\n      (res: any) => {\r\n        console.log(res);\r\n        this.spinner.hide();\r\n        this.sweetAlertService.customSuccessMessage('Multiple application successfully forwarded to the next user.');\r\n        this.dialogRef.close();\r\n        this.router.navigateByUrl('asc/page/application/s1/lists');\r\n      }, (err: any) => {\r\n        this.spinner.hide();\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        this.spinner.hide();\r\n      })\r\n  }\r\n\r\n\r\n}\r\n","import { ApplicationS2RationaleList } from \"./application-rationale-list-s2.model\";\r\nimport { ApplicationRationaleList } from \"./application-rationale-list.model\";\r\nimport { S2Application } from \"./s2-application.model\";\r\nimport { UserAccount } from \"./user-account.model\";\r\n\r\nexport class RationaleS2 {\r\n    id: number;\r\n    applicationFormS2: S2Application;\r\n    applicationRationaleLists: ApplicationRationaleList[];\r\n    others: string;\r\n    actionBy: UserAccount;\r\n    actionDate: Date;\r\n}\r\n","export class TypeOfReason {\r\n    id: number;\r\n    reason: string;\r\n    status: string;\r\n}\r\n","import { ApplicationRationaleList } from \"./application-rationale-list.model\";\r\nimport { S1Application } from \"./s1-application.model\";\r\nimport { S2Application } from \"./s2-application.model\";\r\nimport { UserAccount } from \"./user-account.model\";\r\n\r\nexport class Rationale {\r\n    id: number;\r\n    applicationForm: S1Application;\r\n    applicationFormS2: S2Application;\r\n    applicationRationaleLists: ApplicationRationaleList[];\r\n    others: string;\r\n    actionBy: UserAccount;\r\n    actionDate: Date;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FormActionButtonsComponent } from './form-action-buttons/form-action-buttons.component';\r\nimport { FormListComponent } from './form-list/form-list.component';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { FragmentsRoutingModule } from './fragments-routing.module';\r\nimport { RejectDisapprovedReasonComponent } from './reject-disapproved-reason/reject-disapproved-reason.component';\r\nimport { RequestForSpecialClearingComponent } from './request-for-special-clearing/request-for-special-clearing.component';\r\nimport { IncompleteDisapprovedRationaleComponent } from './incomplete-disapproved-rationale/incomplete-disapproved-rationale.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FormActionButtonsComponent,\r\n    FormListComponent,\r\n    RejectDisapprovedReasonComponent,\r\n    RequestForSpecialClearingComponent,\r\n    IncompleteDisapprovedRationaleComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FragmentsRoutingModule,\r\n    AngularMaterialModule,\r\n  ],\r\n  exports: [\r\n    FormActionButtonsComponent,\r\n    FormListComponent\r\n  ]\r\n})\r\nexport class FragmentsModule { }\r\n","export class TypeOfApplication {\r\n    id: number;\r\n    description: string;\r\n    clearingReleaseTime: String\r\n    decisionReleaseTime: String\r\n    sequenceNo: number;\r\n    status: String\r\n    submissionEndTime: String;\r\n    submissionStartTime: String\r\n}","import { TypeOfRational } from \"./type-of-rational.model\";\r\n\r\nexport class ApplicationRationaleList {\r\n\r\n    id: number;\r\n    typeOfRationale: TypeOfRational;\r\n\r\n}","import { Company } from './company.model';\r\nimport { Brand } from './brand.model';\r\nimport { ApplicationType } from './application-type.model';\r\nimport { UserAccount } from './user-account.model';\r\nimport { MultipleApplication } from './multiple-application.model';\r\nimport { Affiliation } from './affiliation.model';\r\nimport { ApplicationRequest } from './application-request.model';\r\nimport { Product } from './product.model';\r\nimport { TypeOfMedium } from './type-of-medium.model';\r\n\r\nexport class S1Application {\r\n    id: number;\r\n    company: Company;\r\n    brand: Brand;\r\n    adTitle: string;\r\n    referenceCode: string;\r\n\r\n    tagLine: string;\r\n    materialInformation: string;\r\n    externalStatus: string\r\n    internalStatus: string\r\n    revisionNo: number;\r\n\r\n    actionBy: UserAccount;\r\n    actionStatus: string; // ASSIGN_TO_ADSPE, ASSIGN_TO_REVIEWER, ASSIGN_TO_SCREENER\r\n    formStatus: string; // OPEN, LOCKED\r\n    submissionType: string // ORIGINAL, REVISION, COMPLIANCE\r\n    applicationType: ApplicationType;\r\n\r\n    formType: string; // INDIVIDUAL, MULTIPLE\r\n    autoSubmit: boolean;\r\n    submissionDate: Date;\r\n    sequenceOrder: number;\r\n    countSeries: number;\r\n\r\n    refTypeOfMedium: string;\r\n    assignedUser: UserAccount;\r\n    applicationOwner: UserAccount;\r\n    multipleApplication: MultipleApplication;\r\n    appFormReference: string;\r\n\r\n    mainAttachmentReference: string;\r\n    supportingAttachmentReference: string;\r\n    paymentAttachmentReference: string;\r\n    membersAffiliation: Affiliation;\r\n    decisionStatus: string;\r\n\r\n    amount: number;\r\n    applicationRequest: ApplicationRequest;\r\n    revisionLetterAttachmentReference: string;\r\n    assignedEncoder: UserAccount;\r\n    assignedAdSpecialist: UserAccount;\r\n\r\n    assignedScreener: UserAccount;\r\n    assignedReviewer: UserAccount;\r\n    verifiedDatetimeByEvaluator: Date;\r\n    sameDayRelease: boolean;\r\n    paidByApplicant: boolean;\r\n\r\n    archived: boolean;\r\n    appliedS2: boolean;\r\n    deliquent: boolean;\r\n    paymentStatus: string;\r\n    applicationDate: Date;\r\n\r\n    validUntil: Date;\r\n    previousRefCode: string;\r\n    hasNoSupportingDocs: boolean;\r\n    referenceCodeRejected: string;\r\n\r\n    hasRevision: boolean;\r\n    product: Product;\r\n    hasOngoingRevision: boolean;\r\n    qrCode: string;\r\n    barCode: string;\r\n    screenerDecisionComment: boolean;\r\n    reviewerDecisionComment: boolean;\r\n    hasOngoingCompliance: boolean;\r\n    releaseStatus: string;\r\n\r\n    complianceForm: boolean; // param need upon request for compliance\r\n    emailSent: boolean;\r\n    forwardToScreener: boolean;\r\n    forwardToReviewer: boolean;\r\n    formProcess: string;\r\n    typeOfMedium: string;\r\n\r\n    stampMaterialFileURL: string;\r\n    stampMaterialFilename: string;\r\n    decisionFormFileURL : string;\r\n    decisionFormFilename: string;\r\n\r\n    hasOngoingAppeal: boolean;\r\n    typeOfAppeal: string;\r\n    appealAttachmentReference: string;\r\n\r\n    hasOfficialReceipt: boolean;\r\n\r\n    // For AppRequest\r\n    status: string;\r\n\r\n    currentAssignee: string;\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\r\nimport { APP_DECISION_STATUS, ENDPOINTS, SUBMISSION_TYPE } from '@shared';\r\nimport { ApplicationS2RationaleList } from 'app/core/models/application-rationale-list-s2.model';\r\nimport { ApplicationRationaleList } from 'app/core/models/application-rationale-list.model';\r\nimport { RationaleS2 } from 'app/core/models/rationale-s2.model';\r\nimport { Rationale } from 'app/core/models/rationale.model';\r\nimport { TypeOfRational } from 'app/core/models/type-of-rational.model';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\n\r\n@Component({\r\n  selector: 'app-incomplete-disapproved-rationale',\r\n  templateUrl: './incomplete-disapproved-rationale.component.html',\r\n  styleUrls: ['./incomplete-disapproved-rationale.component.scss']\r\n})\r\nexport class IncompleteDisapprovedRationaleComponent implements OnInit {\r\n\r\n  rationale = new Rationale();\r\n  rationaleS2 = new RationaleS2();\r\n  typeOfRational = new TypeOfRational();\r\n  applicationRationaleList = new ApplicationRationaleList();\r\n  applicationRationaleListS2 = new ApplicationS2RationaleList();\r\n  rationaleList = [];\r\n  selectedRationaleList = [];\r\n\r\n  submissionType = '';\r\n  isOther = false;\r\n  otherDescription = '';\r\n  currentUser: any;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private sweetAlertService: SweetAlertService,\r\n    private router: Router,\r\n    private dataStorage: DataStorageService,\r\n    private spinner: NgxSpinnerService,\r\n    public dialogRef: MatDialogRef<IncompleteDisapprovedRationaleComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n\r\n    if (data.applicationStage === 's1') {\r\n      this.submissionType = data.s1Application.submissionType;\r\n    } else {\r\n      this.submissionType = data.s2Application.submissionType;\r\n    }\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getRationale();\r\n    this.currentUser = this.dataStorage.getUserAccount();\r\n    console.log('ksahkjakj', this.data);\r\n\r\n  }\r\n\r\n\r\n\r\n  getRationale(): void {\r\n    let endpoint\r\n    let submissionTypeForm\r\n\r\n    if (this.data.applicationStage === 's1') {\r\n      submissionTypeForm = this.data.s1Application.submissionType;\r\n      this.rationale.applicationForm = this.data.s1Application;\r\n    } else {\r\n      submissionTypeForm = this.data.s2Application.submissionType;\r\n      this.rationale.applicationFormS2 = this.data.s2Application;\r\n    }\r\n\r\n    if (submissionTypeForm === SUBMISSION_TYPE.ORIGINAL) {\r\n      endpoint = ENDPOINTS.typeOfRationale;\r\n    } else if (submissionTypeForm === SUBMISSION_TYPE.REVISION) {\r\n      endpoint = ENDPOINTS.typeOfRationale + '/category/FOR_COMPLIANCE';\r\n    } else if (submissionTypeForm === SUBMISSION_TYPE.COMPLIANCE ||\r\n      this.data.s1Application.decisionStatus === APP_DECISION_STATUS.INCOMPLETE) {\r\n      endpoint = ENDPOINTS.typeOfRationale + '/category/FOR_INCOMPLETE_DECISION';\r\n    } else if (this.data.s1Application.hasToa) {\r\n      endpoint = ENDPOINTS.typeOfRationale + '/category/FOR_TOA_APPLICATION';\r\n    }\r\n\r\n    this.apiService.findAll(endpoint).subscribe(\r\n      (res: any) => {\r\n        this.rationaleList = res.responseData.data;\r\n        console.log(this.rationaleList);\r\n      }\r\n    )\r\n  }\r\n\r\n  selectRationale(data): void {\r\n    let list = [];\r\n    if (this.data.applicationStage === 's1') {\r\n      this.applicationRationaleList.typeOfRationale = data;\r\n      this.selectedRationaleList.push(this.applicationRationaleList);\r\n      this.applicationRationaleList = new ApplicationRationaleList();\r\n    } else {\r\n      this.applicationRationaleList.typeOfRationale = data;\r\n      this.selectedRationaleList.push(this.applicationRationaleList);\r\n      this.applicationRationaleList = new ApplicationRationaleList();\r\n    }\r\n    console.log(this.selectedRationaleList);\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  removeRationale(id) {\r\n    const index: number = this.selectedRationaleList.findIndex(srl => srl.id === id);\r\n    this.selectedRationaleList.splice(index, 1);\r\n  }\r\n\r\n  submitRationale(): void {\r\n    let endpoint;\r\n    let swalMessage;\r\n    let activeModel;\r\n\r\n    this.spinner.show();\r\n\r\n    if (this.data.applicationStage === 's1') {\r\n      endpoint = ENDPOINTS.applicationRationale;\r\n      swalMessage = 'S1 application rationale has been saved!'\r\n    } else {\r\n      endpoint = ENDPOINTS.applicationRationaleS2;\r\n      swalMessage = 'S2 application rationale has been saved!';\r\n      this.rationale.id = 0;\r\n    }\r\n\r\n    this.rationale.applicationRationaleLists = this.selectedRationaleList;\r\n    this.rationale.actionDate = new Date();\r\n    this.rationale.actionBy = this.currentUser;\r\n    this.rationale.others = this.otherDescription;\r\n\r\n\r\n    console.log('save rationale', this.rationale);\r\n\r\n    this.apiService.save(endpoint, this.rationale).subscribe(\r\n      (res: any) => {\r\n        this.spinner.hide();\r\n        this.sweetAlertService.customSuccessMessage(swalMessage);\r\n        this.dialogRef.close(res);\r\n      }, (err: any) => {\r\n        console.log(err);\r\n      }\r\n    )\r\n  }\r\n\r\n  cancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","export default \"<form>\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n\\r\\n      <div class=\\\"row title\\\">\\r\\n        <div class=\\\"col-md-12\\\">\\r\\n          <table>\\r\\n            <tr>\\r\\n              <td *ngIf=\\\"applicationRequest?.status!=undefined\\\">\\r\\n                <span>\\r\\n                  Status:\\r\\n                </span>\\r\\n              </td>\\r\\n              <td *ngIf=\\\"applicationRequest?.status!=undefined\\\">\\r\\n                <span *ngIf=\\\"applicationRequest?.status!=undefined\\\">\\r\\n                  <b>{{applicationRequest?.status?.replaceAll('_',' ') | uppercase}}</b>\\r\\n                </span>\\r\\n              </td>\\r\\n              <td class=\\\"no-border\\\" *ngIf=\\\"applicationRequest?.status==='APPROVED' && currentUser?.userRole?.name == 'ROLE_APPLICANT'\\\"\\r\\n              [hidden]=\\\"applicationRequest?.submitApplicationForm\\\">\\r\\n              <button class=\\\"button-right button-red\\\" mat-raised-button (click)=\\\"proceedToS2()\\\">\\r\\n                <i class=\\\"material-icons color__white\\\">check</i> Proceed to S2\\r\\n              </button>\\r\\n              </td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n              <td class=\\\"no-border\\\"></td>\\r\\n            </tr>\\r\\n          </table>\\r\\n          <hr />\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-2\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Form Type: </mat-label>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label><b>{{ s1Application?.formType.replaceAll('_', ' ') }}</b></mat-label>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col-md-2\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Application Type:</mat-label>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label><b>{{ s1Application?.applicationType?.description.replaceAll('_', ' ') | uppercase }}</b></mat-label>\\r\\n        </div>\\r\\n        <br>\\r\\n        <br>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <mat-panel-title>\\r\\n          <i class=\\\"material-icons color__white\\\">label_important</i> &nbsp;Client Information\\r\\n        </mat-panel-title><br />\\r\\n\\r\\n          <div class=\\\"row\\\">\\r\\n            <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Company Name</mat-label>\\r\\n              <input matInput [value]=\\\"s1Application?.company?.companyName\\\" readonly>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Company Membership Affiliation</mat-label>\\r\\n              <input matInput [value]=\\\"s1Application?.company?.membersAffiliation?.description\\\" readonly>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"row\\\">\\r\\n            <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Brand</mat-label>\\r\\n              <input matInput [value]=\\\"s1Application?.brand?.description\\\" readonly>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Product</mat-label>\\r\\n              <input matInput [value]=\\\"s1Application?.product?.description\\\" readonly>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Category</mat-label>\\r\\n              <input matInput [value]=\\\"s1Application?.product?.category?.description\\\" readonly>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n\\r\\n        <mat-panel-title *ngIf=\\\"currentUser?.userRole?.name === 'ROLE_ADMIN' || currentUser?.userRole?.name === 'ROLE_SUPER_ADMIN'\\\">\\r\\n          <i class=\\\"material-icons color__white\\\">label_important</i> &nbsp;Presentor Information\\r\\n        </mat-panel-title>\\r\\n\\r\\n        <div class=\\\"row\\\" *ngIf=\\\"currentUser?.userRole?.name === 'ROLE_ADMIN' || currentUser?.userRole?.name === 'ROLE_SUPER_ADMIN'\\\">\\r\\n          <!-- <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Membership Affiliation</mat-label>\\r\\n            <input matInput [value]=\\\"s1Application?.company?.membersAffiliation?.description\\\" readonly>\\r\\n          </mat-form-field> -->\\r\\n          <mat-form-field class=\\\"col-md-7\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Company Name</mat-label>\\r\\n            <input matInput [value]=\\\"s1Application?.company?.companyName\\\" readonly>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row\\\" *ngIf=\\\"currentUser?.userRole?.name === 'ROLE_ADMIN' || currentUser?.userRole?.name === 'ROLE_SUPER_ADMIN'\\\">\\r\\n          <mat-form-field class=\\\"col-md-11\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Address</mat-label>\\r\\n            <input matInput [value]=\\\"s1Application?.company?.completeAddress\\\" readonly>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row\\\" *ngIf=\\\"currentUser?.userRole?.name === 'ROLE_ADMIN' || currentUser?.userRole?.name === 'ROLE_SUPER_ADMIN'\\\">\\r\\n          <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\" *ngIf=\\\"s1Application.id!= null\\\">\\r\\n            <mat-label>Name of Applicant</mat-label>\\r\\n            <input matInput [value]=\\\"s1Application?.applicationOwner?.firstName+' '+s1Application?.applicationOwner?.lastName\\\" readonly>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row\\\" *ngIf=\\\"currentUser?.userRole?.name === 'ROLE_ADMIN' || currentUser?.userRole?.name === 'ROLE_SUPER_ADMIN'\\\">\\r\\n          <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\" *ngIf=\\\"s1Application.id!= null\\\">\\r\\n            <mat-label>Mobile Number</mat-label>\\r\\n            <input matInput [value]=\\\"s1Application?.applicationOwner?.mobileNumber\\\" readonly>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field class=\\\"col-md-3\\\" appearance=\\\"outline\\\" *ngIf=\\\"s1Application.id!= null\\\">\\r\\n            <mat-label>Telephone Number</mat-label>\\r\\n            <input matInput [value]=\\\"s1Application?.company?.companyTelephoneNo\\\" readonly>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\" *ngIf=\\\"s1Application.id!= null\\\">\\r\\n            <mat-label>Email Address</mat-label>\\r\\n            <input matInput [value]=\\\"s1Application?.applicationOwner?.username\\\" readonly>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <mat-panel-title>\\r\\n          <i class=\\\"material-icons color__white\\\">label_important</i> &nbsp;Material Information\\r\\n        </mat-panel-title>\\r\\n\\r\\n          <div class=\\\"row\\\">\\r\\n            <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Ad Title</mat-label>\\r\\n              <input matInput [value]=\\\"s1Application?.adTitle\\\" readonly />\\r\\n            </mat-form-field>\\r\\n\\r\\n            <!-- <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Reference Code</mat-label>\\r\\n              <input matInput [value]=\\\"s1Application?.referenceCode\\\" readonly />\\r\\n            </mat-form-field> -->\\r\\n\\r\\n            <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Tag Line</mat-label>\\r\\n              <input matInput [value]=\\\"s1Application?.tagLine\\\" readonly />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n        <div class=\\\"row\\\"><br /></div>\\r\\n        <hr />\\r\\n        <br />\\r\\n        <div class=\\\"row\\\" *ngIf=\\\"applicationRequest?.status===undefined\\\">\\r\\n            <div>\\r\\n              <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"submitRequest()\\\">\\r\\n                <i class=\\\"material-icons color__white\\\">check</i> Submit\\r\\n              </button>\\r\\n              <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"dialogRef.close()\\\">\\r\\n                <i class=\\\"material-icons color__white\\\">cancel</i> Cancel\\r\\n              </button>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- //////////////////////////////////////// ADMIN //////////////////////////////////////////////////////////// -->\\r\\n        <div class=\\\"row\\\"\\r\\n        *ngIf=\\\"applicationRequest?.status === 'FOR_APPROVAL' && (currentUser?.userRole?.name == 'ROLE_ADMIN'||currentUser?.userRole?.name == 'ROLE_SUPER_ADMIN')\\\"\\r\\n        >\\r\\n        <div mat-dialog-actions>\\r\\n          <div class=\\\"dialog-button-content\\\" align=\\\"end\\\">\\r\\n            <button class=\\\"confirm\\\" (click)=\\\"onApproveOrDisapprove()\\\">\\r\\n              <i class=\\\"material-icons color__white\\\">thumb_up_alt</i> Approve\\r\\n            </button>\\r\\n            <button class=\\\"warn\\\" (click)=\\\"onApproveOrDisapprove('DISAPPROVED')\\\">\\r\\n              <i class=\\\"material-icons color__white\\\">thumb_down_alt</i> Disapprove\\r\\n            </button>\\r\\n          </div>\\r\\n        </div>\\r\\n        </div>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n\";","import { Brand } from './brand.model';\r\nimport { Category } from './category.model';\r\n\r\nexport class Product {\r\n    id: number;\r\n    description: string;\r\n    status: string;\r\n    brand: Brand;\r\n    category: Category;\r\n}\r\n","import { SweetAlertService } from './../../../core/services/alert-message/sweet-alert.service';\r\nimport { ENDPOINTS } from '@shared';\r\nimport { ApiService } from './../../../core/services/api.service';\r\nimport { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\n\r\n@Component({\r\n  selector: 'app-form-list',\r\n  templateUrl: './form-list.component.html',\r\n  styleUrls: ['./form-list.component.scss']\r\n})\r\nexport class FormListComponent implements OnInit, AfterViewInit {\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  @ViewChild(MatTable, { static: false }) table: MatTable<Object>;\r\n  @Input() dataSource: MatTableDataSource<Object>;\r\n  @Input() displayedColumns = '';\r\n  @Output() selectInListFunction: EventEmitter<any> = new EventEmitter();\r\n  @Output() deleteInListFunction: EventEmitter<any> = new EventEmitter();\r\n  @Output() updateListFunction: EventEmitter<any> = new EventEmitter();\r\n  @Output() idForUpdate: number = 0;\r\n  @Output() idForDelete: number = 0;\r\n  @Output() elementObject: any;\r\n  @Output() getVoucherRef: EventEmitter<any> = new EventEmitter();\r\n  @ViewChild('myTemplate') customModal: TemplateRef<any>;\r\n  @ViewChild('signatoryEdit') signatoryEditModal: TemplateRef<any>;\r\n  signatory: any = {};\r\n  signatoryRef: any = {};\r\n\r\n  constructor(public dialog: MatDialog, private api: ApiService, \r\n    private spinner: NgxSpinnerService, private alert: SweetAlertService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if(this.dataSource){\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n    }\r\n  }\r\n\r\n  getObject(id) {\r\n    this.idForUpdate = id;\r\n    this.selectInListFunction.emit();\r\n  }\r\n\r\n  deleteObject(id, obj: any = '') {\r\n    this.idForDelete = id;\r\n    this.elementObject = obj;\r\n    this.deleteInListFunction.emit(obj);\r\n  }\r\n\r\n  openEditModal(id, obj: any) {\r\n    this.signatory = JSON.parse(JSON.stringify(obj));\r\n    this.signatoryRef = obj;\r\n    this.dialog.open(this.signatoryEditModal, {\r\n      disableClose: true,\r\n      width: '350px',\r\n      data: obj\r\n    });\r\n  }\r\n\r\n  updateObject(): void {\r\n    if (this.signatoryRef.id === undefined) {\r\n      let data = this.dataSource.data;\r\n      data.splice(this.dataSource.data.findIndex(r => r === this.signatoryRef), 1, this.signatory);\r\n      this.updateListFunction.emit(data);\r\n    } else {\r\n      this.updateListFunction.emit(this.signatory);\r\n    }\r\n    this.dialog.closeAll();\r\n  }\r\n\r\n  closeModal() {\r\n    this.dialog.closeAll();\r\n  }\r\n  viewHistory(data){\r\n    console.log('data', data);\r\n    // this.spinner.show()\r\n    \r\n\r\n\r\n    this.api.findByParam(ENDPOINTS.voucherAttachment, data?.voucherAttachmentReference).subscribe(res =>{\r\n      if(!res?.responseData?.data?.fileURL) {\r\n        this.alert.customErrorMessage(\"No Available file\")\r\n      }\r\n      \r\n      window.open(res?.responseData?.data?.fileURL);\r\n    }, error =>{\r\n      this.alert.customErrorMessage(\"No Available File\");\r\n    })\r\n    \r\n  }\r\n\r\n\r\n}\r\n","export class TypeOfRational {\r\n\r\nid: number;\r\nrationale: String;\r\nrationaleCategory: String;\r\nstatus:\tString;\r\n\r\n}","export class EmailNotification {\r\n    id: number;\r\n    body: string;\r\n    description: string;\r\n    emailCode: string;\r\n    status: string;\r\n    subject: string;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class FragmentsRoutingModule { }\r\n","export default \"h1 {\\n  font-size: 20px;\\n  font-weight: 600;\\n}\\nh1 .material-icons {\\n  color: #ad0000;\\n}\\n.list-content {\\n  border: solid 1px #b6b6b6;\\n  border-radius: 5px;\\n  margin: 12px;\\n  min-height: 5em;\\n  max-height: 10em;\\n  overflow: auto;\\n  padding: 10px 10px;\\n}\\n.list-content .material-icons {\\n  color: #a00000;\\n  text-align: end;\\n  font-size: 20px;\\n  vertical-align: middle;\\n}\\n.list-content table {\\n  width: 100%;\\n}\\n.list-content table .reason-description {\\n  text-align: left;\\n}\\n.list-content table td {\\n  text-align: end;\\n}\\n.list-content .material-icons:hover {\\n  cursor: pointer;\\n}\\n.button-content button {\\n  width: 100%;\\n}\\n.errMsg {\\n  color: red;\\n  font-style: italic;\\n}\\n::ng-deep .mat-select-value-text {\\n  word-wrap: break-word;\\n  white-space: normal;\\n}\\n::ng-deep mat-option.mat-option {\\n  overflow-wrap: break-word;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n.mat-option-text.mat-option-text {\\n  white-space: normal;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9mcmFnbWVudHMvaW5jb21wbGV0ZS1kaXNhcHByb3ZlZC1yYXRpb25hbGUvaW5jb21wbGV0ZS1kaXNhcHByb3ZlZC1yYXRpb25hbGUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxlQUFBO0VBQ0EsZ0JBQUE7QUFDSjtBQUFJO0VBQ0ksY0FBQTtBQUVSO0FBR0E7RUFDSSx5QkFBQTtFQUNBLGtCQUFBO0VBQ0EsWUFBQTtFQUNBLGVBQUE7RUFDQSxnQkFBQTtFQUNBLGNBQUE7RUFDQSxrQkFBQTtBQUFKO0FBQ0k7RUFDSSxjQUFBO0VBQ0EsZUFBQTtFQUNBLGVBQUE7RUFDQSxzQkFBQTtBQUNSO0FBRUk7RUFDSSxXQUFBO0FBQVI7QUFDUTtFQUNJLGdCQUFBO0FBQ1o7QUFDUTtFQUNJLGVBQUE7QUFDWjtBQUdJO0VBQ0ksZUFBQTtBQURSO0FBTUk7RUFDSSxXQUFBO0FBSFI7QUFPQTtFQUNFLFVBQUE7RUFDQSxrQkFBQTtBQUpGO0FBT0E7RUFDSSxxQkFBQTtFQUNBLG1CQUFBO0FBSko7QUFRQTtFQU9JLHlCQUFBO0VBRUEsbUJBQUE7RUFDQSxnQkFBQTtFQUNBLHVCQUFBO0FBWko7QUFlRTtFQUNFLG1CQUFBO0FBWkoiLCJmaWxlIjoic3JjL2FwcC9tb2R1bGVzL2ZyYWdtZW50cy9pbmNvbXBsZXRlLWRpc2FwcHJvdmVkLXJhdGlvbmFsZS9pbmNvbXBsZXRlLWRpc2FwcHJvdmVkLXJhdGlvbmFsZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImgxe1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgIC5tYXRlcmlhbC1pY29uc3tcclxuICAgICAgICBjb2xvcjogcmdiKDE3MywgMCwgMCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4ubGlzdC1jb250ZW50e1xyXG4gICAgYm9yZGVyOiBzb2xpZCAxcHggcmdiKDE4MiwgMTgyLCAxODIpO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgbWFyZ2luOiAxMnB4O1xyXG4gICAgbWluLWhlaWdodDogNWVtO1xyXG4gICAgbWF4LWhlaWdodDogMTBlbTtcclxuICAgIG92ZXJmbG93OiBhdXRvO1xyXG4gICAgcGFkZGluZzogMTBweCAxMHB4O1xyXG4gICAgLm1hdGVyaWFsLWljb25ze1xyXG4gICAgICAgIGNvbG9yOiByZ2IoMTYwLCAwLCAwKTtcclxuICAgICAgICB0ZXh0LWFsaWduOiBlbmQ7XHJcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgICB9XHJcblxyXG4gICAgdGFibGV7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgLnJlYXNvbi1kZXNjcmlwdGlvbntcclxuICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGR7XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGVuZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLm1hdGVyaWFsLWljb25zOmhvdmVye1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIH1cclxufVxyXG5cclxuLmJ1dHRvbi1jb250ZW50e1xyXG4gICAgYnV0dG9ue1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG59XHJcblxyXG4uZXJyTXNnIHtcclxuICBjb2xvcjogcmVkO1xyXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcclxufVxyXG5cclxuOjpuZy1kZWVwIC5tYXQtc2VsZWN0LXZhbHVlLXRleHQge1xyXG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xyXG4gICAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcclxuICAgIC8vIGhlaWdodDogNzBweDtcclxufVxyXG5cclxuOjpuZy1kZWVwIG1hdC1vcHRpb24ubWF0LW9wdGlvbiB7XHJcbiAgICAvLyBtYXJnaW46IDByZW0gMDtcclxuICAgIC8vIG92ZXJmbG93OiB2aXNpYmxlO1xyXG4gICAgLy8gbGluZS1oZWlnaHQ6IGluaXRpYWw7XHJcbiAgICAvLyB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XHJcbiAgICAvLyB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XHJcbiAgICAvLyAvLyBtYXJnaW4tYm90dG9tOiA1MHB4O1xyXG4gICAgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDtcclxuICAgIC8vIHdpZHRoOiAxMHJlbTtcclxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XHJcbiAgfVxyXG4gIFxyXG4gIC5tYXQtb3B0aW9uLXRleHQubWF0LW9wdGlvbi10ZXh0IHtcclxuICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7XHJcbiAgfVxyXG4iXX0= */\";","\r\nexport class AscRateSpecial {\r\n    id: number;\r\n    applicationType: string;\r\n    memberOffline: number;\r\n    memberOnline: number;\r\n    nonMemberOffline: number;\r\n    nonMemberOnline: number;\r\n    status: string;\r\n}\r\n","import { S1Application } from './s1-application.model';\r\nimport { PaymentMethod } from './payment-method.model';\r\nimport { MultipleApplication } from './multiple-application.model';\r\nimport { S2Application } from './s2-application.model';\r\n\r\nexport class Payment {\r\n    id: number;\r\n    amountDue: number;\r\n    amountReceive: number;\r\n    appFormReference: string;\r\n    applicationForm: S1Application;\r\n    basicRate: number;\r\n    discount: number;\r\n    filename: string;\r\n    officialReceiptNo: string;\r\n    paymentAttachmentReference: string;\r\n    paymentDate: Date;\r\n    paymentMethod: PaymentMethod = new PaymentMethod();\r\n    paymentStatus: string; // PAID, UNPAID\r\n    remarks: string;\r\n    status: string;\r\n    vat: number;\r\n    withholdingTax: number;\r\n    amountToSettle: number;\r\n    companyName: string;\r\n    companyId: number;\r\n\r\n    multipleApplication: MultipleApplication;\r\n    filedBirForm: boolean = false;\r\n    applicationFormS2: S2Application;\r\n\r\n    constructor() {\r\n        this.filedBirForm = false;\r\n        this.remarks = '';\r\n    }\r\n}\r\n","import { TypeOfClearance } from './type-of-clearance.model';\r\nimport { TypeOfMainDocument } from './type-of-main-document.model';\r\n\r\nexport class TypeOfMedium {\r\n  description: string;\r\n  executionEnable: boolean;\r\n  id: number;\r\n  languageEnable: boolean;\r\n  lengthEnable: boolean;\r\n  multimedia: boolean;\r\n  multimediaMoving: boolean;\r\n  multimediaStatic: boolean;\r\n  othersEnable: boolean;\r\n  singlemedia: boolean;\r\n  sizeLengthEnable: boolean;\r\n  status: string;\r\n  typeOfMainDocument: TypeOfMainDocument;\r\n  widthEnable: boolean;\r\n  typeOfClearance: TypeOfClearance;\r\n\r\n  // not in BE; for List value\r\n  enabledFields: string;\r\n  sizeLength: string;\r\n}\r\n","import { TypeOfMedium } from './type-of-medium.model';\r\n\r\nexport class ApplicationMultimedia {\r\n    id: number;\r\n    amount: number;\r\n    appFormReference: string;\r\n    mediaType?: string; // STATIC, MOVING\r\n    multimediaSizeLength?: string;\r\n    typeOfMedium?: TypeOfMedium;\r\n}\r\n\r\nexport class ApplicationMultimediaItemsDTO {\r\n    hasSelected: boolean;\r\n    id: number;\r\n    multimediaMovingMedium?: string;\r\n    multimediaStaticMedium?: string;\r\n    sizeLength?: number;\r\n}\r\n\r\nexport class ApplicationMultimediaMovingDTO extends ApplicationMultimedia {\r\n    applicationMultimediaMovingList: ApplicationMultimediaItemsDTO[];\r\n    sizeLength: number;\r\n}\r\n\r\nexport class ApplicationMultimediaStaticDTO extends ApplicationMultimedia {\r\n    applicationMultimediaStaticList: ApplicationMultimediaItemsDTO[];\r\n}\r\n","import { ApplicationRequest } from './application-request.model';\r\nimport { S1Application } from './s1-application.model';\r\nimport { UserAccount } from './user-account.model';\r\n\r\nexport class S2Application {\r\n\r\n    id: number;\r\n    actionBy: string;\r\n    actionStatus: string;\r\n    applicationDate: Date;\r\n    applicationForm: S1Application;\r\n    assignedAdSpecialist: UserAccount;\r\n    assignedEncoder: UserAccount;\r\n    assignedUser: UserAccount;\r\n    complianceDate: Date;\r\n    decisionStatus: string;\r\n    externalStatus: string;\r\n    finalMaterialAttachmentReference: string;\r\n    formStatus: string;\r\n    internalStatus: string;\r\n    issuedDate: Date;\r\n    paymentStatus: string;\r\n    specialClearing: boolean;\r\n    submissionDate: Date;\r\n    validUntil: Date;\r\n    validityDate: Date;\r\n    referenceCodeRejected: string;\r\n    releaseDate: Date;\r\n    hasToa: boolean;\r\n    submissionType: string;\r\n    applicationRequest: ApplicationRequest;\r\n    paymentAttachmentReference: string;\r\n    amount: string;\r\n    appFormReference: string;\r\n    hasOngoingCompliance: boolean;\r\n    formProcess: string;\r\n    complianceForm: boolean; // param need upon request for compliance\r\n    hasOngoingAppeal: boolean;\r\n    typeOfAppeal: string;\r\n    appealAttachmentReference: string;\r\n    clearanceToaFileUrl: string;\r\n    clearanceToaFilename: string;\r\n    releaseStatus: string;\r\n    supportingAttachmentReference: string;\r\n}\r\n","import { TotalAmountsModel } from './totals.model';\r\nimport { TypeOfMedium, OrPreparationReference } from '@models';\r\n\r\nexport class OrPreparation {\r\n    amount: number;\r\n    amountInWords: string;\r\n    businessStyle: string;\r\n    companyAddress: string;\r\n    companyName: string;\r\n    companyTin: string;\r\n    controlNumber: string;\r\n    fullPaymentOf: string;\r\n    id: number;\r\n    officialReceiptDate: Date;\r\n    officialReceiptNo: string;\r\n    officialReceiptReferences: OrPreparationReference[];\r\n    remarks: string;\r\n    status: string;\r\n    typeOfMedium: TypeOfMedium;\r\n    voucherControlNumber: string;\r\n\r\n    //totals\r\n    totalSales: number;\r\n    totalVat: number;\r\n    totalWithholdingtax: number;\r\n    totalAmountDue: number;\r\n\r\n    // Not if BE; for FE only\r\n    officialReceiptReferencesValue: string;\r\n\r\n    setTotalAmounts(totals: TotalAmountsModel){\r\n        this.totalSales = totals.totalSales;\r\n        this.totalAmountDue = totals.totalAmountDue;\r\n        this.totalVat = totals.totalVat;\r\n        this.totalWithholdingtax = totals.totalWithholdingtax;\r\n    }\r\n}","import { TypeOfExecution } from './type-of-execution.model';\r\nimport { TypeOfMedium } from './type-of-medium.model';\r\n\r\nexport class MediumExecutionController {\r\n    id: number;\r\n    typeOfExecution: TypeOfExecution;\r\n    typeOfMedium: TypeOfMedium;\r\n    widthEnable: boolean;\r\n}\r\n","export class PromissoryNotePeriod {\r\n  id: number;\r\n  noOfDays: number;\r\n}","\r\nexport class Dialect {\r\n    id: number;\r\n    dialect: string;\r\n    status: string;\r\n}\r\n","import { Affiliation, Company, UserRole } from '@models';\r\n\r\nexport class UserAccount {\r\n    id: number;\r\n    username: string;\r\n    password: string;\r\n    firstName: string;\r\n    middleName: string;\r\n    lastName: string;\r\n    company: Company;\r\n    membersAffiliationDto: Affiliation;\r\n    mobileNumber: string;\r\n    userRole: UserRole;\r\n    status: string;\r\n    acceptTerms: boolean;\r\n    accountType: string;\r\n    // locked: Boolean;\r\n    // enabled: Boolean;\r\n    ascDefault:\tboolean;\r\n    membersAffiliation:\tAffiliation;\r\n    scheduledUser:\tboolean;\r\n    signatureAttachmentReference:\tstring;\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Affiliation, AscRate, Brand, Category, PaymentType, Product, TypeOfApplication, TypeOfDocument, TypeOfMedium, TypeOfReason } from '@models';\r\nimport { Announcement } from 'app/core/models/announcement.model';\r\nimport { AscRateSpecial } from 'app/core/models/asc-rate-special.model';\r\nimport { BrandPenalties } from 'app/core/models/brand-penalties.model';\r\nimport { CompanyPenalties } from 'app/core/models/company-penalties.model';\r\nimport { Dialect } from 'app/core/models/dialect.model';\r\nimport { EmailNotification } from 'app/core/models/email-notification.model';\r\nimport { Holiday } from 'app/core/models/holiday.model';\r\nimport { LoginImage } from 'app/core/models/login-image.model';\r\nimport { MediumExecutionController } from 'app/core/models/medium-execution-controller.model';\r\nimport { NumberOfMultipleApplicationAllowed } from 'app/core/models/numberOfMultipleApplicationAllowed.model';\r\nimport { PromissoryNotePeriod } from 'app/core/models/promissory-note-period.model';\r\nimport { QrAndBarCodeChecker } from 'app/core/models/qrAndBarCodeChecker.model';\r\nimport { S1AndS2FormExpirationPeriod } from 'app/core/models/s1-and-s2-form-expiration-period.model';\r\nimport { ScreenerReviewerPair } from 'app/core/models/screener-reviewer-pair.model';\r\nimport { TypeOfMainDocument } from 'app/core/models/type-of-main-document.model';\r\nimport { TypeOfMediumExecution } from 'app/core/models/type-of-medium-execution.model';\r\nimport { TypeOfRational } from 'app/core/models/type-of-rational.model';\r\nimport { UploadingDocumentFileSize } from 'app/core/models/uploading-document-file-size-model';\r\n\r\n@Component({\r\n  selector: 'app-form-action-buttons',\r\n  templateUrl: './form-action-buttons.component.html',\r\n  styleUrls: ['./form-action-buttons.component.scss']\r\n})\r\nexport class FormActionButtonsComponent implements OnInit {\r\n\r\n  @Input() isFromModal = false;\r\n  @Input() showApproveRejectButton = false;\r\n\r\n  @Input() childObject: ChildObject;\r\n  @Input() childForm: FormGroup;\r\n  @Output() saveFunction: EventEmitter<any> = new EventEmitter();\r\n  @Output() validateFunction: EventEmitter<any> = new EventEmitter();\r\n  @Output() updateFunction: EventEmitter<any> = new EventEmitter();\r\n  @Output() deleteFunction: EventEmitter<any> = new EventEmitter();\r\n  @Output() cancelFunction: EventEmitter<any> = new EventEmitter();\r\n  @Output() closeModalFunction: EventEmitter<any> = new EventEmitter();\r\n  @Output() approveFunction: EventEmitter<any> = new EventEmitter();\r\n  @Output() rejectFunction: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Input() isHideSaveButton = false;\r\n  @Input() isShowApproveDisapproveButton = false;\r\n  isHideDeleteButton = false;\r\n  isHideUpdateButton = false;\r\n  isShowValidateButton = false;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    // hides the save button if class of childObject is email notification\r\n    this.isHideSaveButton = this.childObject instanceof EmailNotification\r\n      || this.childObject instanceof UploadingDocumentFileSize\r\n      || this.childObject instanceof QrAndBarCodeChecker\r\n      || this.childObject instanceof NumberOfMultipleApplicationAllowed\r\n      || this.childObject instanceof AscRateSpecial;\r\n    this.isHideUpdateButton = this.childObject instanceof LoginImage;\r\n    this.isHideDeleteButton = this.childObject instanceof Category\r\n      || this.childObject instanceof Product\r\n      || this.childObject instanceof Brand\r\n      || this.childObject instanceof BrandPenalties\r\n      || this.childObject instanceof CompanyPenalties\r\n      || this.childObject instanceof Affiliation\r\n      || this.childObject instanceof TypeOfMedium\r\n      || this.childObject instanceof TypeOfMediumExecution\r\n      || this.childObject instanceof MediumExecutionController\r\n      || this.childObject instanceof TypeOfReason\r\n      || this.childObject instanceof TypeOfDocument\r\n      || this.childObject instanceof PaymentType\r\n      || this.childObject instanceof Holiday\r\n      || this.childObject instanceof Dialect\r\n      || this.childObject instanceof ScreenerReviewerPair\r\n      || this.childObject instanceof EmailNotification\r\n      || this.childObject instanceof TypeOfMainDocument\r\n      || this.childObject instanceof Announcement\r\n      || this.childObject instanceof S1AndS2FormExpirationPeriod\r\n      || this.childObject instanceof PromissoryNotePeriod\r\n      || this.childObject instanceof AscRate\r\n      || this.childObject instanceof TypeOfApplication\r\n      || this.childObject instanceof TypeOfRational\r\n      || this.childObject instanceof LoginImage;\r\n    this.isShowValidateButton = this.childObject instanceof QrAndBarCodeChecker;\r\n  }\r\n\r\n  save() {\r\n    this.saveFunction.emit(this.childObject);\r\n  }\r\n\r\n  validate() {\r\n    this.validateFunction.emit(this.childObject);\r\n  }\r\n\r\n  update() {\r\n    this.updateFunction.emit(this.childObject);\r\n  }\r\n\r\n  delete() {\r\n    this.deleteFunction.emit(this.childObject);\r\n  }\r\n\r\n  approve() {\r\n    this.approveFunction.emit();\r\n  }\r\n\r\n  reject() {\r\n    this.rejectFunction.emit();\r\n  }\r\n\r\n  closeModal() {\r\n    this.closeModalFunction.emit();\r\n  }\r\n\r\n  resetFormValidator() {\r\n    this.cancelFunction.emit();\r\n  }\r\n\r\n}\r\n\r\ninterface ChildObject {\r\n  id: number;\r\n  reason: string;\r\n  typeOfMedium: string;\r\n  paymentDescription: string;\r\n  description: string;\r\n  fileSize: number;\r\n  clearingReleaseTime: string;\r\n  decisionReleaseTime: string;\r\n  sequenceNo: number;\r\n  status: string;\r\n  submissionEndTime: string;\r\n  submissionStartTime: string;\r\n}\r\n","export class LoginImage {\r\n    id: number;\r\n    file: File;\r\n    filename: String;\r\n    fileExtension: String;\r\n    fileURL: String;\r\n    documentFormat: String;\r\n    displayed: Boolean;\r\n    createdDate: Date;\r\n    createdBy: String;\r\n    modifiedBy: String;\r\n    modifiedDate: String;\r\n    originalFilename: String;\r\n    secondsTransition: Number;\r\n}","export default \"<div class=\\\"container-fluid\\\">\\r\\n    <h1><span class=\\\"material-icons\\\" >report_problem</span> Reasons for rejection</h1>\\r\\n    <hr>\\r\\n    <div class=\\\"row\\\">\\r\\n      <mat-label *ngIf=\\\"errMsg\\\" class=\\\"errMsg\\\">{{errMsg}}</mat-label>\\r\\n        <mat-form-field class=\\\"col-md-12\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Select Reason:</mat-label>\\r\\n                <mat-select #selectReason (selectionChange)=\\\"selectedReason($event.value)\\\">\\r\\n                    <mat-option *ngFor=\\\"let i of typeOfReasonList\\\" [value]=\\\"i\\\">\\r\\n                        {{i.reason}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row \\\">\\r\\n        <th >Selected Reasons:</th>\\r\\n        <div class=\\\"col list-content\\\" >\\r\\n\\r\\n            <table *ngFor=\\\"let i of selectedReasonList\\\">\\r\\n                <tr>\\r\\n                    <td class=\\\"reason-description\\\">\\r\\n                        <span class=\\\"material-icons\\\" >label_important</span> {{i.reason}}\\r\\n                    </td>\\r\\n                    <td>\\r\\n                        <!-- <button  (click)=\\\"removeReason(i.id)\\\">x</button> -->\\r\\n                        <span class=\\\"material-icons\\\" (click)=\\\"removeReason(i.id)\\\">delete</span>\\r\\n\\r\\n                    </td>\\r\\n                </tr>\\r\\n            </table>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"checkOthersReason()\\\">\\r\\n        <mat-form-field class=\\\"col-md-12\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>REMARKS</mat-label>\\r\\n            <!-- <textarea matInput [value]=\\\"payment?.remarks\\\" [readonly]=\\\"!isForPayment\\\"></textarea> -->\\r\\n            <textarea matInput name=\\\"remarks\\\" [(ngModel)]=\\\"remarks\\\"\\r\\n              ></textarea>\\r\\n          </mat-form-field>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row button-content\\\">\\r\\n        <div class=\\\"col\\\">\\r\\n\\r\\n            <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"submitRejectionDisapproved()\\\"\\r\\n            [disabled]=\\\"selectedReasonList.length === 0\\\">\\r\\n                <i class=\\\"material-icons color__white\\\">verified</i> Submit Rejection\\r\\n            </button>\\r\\n        </div>\\r\\n        <div class=\\\"col\\\">\\r\\n            <button class=\\\"col-md-6\\\" mat-raised-button class=\\\"button-red\\\" (click)=\\\"cancel()\\\">\\r\\n                <i class=\\\"material-icons color__white\\\">cancel</i> Cancel\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\";","export default \".cancel {\\n  color: gray !important;\\n  text-align: center;\\n}\\n\\nspan {\\n  color: #ad0000;\\n}\\n\\n.action-items {\\n  width: 120px;\\n  text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9mcmFnbWVudHMvZm9ybS1saXN0L2Zvcm0tbGlzdC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHNCQUFBO0VBQ0Esa0JBQUE7QUFDRjs7QUFFQTtFQUNFLGNBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7RUFDQSxrQkFBQTtBQUNGIiwiZmlsZSI6InNyYy9hcHAvbW9kdWxlcy9mcmFnbWVudHMvZm9ybS1saXN0L2Zvcm0tbGlzdC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jYW5jZWx7XHJcbiAgY29sb3I6IGdyYXkgIWltcG9ydGFudDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbnNwYW57XHJcbiAgY29sb3I6IHJnYigxNzMsIDAsIDApO1xyXG59XHJcblxyXG4uYWN0aW9uLWl0ZW1zIHtcclxuICB3aWR0aDogMTIwcHg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcbiJdfQ== */\";","import { TypeOfExecution } from './type-of-execution.model';\r\nimport { TypeOfMedium } from './type-of-medium.model';\r\n\r\nexport class AscRate {\r\n    id: number;\r\n    lengthFrom: number;\r\n    lengthTo: number;\r\n    memberOffline: number;\r\n    memberOnline: number;\r\n    nonMemberOffline: number;\r\n    nonMemberOnline: number;\r\n    status: string;\r\n    typeOfExecution: TypeOfExecution;\r\n    typeOfMedium: TypeOfMedium;\r\n}","import { Dialect } from './dialect.model';\r\nimport { MediumExecution } from './medium-execution.model';\r\n\r\nexport class ApplicationSingleMedia {\r\n    id: number;\r\n    amount: number;\r\n    appFormReference: string;\r\n    dialect: Dialect;\r\n    language: string;\r\n    others: string;\r\n    sizeLength: string;\r\n    mediumExecution: MediumExecution;\r\n    width: string;\r\n\r\n}\r\n","export class TypeOfMediumExecution {\r\n    id: number;\r\n    status: string;\r\n    typeOfExecution: string;\r\n    applyForS2: boolean;\r\n}\r\n","export default \"<div class=\\\"mat-elevation-z8\\\">\\r\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"emailCode\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Email Code </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.emailCode }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"subject\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Subject </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.subject }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"category\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Category </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.category?.description }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"typeOfMainDocument\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Type Of Main Document </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.typeOfMainDocument }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"typeOfMainDocumentObject\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Type Of Main Document </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{\\r\\n        element?.typeOfMainDocument?.typeOfMainDocument }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"noOfHours\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Number Of Hours </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.noOfHours }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"noOfDays\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Number Of Days </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.noOfDays }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"noOfWorkingDays\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Number Of Working Days </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.noOfWorkingDays }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"typeOfMedium\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Type of Medium </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.typeOfMedium }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"typeOfMediumObj\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Type of Medium </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.typeOfMedium?.description }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"reason\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Reason </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.reason }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"description\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Description </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.description }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"body\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Body </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        <div [innerHTML]=\\\"element?.body\\\"></div>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"dialect\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Dialect </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.dialect }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"applicationType\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Application Type </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.applicationType }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"lengthFrom\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Length From </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.lengthFrom }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"lengthTo\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Length To </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.lengthTo }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"memberOffline\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Member Offline </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.memberOffline }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"memberOnline\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Member Online </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.memberOnline }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"nonMemberOffline\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Non Member Offline </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.nonMemberOffline }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"nonMemberOnline\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Non Member Online </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.nonMemberOnline }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"screenerName\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Screener Name </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.screener?.firstName }} {{ element?.screener?.lastName }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"reviewerName\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Reviewer Name </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.reviewer?.firstName }} {{ element?.reviewer?.lastName }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"holidayName\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Holiday Name </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.holidayName }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"holidayDate\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Holiday Date </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.holidayDate |\\r\\n        date:'MM/dd/yyyy' }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"holidayType\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Holiday Type </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.holidayType?.replaceAll('_','\\r\\n        ') }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"typeOfExecution\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Type Of Execution </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.typeOfExecution }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"typeOfExecutionObj\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Type Of Execution </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{\\r\\n        element?.typeOfExecution?.typeOfExecution }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"live\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> LIVE </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        <i *ngIf=\\\"element?.supportingAttachmentReference\\\" class=\\\"material-icons\\\">check_circle</i>\\r\\n        <i *ngIf=\\\"!element?.supportingAttachmentReference\\\" class=\\\"material-icons cancel\\\">cancel</i>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"landingPage\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Landing Page </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        <i *ngIf=\\\"element?.supportingAttachmentReference\\\" class=\\\"material-icons\\\">check_circle</i>\\r\\n        <i *ngIf=\\\"!element?.supportingAttachmentReference\\\" class=\\\"material-icons cancel\\\">cancel</i>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"applyForS2\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Apply for S2 </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        <i *ngIf=\\\"!element?.live\\\" class=\\\"material-icons\\\">check_circle</i>\\r\\n        <i *ngIf=\\\"element?.live\\\" class=\\\"material-icons cancel\\\">cancel</i>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"applyForTOA\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Apply for TOA </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        <i *ngIf=\\\"element?.applyForToa\\\" class=\\\"material-icons\\\">check_circle</i>\\r\\n        <i *ngIf=\\\"!element?.applyForToa\\\" class=\\\"material-icons cancel\\\">cancel</i>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"paymentDescription\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Payment Description </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.paymentDescription }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"categoryDescription\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Category </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.description }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"product\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Product </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.product?.description }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"productDescription\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Product </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.description }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"brand\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Brand </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.brand?.description }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"title\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Title </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.title }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"details\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Details </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.details }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"noOfView\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Number Of Views </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.noOfView }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"minimum\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Minimum </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.minimum }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"maximum\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Maximum </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.maximum }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"postingDate\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Posting Date </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.postingDate |\\r\\n        date:'MM/dd/yyyy' }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"s1ExpNoOfYears\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> S1 Expiration No Of Years </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.s1ExpNoOfYears }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"s2ExpNoOfYears\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> S2 Expiration No Of Years </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"> {{ element?.s2ExpNoOfYears }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"referenceCode\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Reference Code </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        <span *ngIf=\\\"element?.referenceCode\\\">\\r\\n          {{ element?.referenceCode }}\\r\\n        </span>\\r\\n        <span *ngIf=\\\"element?.applicationForm?.referenceCode\\\">\\r\\n          {{ element?.applicationForm?.referenceCode }}\\r\\n        </span>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"adTitle\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> AD Title </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        <span *ngIf=\\\"element?.adTitle\\\">\\r\\n          {{ element?.adTitle }}\\r\\n        </span>\\r\\n        <span *ngIf=\\\"element?.applicationForm?.adTitle\\\">\\r\\n          {{ element?.applicationForm?.adTitle }}\\r\\n        </span>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"assignedAdSpecialist\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> AD Specialist </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        <span *ngIf=\\\"element?.assignedAdSpecialist\\\">\\r\\n          {{ element?.assignedAdSpecialist?.firstName }} {{ element?.assignedAdSpecialist?.lastName }}\\r\\n        </span>\\r\\n        <!-- <span *ngIf=\\\"element?.applicationForm?.assignedAdSpecialist\\\">\\r\\n         {{element?.applicationForm?.assignedAdSpecialist?.firstName }}  {{ element?.applicationForm?.assignedAdSpecialist?.lastName }}\\r\\n        </span> -->\\r\\n        <span *ngIf=\\\"!element?.assignedAdSpecialist\\\">\\r\\n          N/A\\r\\n        </span>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"assignedEncoder\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Evaluator </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        <span *ngIf=\\\"element?.assignedEncoder\\\">\\r\\n          {{ element?.assignedEncoder?.firstName }} {{ element?.assignedEncoder?.lastName }}\\r\\n        </span>\\r\\n        <!-- <span *ngIf=\\\"element?.applicationForm?.assignedEncoder\\\">\\r\\n          {{element?.applicationForm?.assignedEncoder?.firstName }} {{ element?.applicationForm?.assignedEncoder?.lastName }}\\r\\n        </span> -->\\r\\n        <span *ngIf=\\\"!element?.assignedEncoder && !element?.applicationForm?.assignedEncoder\\\">\\r\\n          N/A\\r\\n        </span>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"assignedReviewer\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Reviewer </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        <span *ngIf=\\\"element?.assignedReviewer\\\">\\r\\n          {{ element?.assignedReviewer?.firstName }} {{ element?.assignedReviewer?.lastName }}\\r\\n        </span>\\r\\n        <!-- <span *ngIf=\\\"element?.applicationForm?.assignedReviewer\\\">\\r\\n          {{element?.applicationForm?.assignedReviewer?.firstName }} {{ element?.applicationForm?.assignedReviewer?.lastName }}\\r\\n        </span> -->\\r\\n        <span *ngIf=\\\"!element?.assignedReviewer\\\">\\r\\n          N/A\\r\\n        </span>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"assignedScreener\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Screener </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        <span *ngIf=\\\"element?.assignedScreener\\\">\\r\\n          {{ element?.assignedScreener?.firstName }} {{ element?.assignedScreener?.lastName }}\\r\\n        </span>\\r\\n        <!-- <span *ngIf=\\\"element?.applicationForm?.assignedScreener\\\">\\r\\n          {{element?.applicationForm?.assignedScreener?.firstName }} {{ element?.applicationForm?.assignedScreener?.lastName }}\\r\\n        </span> -->\\r\\n        <span *ngIf=\\\"!element?.assignedScreener\\\">\\r\\n          N/A\\r\\n        </span>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"assignedUser\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Current Assigned User </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        <span *ngIf=\\\"element?.assignedUser\\\">\\r\\n          {{ element?.assignedUser?.firstName }} {{ element?.assignedUser?.lastName }}\\r\\n        </span>\\r\\n        <!-- <span *ngIf=\\\"element?.applicationForm?.assignedUser\\\">\\r\\n          {{ element?.applicationForm?.assignedUser?.firstName }} {{ element?.applicationForm?.assignedUser?.lastName }}\\r\\n        </span> -->\\r\\n        <span *ngIf=\\\"!element?.assignedUser\\\">\\r\\n          N/A\\r\\n        </span>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"applicationOwner\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Application Owner </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        <span *ngIf=\\\"element?.applicationOwner\\\">\\r\\n          {{ element?.applicationOwner?.firstName }} {{ element?.applicationOwner?.lastName }}\\r\\n        </span>\\r\\n        <span *ngIf=\\\"element?.applicationForm?.applicationOwner\\\">\\r\\n          {{element?.applicationForm?.applicationOwner?.firstName }}\\r\\n          {{element?.applicationForm?.applicationOwner?.lastName }}\\r\\n        </span>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"lastModifiedBy\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Last Modified By </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.modifiedBy ? element?.modifiedBy : element?.createdBy }} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"lastModifiedDate\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Last Modified Date </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.modifiedDate ? (element?.modifiedDate | date:'MM/dd/yyyy hh:mm a') : (element?.createdDate |\\r\\n        date:'MM/dd/yyyy hh:mm a') }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"affiliationDesc\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Member's Affiliation </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.description }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"member\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Member </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.member ? 'Yes' : 'No' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"brandDesc\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Brand </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.description }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"penalty\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Penalty </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.penalty ? 'Yes' : 'No' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"typeOfDocumentDesc\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Type of Document </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.description }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"dateOfLaunchEnable\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Has Date Of Launch </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.dateOfLaunchEnable ? 'Yes' : 'No' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"expiresOnEnable\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Has Expiration Date </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.expiresOnEnable ? 'Yes' : 'No' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"basedOnEnable\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Has Basis </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.basedOnEnable ? 'Yes' : 'No' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"variantEnable\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Has Variant </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.variantEnable ? 'Yes' : 'No' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"remarksEnable\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Has Remarks </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.remarksEnable ? 'Yes' : 'No' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"inputEnable\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Has Input </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.inputEnable ? 'Yes' : 'No' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"amount\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Has Amount </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.amount ? 'Yes' : 'No' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"bankBranch\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Has Bank Branch </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.bankBranch ? 'Yes' : 'No' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"bankName\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Has Bank Name </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.bankName ? 'Yes' : 'No' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"controlNo\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Has Control No </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.controlNo ? 'Yes' : 'No' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"fundTransferDate\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Has Fund Transfer Date </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.fundTransferDate ? 'Yes' : 'No' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"promisorryDate\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Has Promisorry Date </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.promisorryDate ? 'Yes' : 'No' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"referenceNo\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Has Reference No </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.referenceNo ? 'Yes' : 'No' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"enabledFields\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Enabled Fields </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.enabledFields }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"status\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Status </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.status?.replaceAll('_', ' ') }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- FOR BRAND PENALTIES -->\\r\\n    <ng-container matColumnDef=\\\"brandDescription\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Brand </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.brand?.description }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"brandPenaltyAmount\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Amount </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.amount | number : '1.2-2' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"penaltyDate\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Penalty Date </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.penaltyDate | date:'fullDate'}}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n    <!-- FOR BRAND PENALTIES -->\\r\\n\\r\\n    <!-- FOR COMPANY PENALTIES -->\\r\\n    <ng-container matColumnDef=\\\"companyDescription\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Company </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\"\\r\\n        [ngStyle]=\\\"{'background-color': element?.status === 'ACTIVE' ? 'white' : '#ffbebe' }\\\">\\r\\n        {{ element?.company?.companyName }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"companyPenaltyAmount\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Penalty Amount </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.penaltyAmount | number : '1.2-2' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- FOR UPLOADING FILE SIZE -->\\r\\n    <ng-container matColumnDef=\\\"id\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Document Id </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element.id }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"size\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Document size </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element.fileSize }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- FOR TYPE OF APPLICATION -->\\r\\n\\r\\n    <ng-container matColumnDef=\\\"clearingReleaseTime\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Clearing Release Time </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element.clearingReleaseTime }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"decisionReleaseTime\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Decision Release Time </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element.decisionReleaseTime }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"submissionStartTime\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Submission Start Time </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element.submissionStartTime }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"submissionEndTime\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Submission End Time </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element.submissionEndTime }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- FOR TYPE OF RATIONAL -->\\r\\n\\r\\n    <ng-container matColumnDef=\\\"rationale\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Rationale </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\" style=\\\"width: 78%;\\\">\\r\\n        {{ element.rationale }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"rationaleCategory\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Rationale Category </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element.rationaleCategory.replaceAll('_',' ') | uppercase }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n\\r\\n    <ng-container matColumnDef=\\\"firstName\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Firstname </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element.firstName }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"lastName\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Lastname </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element.lastName }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"mobileNumber\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Mobile Number </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.mobileNumber }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"emailAddress\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Email Address </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.username }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"userRole\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Role </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.userRole?.name?.replaceAll('ROLE_', '')?.replace('_', ' ')?.replace('ENCODER', 'EVALUATOR') }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"typeOfMediumController\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Type of Medium </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.typeOfMedium?.description }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"typeOfExecutionController\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Type of Execution </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.typeOfExecution?.typeOfExecution }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- FOR VOUCHER ENROLLMENT -->\\r\\n\\r\\n    <ng-container matColumnDef=\\\"company\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Company </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.company?.companyName }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"fundAmount\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Fund Amount </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.fundAmount | number : '1.2-2' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"voucherDate\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Voucher Date</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.voucherDate | date: 'shortDate'}}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n    <!-- <ng-container matColumnDef=\\\"action\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> action </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n        <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"viewHistory(element)\\\">\\r\\n          View History\\r\\n        </button>\\r\\n      </td>\\r\\n    </ng-container> -->\\r\\n\\r\\n\\r\\n    <!-- <ng-container matColumnDef=\\\"voucherSignatories\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef> Signatories Name </th>\\r\\n        <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n          {{ element?.voucherSignatories.name}}\\r\\n        </td>\\r\\n      </ng-container> -->\\r\\n\\r\\n    <!-- FOR VOUCHER SIGNATORIES -->\\r\\n\\r\\n    <ng-container matColumnDef=\\\"name\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Signatories Name </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.name}}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"position\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Position</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.position}}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- FOR VOUCHER FUND TRANSFER -->\\r\\n    <ng-container matColumnDef=\\\"amountTransfered\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Amount Transferred </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.amountTransfered | number : '1.2-2'}}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"transferedDate\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Transferred Date</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.transferedDate | date: 'shortDate' }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"officialReceiptNo\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Official Receipt No</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.officialReceiptNo }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"typeOfMediumDescription\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Type Of Medium</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.typeOfMedium?.description }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"officialReceiptReferences\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Official Receipt No References</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.officialReceiptReferencesValue }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- Image login -->\\r\\n    <ng-container matColumnDef=\\\"file\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> File</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.file }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"fileName\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> File name</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.fileName }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"fileExtension\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> File Extension</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.fileExtension }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"documentFormat\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Document Format</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.documentFormat }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"displayed\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Display Status</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.displayed }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"fileURL\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> File URL</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.fileURL }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"originalFilename\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Original Filename</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.originalFilename }}\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n\\r\\n\\r\\n    <!-- Image login -->\\r\\n\\r\\n\\r\\n    <!-- <ng-container matColumnDef=\\\"companyPenaltyDate\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Penalty Date </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"getObject(element?.id)\\\">\\r\\n        {{ element?.penaltyDate | date:'fullDate'}}\\r\\n      </td>\\r\\n    </ng-container> -->\\r\\n    <!-- FOR COMPANY PENALTIES -->\\r\\n\\r\\n    <!-- DELETE ICON -->\\r\\n    <ng-container matColumnDef=\\\"deleteIcon\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Action </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"deleteObject(element?.id, element)\\\" matTooltip=\\\"Cancel OR\\\">\\r\\n        <span class=\\\"material-icons\\\">delete_forever</span>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n    <!-- DELETE ICON -->\\r\\n    <ng-container matColumnDef=\\\"voucherActionItems\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef class=\\\"action-items\\\"> Action </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"action-items\\\">\\r\\n        <span class=\\\"material-icons\\\" tooltip=\\\"Edit\\\" (click)=\\\"openEditModal(element?.id, element)\\\">edit</span>\\r\\n        <span class=\\\"material-icons\\\" tooltip=\\\"Delete\\\" (click)=\\\"deleteObject(element?.id, element)\\\">delete_forever</span>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n  </table>\\r\\n  <div class=\\\"no-record\\\" [hidden]=\\\"dataSource && dataSource?.data?.length > 0\\\">\\r\\n    No record found.\\r\\n  </div>\\r\\n  <mat-paginator [pageSizeOptions]=\\\"[10, 20, 30]\\\" showFirstLastButtons></mat-paginator>\\r\\n</div>\\r\\n\\r\\n<ng-template #signatoryEdit>\\r\\n  <h1 mat-dialog-title>Edit Signatories</h1>\\r\\n  <div mat-dialog-content>\\r\\n    <mat-form-field appearance=\\\"fill\\\" class=\\\"w-100\\\">\\r\\n      <mat-label>Signatory Name</mat-label>\\r\\n      <input matInput [(ngModel)]=\\\"signatory.name\\\">\\r\\n    </mat-form-field>\\r\\n    <mat-form-field appearance=\\\"fill\\\" class=\\\"w-100\\\">\\r\\n      <mat-label>Position</mat-label>\\r\\n      <input matInput [(ngModel)]=\\\"signatory.position\\\">\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n  <div mat-dialog-actions class=\\\"justify-content-center\\\">\\r\\n    <button mat-button (click)=\\\"closeModal()\\\">Cancel</button>\\r\\n    <button mat-button class=\\\"mat-raised-button button-red\\\" [disabled]=\\\"!signatory.name || !signatory.position\\\" (click)=\\\"updateObject()\\\">Save</button>\\r\\n  </div>\\r\\n</ng-template>\";","export default \"mat-panel-title {\\n  background-color: #b90000;\\n  margin: 20px 0px;\\n  color: white;\\n  padding: 10px;\\n  font-weight: 600;\\n}\\n\\n/* table for status display */\\n\\ntable tr td {\\n  padding: 10px 16px;\\n  border-radius: 7px;\\n  font: 500 14px/20px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  width: 31%;\\n}\\n\\ntable tr td:nth-child(odd) {\\n  background-color: #ff5252;\\n  color: white;\\n  border: 1px solid white;\\n}\\n\\ntable tr td:nth-child(even) {\\n  color: #ff5252;\\n  border: 1px solid #0000001f;\\n}\\n\\n.no-border {\\n  background-color: transparent !important;\\n  border: 0px !important;\\n  padding: 0px !important;\\n  width: 5px;\\n  height: 5px !important;\\n}\\n\\n.dialog-button-content {\\n  vertical-align: bottom;\\n  text-align: center;\\n}\\n\\n.dialog-button-content button {\\n  color: white;\\n  border: none;\\n  padding: 5px 10px 5px 5px;\\n  margin: 0px 5px;\\n  font-weight: 500;\\n  border-radius: 5px;\\n}\\n\\n.dialog-button-content .warn {\\n  background-color: red;\\n}\\n\\n.dialog-button-content .caution {\\n  background-color: #dfd000;\\n  color: black;\\n}\\n\\n.dialog-button-content .confirm {\\n  background-color: #449bff;\\n}\\n\\ntable {\\n  width: 100%;\\n}\\n\\n.button-right {\\n  text-align: right;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9mcmFnbWVudHMvcmVxdWVzdC1mb3Itc3BlY2lhbC1jbGVhcmluZy9yZXF1ZXN0LWZvci1zcGVjaWFsLWNsZWFyaW5nLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0kseUJBQUE7RUFDQSxnQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsZ0JBQUE7QUFDSjs7QUFHQSw2QkFBQTs7QUFFRTtFQUNJLGtCQUFBO0VBQ0Esa0JBQUE7RUFDQSx3REFBQTtFQUNBLFVBQUE7QUFETjs7QUFJRTtFQUNJLHlCQUFBO0VBQ0EsWUFBQTtFQUNBLHVCQUFBO0FBRk47O0FBS0U7RUFDSSxjQUFBO0VBQ0EsMkJBQUE7QUFITjs7QUFPQTtFQUNFLHdDQUFBO0VBQ0Esc0JBQUE7RUFDQSx1QkFBQTtFQUNBLFVBQUE7RUFDQSxzQkFBQTtBQUpGOztBQVFBO0VBQ0Usc0JBQUE7RUFDQSxrQkFBQTtBQUxGOztBQU9FO0VBQ0ksWUFBQTtFQUNBLFlBQUE7RUFDQSx5QkFBQTtFQUNBLGVBQUE7RUFDQSxnQkFBQTtFQUNBLGtCQUFBO0FBTE47O0FBUUU7RUFDSSxxQkFBQTtBQU5OOztBQVNFO0VBQ0kseUJBQUE7RUFDQSxZQUFBO0FBUE47O0FBVUU7RUFDSSx5QkFBQTtBQVJOOztBQVlBO0VBQ0UsV0FBQTtBQVRGOztBQVlBO0VBQ0UsaUJBQUE7QUFURiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvZnJhZ21lbnRzL3JlcXVlc3QtZm9yLXNwZWNpYWwtY2xlYXJpbmcvcmVxdWVzdC1mb3Itc3BlY2lhbC1jbGVhcmluZy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIm1hdC1wYW5lbC10aXRsZXtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxODUsIDAsIDApO1xyXG4gICAgbWFyZ2luOiAyMHB4IDBweDtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG59XHJcblxyXG5cclxuLyogdGFibGUgZm9yIHN0YXR1cyBkaXNwbGF5ICovXHJcbnRhYmxlIHRyIHtcclxuICB0ZCB7XHJcbiAgICAgIHBhZGRpbmc6IDEwcHggMTZweDtcclxuICAgICAgYm9yZGVyLXJhZGl1czogN3B4O1xyXG4gICAgICBmb250OiA1MDAgMTRweC8yMHB4IFJvYm90bywgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBzYW5zLXNlcmlmO1xyXG4gICAgICB3aWR0aDogMzElO1xyXG4gIH1cclxuXHJcbiAgdGQ6bnRoLWNoaWxkKG9kZCkge1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY1MjUyO1xyXG4gICAgICBjb2xvcjogd2hpdGU7XHJcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlO1xyXG4gIH1cclxuXHJcbiAgdGQ6bnRoLWNoaWxkKGV2ZW4pIHtcclxuICAgICAgY29sb3I6ICNmZjUyNTI7XHJcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMDAwMDAxZjtcclxuICB9XHJcbn1cclxuXHJcbi5uby1ib3JkZXIge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XHJcbiAgYm9yZGVyOiAwcHggIWltcG9ydGFudDtcclxuICBwYWRkaW5nOiAwcHggIWltcG9ydGFudDtcclxuICB3aWR0aDogNXB4O1xyXG4gIGhlaWdodDogNXB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi8vIGJ1dHRvblxyXG4uZGlhbG9nLWJ1dHRvbi1jb250ZW50IHtcclxuICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuXHJcbiAgYnV0dG9uIHtcclxuICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgICBib3JkZXI6IG5vbmU7XHJcbiAgICAgIHBhZGRpbmc6IDVweCAxMHB4IDVweCA1cHg7XHJcbiAgICAgIG1hcmdpbjogMHB4IDVweDtcclxuICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIH1cclxuXHJcbiAgLndhcm4ge1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XHJcbiAgfVxyXG5cclxuICAuY2F1dGlvbiB7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMjMsIDIwOCwgMCk7XHJcbiAgICAgIGNvbG9yOiByZ2IoMCwgMCwgMCk7XHJcbiAgfVxyXG5cclxuICAuY29uZmlybSB7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig2OCwgMTU1LCAyNTUpO1xyXG4gIH1cclxufVxyXG5cclxudGFibGUge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG4uYnV0dG9uLXJpZ2h0e1xyXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xyXG59XHJcbiJdfQ== */\";","import { Company } from '@models'\r\nimport { Affiliation } from './affiliation.model';\r\nimport { ApplicationType } from './application-type.model'\r\nimport { Brand } from './brand.model'\r\nimport { Category } from './category.model';\r\nimport { Product } from './product.model';\r\nimport { S1Application } from './s1-application.model';\r\nimport { UserAccount } from './user-account.model'\r\n\r\nexport class ApplicationRequest {\r\n    id: number;\r\n    adTitle: string;\r\n    applicationOwner: UserAccount;\r\n    applicationType: ApplicationType;\r\n    brand: Brand;\r\n    company: Company;\r\n    status: string;\r\n    submissionDate: Date;\r\n    tagLine: string\r\n    submitApplicationForm: boolean;\r\n    formType: string;\r\n    hasSpecialClearing: boolean;\r\n    applicationForm: S1Application;\r\n    product: Product;\r\n}\r\n","export class Profile {\r\n    id: number;\r\n    name: string;\r\n}\r\n","export class UploadingDocumentFileSize {\r\n    id: number;\r\n    fileSize: number;\r\n}","import { S1Application } from './s1-application.model';\r\nimport { S2Application } from './s2-application.model';\r\n\r\nexport class AttachmentDocument {\r\n    id: number;\r\n    applicationId: S1Application;\r\n    applicationS2Id: S2Application;\r\n    attachmentType: string; // MAIN, SUPPORTIVE, PAYMENT\r\n    autoSubmit: boolean;\r\n    brandPenaltyAttachmentReference: string;\r\n    documentFormat: string;\r\n    fileExtension: string;\r\n    fileURL: string;\r\n    filename: string;\r\n    mainAttachmentReference: string;\r\n    supportingAttachmentReference: string;\r\n    paymentAttachmentReference: string;\r\n    revisionLetterAttachmentReference: string;\r\n    finalMaterialAttachmentReference: string;\r\n    originalFilename: string;\r\n    status: string;\r\n    submissionType: string; // ORIGINAL, REVISION, COMPLIANCE, TOA\r\n    voucherAttachmentReference: string;\r\n    applicationFormId: string; // for compliance used only\r\n    applicationForm: string;\r\n    appFormReference: string;\r\n    modifiedApprovedS1AttachmentReference: string;\r\n    fileSize: number\r\n\r\n    createdBy: string;\r\n    createdDate: Date;\r\n    modifiedBy: string;\r\n    modifiedDate: Date;\r\n}\r\n","export class Announcement {\r\n  id: number;\r\n  details: string;\r\n  noOfView: number;\r\n  postingDate: Date;\r\n  status: string;\r\n  title: string;\r\n  link: string;\r\n  counter: number;\r\n}\r\n","export default \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-md-12\\\">\\r\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"save()\\\" *ngIf=\\\"!childObject?.id && !isHideSaveButton\\\"\\r\\n      [disabled]=\\\"!(childForm.valid)\\\">\\r\\n      <!-- <mat-icon>save</mat-icon> SAVE -->\\r\\n      <i class=\\\"material-icons color__white\\\">save</i> SAVE\\r\\n    </button>\\r\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"validate()\\\" *ngIf=\\\"!childObject?.id && isShowValidateButton\\\"\\r\\n      [disabled]=\\\"!(childForm.valid)\\\">\\r\\n      <!-- <mat-icon>save</mat-icon> SAVE -->\\r\\n      <i class=\\\"material-icons color__white\\\">search</i> VALIDATE\\r\\n    </button>\\r\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"update()\\\" *ngIf=\\\"childObject?.id && !isHideUpdateButton\\\"\\r\\n      [disabled]=\\\"!(childForm.valid)\\\">\\r\\n      <!-- <mat-icon> </mat-icon>  -->\\r\\n      <i class=\\\"material-icons color__white\\\">task_alt</i> UPDATE\\r\\n    </button>\\r\\n    <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"delete()\\\" *ngIf=\\\"childObject?.id\\\" [hidden]=\\\"!isHideDeleteButton\\\"\\r\\n      [disabled]=\\\"!(childForm.valid)\\\">\\r\\n      <!-- <mat-icon> </mat-icon>  -->\\r\\n      <i class=\\\"material-icons color__white\\\">delete</i> DELETE\\r\\n    </button>\\r\\n    <button mat-raised-button color=\\\"warn\\\" (click)=\\\"resetFormValidator()\\\"\\r\\n      *ngIf=\\\"(childObject?.id || childObject?.description || childObject?.paymentDescription || childObject?.typeOfMedium || childObject?.reason) && !isFromModal\\\">\\r\\n      <!-- <mat-icon>{{ childObject?.id ? 'cancel' : 'refresh' }}</mat-icon> {{ childObject?.id ? 'CANCEL' : 'RESET' }} -->\\r\\n      <i class=\\\"material-icons color__white\\\"> {{ childObject?.id ? 'cancel' : 'refresh' }}</i> {{ childObject?.id ? 'CANCEL' : 'RESET' }}\\r\\n    </button>\\r\\n    <ng-container *ngIf=\\\"(isFromModal && showApproveRejectButton) || isShowApproveDisapproveButton\\\">\\r\\n      <!-- <ng-container *ngIf=\\\"showApproveRejectButton\\\"> -->\\r\\n      <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"approve()\\\">\\r\\n        <i class=\\\"material-icons color__white\\\">verified</i> APPROVE\\r\\n      </button>\\r\\n      <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"reject()\\\">\\r\\n        <i class=\\\"material-icons color__white\\\">unpublished</i> REJECT\\r\\n      </button>\\r\\n      <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"closeModal()\\\" *ngIf=\\\"isFromModal && showApproveRejectButton\\\">\\r\\n        <i class=\\\"material-icons color__white\\\">close</i> CLOSE\\r\\n      </button>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { Product } from './product.model';\r\n\r\nexport class Category {\r\n    id: number;\r\n    description: string;\r\n    status: string;\r\n}\r\n","import { Company } from \"./company.model\";\r\n\r\nexport class CompanyPenalties {\r\n    id: number;\r\n    penaltyAmount: number;\r\n    company: Company;\r\n    penaltyDate: Date;\r\n}","import { TypeOfDocument } from './type-of-document.model';\r\nimport { S1Application } from './s1-application.model';\r\n\r\nexport class SupportingDocument {\r\n    id: number;\r\n    appFormReference: S1Application;\r\n    typeOfDocument: TypeOfDocument;\r\n    basedOn: string;\r\n    variant: string;\r\n    dateOfLaunch: Date;\r\n    expiresOn: Date;\r\n    remarks: string;\r\n    input: string;\r\n\r\n    createdBy: string;\r\n    createdDate: Date;\r\n    modifiedBy: string;\r\n    modifiedDate: Date;\r\n}\r\n","export class UserRole {\r\n    id: number;\r\n    name: string;\r\n    status: string;\r\n}\r\n","export class PaymentType {\r\n    id: number;\r\n    amount: boolean;\r\n    bankBranch: boolean;\r\n    bankName: boolean;\r\n    controlNo: boolean;\r\n    fundTransferDate: boolean;\r\n    paymentDescription: string;\r\n    promisorryDate: boolean;\r\n    referenceNo: boolean;\r\n    status: string;\r\n}\r\n","export class OrPreparationReference {\r\n    id: number;\r\n    reference: string;\r\n    amount: number;\r\n}","export class Holiday {\r\n    id: number;\r\n    holidayDate: Date;\r\n    holidayName: string;\r\n    holidayType: string;\r\n    status: string;\r\n  }\r\n","import { Brand } from \"./brand.model\";\r\n\r\nexport class BrandPenalties {\r\n    id: number;\r\n    amount: number;\r\n    brand: Brand;\r\n    penaltyDate: Date;\r\n}","export class PerformanceMetrics {\r\n    id: number;\r\n    referenceCode: string;\r\n    appFormReference: string;\r\n    movement: string;\r\n    actionBy: string;\r\n    userRole: string;\r\n    currentDateTime: Date;\r\n    previousDateTime: Date;\r\n    duration: string;\r\n}\r\n","import { PaymentType } from \"./payment-type.model\";\r\n\r\nexport class PaymentMethod {\r\n    id: number;\r\n    paymentType: PaymentType;\r\n    referenceNo: string;\r\n    controlNo: string;\r\n    paymentDate: Date;\r\n    amount: number;\r\n    bankName: string\r\n    bankBranch: string;\r\n    promisorryDate: Date;\r\n    ccConfirmationCode: string;\r\n    checkNo: string;\r\n}\r\n","export default \"h1 {\\n  font-size: 20px;\\n  font-weight: 600;\\n}\\nh1 .material-icons {\\n  color: #ad0000;\\n}\\n.list-content {\\n  border: solid 1px #b6b6b6;\\n  border-radius: 5px;\\n  margin: 12px;\\n  min-height: 5em;\\n  max-height: 10em;\\n  overflow: auto;\\n  padding: 10px 10px;\\n}\\n.list-content .material-icons {\\n  color: #a00000;\\n  text-align: end;\\n  font-size: 20px;\\n  vertical-align: middle;\\n}\\n.list-content table {\\n  width: 100%;\\n}\\n.list-content table .reason-description {\\n  text-align: left;\\n}\\n.list-content table td {\\n  text-align: end;\\n}\\n.list-content .material-icons:hover {\\n  cursor: pointer;\\n}\\n.button-content button {\\n  width: 100%;\\n}\\n.errMsg {\\n  color: red;\\n  font-style: italic;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9mcmFnbWVudHMvcmVqZWN0LWRpc2FwcHJvdmVkLXJlYXNvbi9yZWplY3QtZGlzYXBwcm92ZWQtcmVhc29uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZUFBQTtFQUNBLGdCQUFBO0FBQ0o7QUFBSTtFQUNJLGNBQUE7QUFFUjtBQUdBO0VBQ0kseUJBQUE7RUFDQSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxlQUFBO0VBQ0EsZ0JBQUE7RUFDQSxjQUFBO0VBQ0Esa0JBQUE7QUFBSjtBQUNJO0VBQ0ksY0FBQTtFQUNBLGVBQUE7RUFDQSxlQUFBO0VBQ0Esc0JBQUE7QUFDUjtBQUVJO0VBQ0ksV0FBQTtBQUFSO0FBQ1E7RUFDSSxnQkFBQTtBQUNaO0FBQ1E7RUFDSSxlQUFBO0FBQ1o7QUFHSTtFQUNJLGVBQUE7QUFEUjtBQU1JO0VBQ0ksV0FBQTtBQUhSO0FBT0E7RUFDRSxVQUFBO0VBQ0Esa0JBQUE7QUFKRiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvZnJhZ21lbnRzL3JlamVjdC1kaXNhcHByb3ZlZC1yZWFzb24vcmVqZWN0LWRpc2FwcHJvdmVkLXJlYXNvbi5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImgxe1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgIC5tYXRlcmlhbC1pY29uc3tcclxuICAgICAgICBjb2xvcjogcmdiKDE3MywgMCwgMCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4ubGlzdC1jb250ZW50e1xyXG4gICAgYm9yZGVyOiBzb2xpZCAxcHggcmdiKDE4MiwgMTgyLCAxODIpO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgbWFyZ2luOiAxMnB4O1xyXG4gICAgbWluLWhlaWdodDogNWVtO1xyXG4gICAgbWF4LWhlaWdodDogMTBlbTtcclxuICAgIG92ZXJmbG93OiBhdXRvO1xyXG4gICAgcGFkZGluZzogMTBweCAxMHB4O1xyXG4gICAgLm1hdGVyaWFsLWljb25ze1xyXG4gICAgICAgIGNvbG9yOiByZ2IoMTYwLCAwLCAwKTtcclxuICAgICAgICB0ZXh0LWFsaWduOiBlbmQ7XHJcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgICB9XHJcblxyXG4gICAgdGFibGV7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgLnJlYXNvbi1kZXNjcmlwdGlvbntcclxuICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGR7XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGVuZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLm1hdGVyaWFsLWljb25zOmhvdmVye1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIH1cclxufVxyXG5cclxuLmJ1dHRvbi1jb250ZW50e1xyXG4gICAgYnV0dG9ue1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG59XHJcblxyXG4uZXJyTXNnIHtcclxuICBjb2xvcjogcmVkO1xyXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcclxufVxyXG4iXX0= */\";","export class QrAndBarCodeChecker {\r\n    id: number;\r\n    qrOrBarCode: string;\r\n}","export * from './affiliation.model';\r\nexport * from './brand.model';\r\nexport * from './company.model';\r\nexport * from './payment-type.model';\r\nexport * from './profile.model';\r\nexport * from './s1-application.model';\r\nexport * from './s2-application.model';\r\nexport * from './type-of-document.model';\r\nexport * from './type-of-medium.model';\r\nexport * from './type-of-reason.model';\r\nexport * from './user-role.model';\r\nexport * from './user-account.model';\r\nexport * from './attachment-document.model';\r\nexport * from './category.model';\r\nexport * from './product.model';\r\nexport * from './type-of-application.model';\r\nexport * from './asc-rate.model';\r\nexport * from './payment.model';\r\nexport * from './country.model';\r\nexport * from './performance-metrics.model';\r\nexport * from './or-preparation.model';\r\nexport * from './or-preparation-reference.model';\r\nexport * from './supporting-document.model';\r\nexport * from './application-single-media.model';\r\nexport * from './application-request.model';\r\nexport * from './application-multimedia.model';\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvZnJhZ21lbnRzL2Zvcm0tYWN0aW9uLWJ1dHRvbnMvZm9ybS1hY3Rpb24tYnV0dG9ucy5jb21wb25lbnQuc2NzcyJ9 */\";","export class Affiliation {\r\n    id: number;\r\n    description: string;\r\n    member: boolean;\r\n    status: string;\r\n}\r\n","import { Category, Product } from '@models';\r\n\r\nexport class Brand {\r\n    id: number;\r\n    description: string;\r\n    // product: Product;\r\n    // category: Category;\r\n    status: string;\r\n    penalty: boolean;\r\n  }\r\n","import { Affiliation } from './affiliation.model';\r\nimport { Country } from './country.model';\r\n\r\nexport class Company {\r\n    id: number;\r\n    companyName: string;\r\n    companyTelephoneNo: string;\r\n    companyTin: string;\r\n    country: Country;\r\n    status: string;\r\n    completeAddress: string;\r\n    voucherApproved: boolean\r\n    membersAffiliation: Affiliation;\r\n    delinquent: boolean;\r\n    contactPersonEmail: string;\r\n    contactPersonName: string;\r\n    amountToSettle: number;\r\n    companyMobileNo: string;\r\n    companyTelephoneNo2: string;\r\n}\r\n","import { TypeOfRational } from \"./type-of-rational.model\";\r\n\r\nexport class ApplicationS2RationaleList {\r\n\r\n    id: number;\r\n    typeOfRationale: TypeOfRational;\r\n\r\n}","export class S1AndS2FormExpirationPeriod {\r\n  id: number;\r\n  s1ExpNoOfYears: number;\r\n  s2ExpNoOfYears: number;\r\n}"]}