{"version":3,"sources":["webpack:///src/app/modules/pages/applications/schedule-of-fees/accounts-payable/accounts-payable.module.ts","webpack:///src/app/modules/pages/applications/schedule-of-fees/accounts-payable/accounts-payable.component.ts","webpack:///src/app/modules/pages/applications/schedule-of-fees/accounts-payable/accounts-payable.component.html","webpack:///src/app/modules/pages/applications/schedule-of-fees/accounts-payable/accounts-payable-routing.module.ts"],"names":["AccountsPayableModule","AccountsPayableComponent","apiService","spinner","dialog","displayedColumns","pageNo","pageSize","paymentTotalItems","getForPaymentList","event","pageIndex","length","res","dialogRef","open","width","height","maxHeight","data","fromPayable","afterClosed","subscribe","result","ngOnInit","show","findAll","getEndpoint","dataSource","totalItems","hide","endpoint","scheduleOfFeesMonitoring","pageEvent","routes","path","component","SingleApplicationRoutingModule","forChild"],"mappings":"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","file":"schedule-of-fees-accounts-payable-accounts-payable-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SingleApplicationRoutingModule } from './accounts-payable-routing.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AngularMaterialModule } from '@shared';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { AccountsPayableComponent } from './accounts-payable.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AccountsPayableComponent,\r\n    \r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SingleApplicationRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    AngularMaterialModule,\r\n    MatTableModule\r\n  ]\r\n})\r\nexport class AccountsPayableModule { }\r\n","import { MatDialog } from '@angular/material/dialog';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { ApiService } from '@services';\r\nimport { ENDPOINTS } from '@shared';\r\nimport { ModalSingleApplicationComponent } from '../single-application/modal-single-application/modal-single-application.component';\r\n\r\n@Component({\r\n  selector: 'app-accounts-payable',\r\n  templateUrl: './accounts-payable.component.html',\r\n  styleUrls: ['./accounts-payable.component.scss']\r\n})\r\nexport class AccountsPayableComponent implements OnInit {\r\n\r\n  dataSource: MatTableDataSource<any>\r\n  displayedColumns: string[] = ['referenceCode', 'typeOfApplication', 'brand', 'medium', 'applicantCompanyName', 'paymentStatus'];\r\n  pageNo: number = 0;\r\n  pageSize: number = 10;\r\n  paymentTotalItems: number = 0;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private spinner: NgxSpinnerService,\r\n    private dialog: MatDialog\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getForPaymentList();\r\n  }\r\n \r\n  pageEvent(event: any): void {\r\n    this.pageSize = event.pageSize;\r\n    event.pageIndex >= this.pageNo\r\n      ? this.pageNo++\r\n      : this.pageNo--;\r\n\r\n    if (event.pageSize > event.length) {\r\n      this.pageNo = 0;\r\n    }\r\n\r\n    this.getForPaymentList();\r\n  }\r\n\r\n  openModal(res) {\r\n    const dialogRef = this.dialog.open(ModalSingleApplicationComponent, {\r\n      width: '80%',\r\n      height: 'fit-content',\r\n      maxHeight: '85vh',\r\n      data: { ...res, fromPayable: true }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      this.ngOnInit();\r\n    });\r\n\r\n  }\r\n\r\n  private getForPaymentList() {\r\n    this.spinner.show();\r\n    this.apiService.findAll(this.getEndpoint())\r\n      .subscribe((res: any) => {\r\n        this.dataSource = new MatTableDataSource<any>(res.data);\r\n        this.paymentTotalItems = res.totalItems;\r\n        this.spinner.hide();\r\n      });\r\n  }\r\n\r\n  private getEndpoint(): string {\r\n    let endpoint = ENDPOINTS.scheduleOfFeesMonitoring;\r\n    return `${endpoint}?hasPromissoryNote=true&page=${this.pageNo + 1}&size=${this.pageSize}`;\r\n  }\r\n}\r\n","<form>\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 title\">\r\n        <mat-label>\r\n          <mat-icon>view_list</mat-icon> Accounts Payable\r\n        </mat-label>\r\n      </div>\r\n    </div>\r\n    <hr>\r\n    <br>\r\n\r\n    <div class=\"mat-elevation-z8 fields\">\r\n      <table mat-table [dataSource]=\"dataSource\" matSort>\r\n        <ng-container matColumnDef=\"referenceCode\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> REFERENCE CODE </th>\r\n          <td mat-cell *matCellDef=\"let element; let i = index\" (click)=\"openModal(element)\"> {{element?.referenceCode | uppercase}}</td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"typeOfApplication\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> TYPE OF APPLICATION</th>\r\n          <td mat-cell *matCellDef=\"let element; let i = index\" (click)=\"openModal(element)\">{{element?.applicationType.description | uppercase}} - {{element?.formType?.replaceAll('_',' ') | uppercase}}</td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"brand\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> BRAND</th>\r\n          <td mat-cell *matCellDef=\"let element; let i = index\" (click)=\"openModal(element)\">{{element?.brand.description | uppercase}}</td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"medium\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> MEDIUM</th>\r\n          <td mat-cell *matCellDef=\"let element; let i = index\" (click)=\"openModal(element)\">{{element?.typeOfMedium | uppercase}}</td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"applicantCompanyName\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> APPLICANT COMPANY NAME</th>\r\n          <td mat-cell *matCellDef=\"let element; let i = index\" (click)=\"openModal(element)\">{{element?.company.companyName | uppercase}}</td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"paymentStatus\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> PAYMENT STATUS</th>\r\n          <td mat-cell *matCellDef=\"let element; let i = index\" (click)=\"openModal(element)\">{{element?.paymentStatus?.replaceAll('_',' ') | uppercase}}</td>\r\n        </ng-container>\r\n\r\n\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n      </table>\r\n      <div class=\"no-record\" [hidden]=\"dataSource && dataSource?.data?.length > 0\">\r\n        No record found.\r\n      </div>\r\n      <mat-paginator\r\n        [pageSize]=\"pageSize\"\r\n        [pageIndex]=\"pageNo\"\r\n        [length]=\"paymentTotalItems\"\r\n        (page)=\"pageEvent($event)\"\r\n      ></mat-paginator>\r\n    </div>\r\n    <br>\r\n  </div>\r\n</form>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AccountsPayableComponent } from './accounts-payable.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AccountsPayableComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class SingleApplicationRoutingModule { }\r\n"]}