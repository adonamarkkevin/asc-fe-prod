{"version":3,"sources":["webpack:///src/app/modules/pages/applications/schedule-of-fees/accounts-payable/accounts-payable.module.ts","webpack:///src/app/modules/pages/applications/schedule-of-fees/accounts-payable/accounts-payable.component.ts","webpack:///src/app/modules/pages/applications/schedule-of-fees/accounts-payable/accounts-payable.component.html","webpack:///src/app/modules/pages/applications/schedule-of-fees/accounts-payable/accounts-payable-routing.module.ts"],"names":["AccountsPayableModule","AccountsPayableComponent","apiService","spinner","displayedColumns","pageNo","pageSize","paymentTotalItems","getForPaymentList","event","pageIndex","length","show","findAll","getEndpoint","subscribe","res","dataSource","data","totalItems","hide","endpoint","scheduleOfFeesMonitoring","pageEvent","routes","path","component","SingleApplicationRoutingModule","forChild"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAwBO;AAAA,YAAMA,qBAAN;AAAA;AAAA;;;gBAAMA;;;;6BAAAA,qB;AAAqB,W;AAAA,oBAVvB,CACP,4DADO,EAEP,+FAFO,EAGP,qEAHO,EAIP,kEAJO,EAKP,0DALO,EAMP,6DANO,EAOP,sEAPO,CAUuB;;;OAA3B;;;4HAAMA,qB,EAAqB;AAAA,yBAZ9B,oFAY8B;AAZN,oBAGxB,4DAHwB,EAIxB,+FAJwB,EAKxB,qEALwB,EAMxB,kEANwB,EAOxB,0DAPwB,EAQxB,6DARwB,EASxB,sEATwB;AAYM,S;AAHhB,O;;;;;;;;;;;;;;;;;ACrBlB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACeU;;AAAuD;;AAAe;;;;;;AACtE;;AAAuD;;;;AAAsC;;;;;;AAAtC;;AAAA;;;;;;AAGvD;;AAAuD;;AAAmB;;;;;;AAC1E;;AAAsD;;;;;;AAA6G;;;;;;AAA7G;;AAAA;;;;;;AAGtD;;AAAuD;;AAAK;;;;;;AAC5D;;AAAsD;;;;AAA0C;;;;;;AAA1C;;AAAA;;;;;;AAGtD;;AAAuD;;AAAM;;;;;;AAC7D;;AAAsD;;;;AAAqC;;;;;;AAArC;;AAAA;;;;;;AAGtD;;AAAuD;;AAAsB;;;;;;AAC7E;;AAAsD;;;;AAA4C;;;;;;AAA5C;;AAAA;;;;;;AAGtD;;AAAuD;;AAAc;;;;;;AACrE;;AAAsD;;;;AAA2D;;;;;;AAA3D;;AAAA;;;;;;AAKxD;;;;;;AACA;;;;AD/BD;AAAA,YAAMC,wBAAN;AAQL,4CACUC,UADV,EAEUC,OAFV,EAEoC;AAAA;;AAD1B,iBAAAD,UAAA,GAAAA,UAAA;AACA,iBAAAC,OAAA,GAAAA,OAAA;AAPV,iBAAAC,gBAAA,GAA6B,CAAC,eAAD,EAAkB,mBAAlB,EAAuC,OAAvC,EAAgD,QAAhD,EAA0D,sBAA1D,EAAkF,eAAlF,CAA7B;AACA,iBAAAC,MAAA,GAAiB,CAAjB;AACA,iBAAAC,QAAA,GAAmB,EAAnB;AACA,iBAAAC,iBAAA,GAA4B,CAA5B;AAKK;;AAXA;AAAA;AAAA,mBAaL,oBAAQ;AACN,mBAAKC,iBAAL;AACD;AAfI;AAAA;AAAA,mBAiBL,mBAAUC,KAAV,EAAoB;AAClB,mBAAKH,QAAL,GAAgBG,KAAK,CAACH,QAAtB;AACAG,mBAAK,CAACC,SAAN,IAAmB,KAAKL,MAAxB,GACI,KAAKA,MAAL,EADJ,GAEI,KAAKA,MAAL,EAFJ;;AAIA,kBAAII,KAAK,CAACH,QAAN,GAAiBG,KAAK,CAACE,MAA3B,EAAmC;AACjC,qBAAKN,MAAL,GAAc,CAAd;AACD;;AAED,mBAAKG,iBAAL;AACD;AA5BI;AAAA;AAAA,mBA8BG,6BAAoB;AAAA;;AAC1B,mBAAKL,OAAL,CAAaS,IAAb;AACA,mBAAKV,UAAL,CAAgBW,OAAhB,CAAwB,KAAKC,WAAL,EAAxB,EACGC,SADH,CACa,UAACC,GAAD,EAAc;AACvB,qBAAI,CAACC,UAAL,GAAkB,IAAI,0EAAJ,CAA4BD,GAAG,CAACE,IAAhC,CAAlB;AACA,qBAAI,CAACX,iBAAL,GAAyBS,GAAG,CAACG,UAA7B;;AACA,qBAAI,CAAChB,OAAL,CAAaiB,IAAb;AACD,eALH;AAMD;AAtCI;AAAA;AAAA,mBAwCG,uBAAW;AACjB,kBAAIC,QAAQ,GAAG,kDAAUC,wBAAzB;AACA,+BAAUD,QAAV,0CAAkD,KAAKhB,MAAL,GAAc,CAAhE,mBAA0E,KAAKC,QAA/E;AACD;AA3CI;;AAAA;AAAA;;;2BAAML,wB,EAAwB,qH,EAAA,8H;AAAA,S;;;gBAAxBA,wB;AAAwB,+C;AAAA,mB;AAAA,iB;AAAA,4vB;AAAA;AAAA;ACXrC;;AACE;;AACE;;AACE;;AACE;;AACE;;AAAU;;AAAS;;AAAY;;AACjC;;AACF;;AACF;;AACA;;AACA;;AAEA;;AACE;;AACE;;AACE;;AACA;;AACF;;AACA;;AACE;;AACA;;AACF;;AACA;;AACE;;AACA;;AACF;;AACA;;AACE;;AACA;;AACF;;AACA;;AACE;;AACA;;AACF;;AACA;;AACE;;AACA;;AACF;;AAIA;;AACA;;AACF;;AACA;;AACE;;AACF;;AACA;;AAIE;AAAA,uBAAQ,IAAAsB,SAAA,QAAR;AAAyB,eAAzB;;AACD;;AACH;;AACA;;AACF;;AACF;;;;AA3CuB;;AAAA;;AA4BI;;AAAA;;AACP;;AAAA;;AAES;;AAAA;;AAIrB;;AAAA,iGAAqB,WAArB,EAAqB,UAArB,EAAqB,QAArB,EAAqB,qBAArB;;;;;;;;ODrCD;;;;;;;;;;;;;;;;;AEXP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,UAAMC,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,CAAvB;;AAWO;AAAA,YAAMC,8BAAN;AAAA;AAAA;;;gBAAMA;;;;6BAAAA,8B;AAA8B,W;AAAA,oBAHhC,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAGgC,EAF/B,4DAE+B;;;OAApC;;;4HAAMG,8B,EAA8B;AAAA;AAAA,oBAF/B,4DAE+B;AAAA,S;AAFnB,O","file":"schedule-of-fees-accounts-payable-accounts-payable-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SingleApplicationRoutingModule } from './accounts-payable-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AngularMaterialModule } from '@shared';\nimport { MatTableModule } from '@angular/material/table';\nimport { AccountsPayableComponent } from './accounts-payable.component';\n\n\n@NgModule({\n  declarations: [\n    AccountsPayableComponent\n  ],\n  imports: [\n    CommonModule,\n    SingleApplicationRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    FormsModule,\n    AngularMaterialModule,\n    MatTableModule\n  ]\n})\nexport class AccountsPayableModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ApiService } from '@services';\nimport { ENDPOINTS } from '@shared';\n\n@Component({\n  selector: 'app-accounts-payable',\n  templateUrl: './accounts-payable.component.html',\n  styleUrls: ['./accounts-payable.component.scss']\n})\nexport class AccountsPayableComponent implements OnInit {\n\n  dataSource: MatTableDataSource<any>\n  displayedColumns: string[] = ['referenceCode', 'typeOfApplication', 'brand', 'medium', 'applicantCompanyName', 'paymentStatus'];\n  pageNo: number = 0;\n  pageSize: number = 10;\n  paymentTotalItems: number = 0;\n\n  constructor(\n    private apiService: ApiService,\n    private spinner: NgxSpinnerService,\n  ) { }\n\n  ngOnInit(): void {\n    this.getForPaymentList();\n  }\n \n  pageEvent(event: any): void {\n    this.pageSize = event.pageSize;\n    event.pageIndex >= this.pageNo\n      ? this.pageNo++\n      : this.pageNo--;\n\n    if (event.pageSize > event.length) {\n      this.pageNo = 0;\n    }\n\n    this.getForPaymentList();\n  }\n\n  private getForPaymentList() {\n    this.spinner.show();\n    this.apiService.findAll(this.getEndpoint())\n      .subscribe((res: any) => {\n        this.dataSource = new MatTableDataSource<any>(res.data);\n        this.paymentTotalItems = res.totalItems;\n        this.spinner.hide();\n      });\n  }\n\n  private getEndpoint(): string {\n    let endpoint = ENDPOINTS.scheduleOfFeesMonitoring;\n    return `${endpoint}?hasPromissoryNote=true&page=${this.pageNo + 1}&size=${this.pageSize}`;\n  }\n}\n","<form>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-12 title\">\n        <mat-label>\n          <mat-icon>view_list</mat-icon> Accounts Payable\n        </mat-label>\n      </div>\n    </div>\n    <hr>\n    <br>\n\n    <div class=\"mat-elevation-z8 fields\">\n      <table mat-table [dataSource]=\"dataSource\" matSort>\n        <ng-container matColumnDef=\"referenceCode\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> REFERENCE CODE </th>\n          <td mat-cell *matCellDef=\"let element; let i = index\"> {{element?.referenceCode | uppercase}}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"typeOfApplication\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> TYPE OF APPLICATION</th>\n          <td mat-cell *matCellDef=\"let element; let i = index\">{{element?.applicationType.description | uppercase}} - {{element?.formType?.replaceAll('_',' ') | uppercase}}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"brand\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> BRAND</th>\n          <td mat-cell *matCellDef=\"let element; let i = index\">{{element?.brand.description | uppercase}}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"medium\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> MEDIUM</th>\n          <td mat-cell *matCellDef=\"let element; let i = index\">{{element?.typeOfMedium | uppercase}}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"applicantCompanyName\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> APPLICANT COMPANY NAME</th>\n          <td mat-cell *matCellDef=\"let element; let i = index\">{{element?.company.companyName | uppercase}}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"paymentStatus\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> PAYMENT STATUS</th>\n          <td mat-cell *matCellDef=\"let element; let i = index\">{{element?.paymentStatus?.replaceAll('_',' ') | uppercase}}</td>\n        </ng-container>\n\n\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n      </table>\n      <div class=\"no-record\" [hidden]=\"dataSource && dataSource?.data?.length > 0\">\n        No record found.\n      </div>\n      <mat-paginator\n        [pageSize]=\"pageSize\"\n        [pageIndex]=\"pageNo\"\n        [length]=\"paymentTotalItems\"\n        (page)=\"pageEvent($event)\"\n      ></mat-paginator>\n    </div>\n    <br>\n  </div>\n</form>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AccountsPayableComponent } from './accounts-payable.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AccountsPayableComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SingleApplicationRoutingModule { }\n"]}