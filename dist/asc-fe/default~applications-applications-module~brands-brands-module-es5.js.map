{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/brands/brands.component.ts","webpack:///src/app/modules/pages/maintenance/brands/brands.component.html"],"names":["BrandsComponent","apiService","formBuilder","sweetAlertService","dataStorage","dialogRef","data","displayedColumns","statusList","yesNoList","brand","brandList","statusNoDisplay","isFromModal","showApproveRejectButton","isShowApproveDisapproveButtonByAdmin","userRole","getUserRole","dataForModal","dataFromModal","isUpdate","ROLE_APPLICANT","getList","setFormValidator","findAll","subscribe","res","console","log","responseData","dataSource","paginator","formListComponent","sort","endpoint","status","penalty","setBrand","save","success","setS1NewBrand","close","getS1NewBrand","resetFormValidator","err","error","findById","idForUpdate","update","ACTIVE","brandForm","group","description","required","markAsUntouched","markAsPristine","approveBrand","brandParam","value","selected","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","deleteById","id","customSuccessMessage","approve","reject"],"mappings":"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","file":"default~applications-applications-module~brands-brands-module-es5.js","sourcesContent":["import { Component, Inject, OnInit, Optional, ViewChild } from '@angular/core';\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES, USER_ROLES, YES_NO_OPTION } from '@shared';\nimport { Brand } from '@models';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { FormListComponent } from '@fragments';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-brands',\n  templateUrl: './brands.component.html',\n  styleUrls: ['./brands.component.scss']\n})\nexport class BrandsComponent implements OnInit {\n\n  @ViewChild(FormListComponent) formListComponent: FormListComponent\n  dataSource: MatTableDataSource<Brand>;\n  displayedColumns: string[] = ['brandDesc', 'penalty', 'status'];\n  statusList = [...STATUSES];\n  yesNoList = [...YES_NO_OPTION];\n\n  brand = new Brand();\n  brandList = [];\n  // productList = [];\n  // categoryList = [];\n  statusNoDisplay = ['FOR_APPROVAL', 'DISAPPROVED', 'APPROVED'];\n\n  isFromModal = false;\n  showApproveRejectButton = false;\n  isShowApproveDisapproveButtonByAdmin = false;\n\n  userRole = '';\n\n  brandForm: FormGroup;\n\n  constructor(\n    private apiService: ApiService,\n    private formBuilder: FormBuilder,\n    private sweetAlertService: SweetAlertService,\n    private dataStorage: DataStorageService,\n    @Optional() public dialogRef: MatDialogRef<BrandsComponent>,\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.userRole = this.dataStorage.getUserRole();\n    if (data) {\n      if (data.dataForModal) {\n        const dataFromModal = data.dataForModal;\n\n        this.isFromModal = dataFromModal.isFromModal;\n        this.showApproveRejectButton = dataFromModal.isUpdate;\n\n        if (dataFromModal.isUpdate) {\n          this.brand = dataFromModal.brand\n        }\n      }\n    }\n  }\n\n  ngOnInit() {\n    if (this.userRole !== USER_ROLES.ROLE_APPLICANT) {\n      this.getList();\n    }\n    this.setFormValidator();\n    // this.getProductList();\n    // this.getCategoryList();\n  }\n\n  getList(): void {\n    this.apiService.findAll(ENDPOINTS.brand).subscribe((res: any) => {\n      console.log(res.responseData.data);\n      this.brandList = res.responseData.data;\n      this.dataSource = new MatTableDataSource<Brand>(res.responseData.data);\n      this.dataSource.paginator = this.formListComponent.paginator;\n      this.dataSource.sort = this.formListComponent.sort;\n    });\n  }\n\n  save(endpoint) {\n    if (this.isFromModal) {\n      this.brand.status = 'FOR_APPROVAL';\n    }\n\n    if (!endpoint) {\n      endpoint = ENDPOINTS.brand;\n    }\n\n    this.brand.penalty = this.setBrand(this.brand.penalty);\n\n    this.apiService.save(endpoint, this.brand).subscribe(\n      (res: any) => {\n        if (res) {\n          this.sweetAlertService.success(res);\n          this.dataStorage.setS1NewBrand(res.responseData.data);\n        }\n\n        if (this.isFromModal) {\n          this.dialogRef.close(this.dataStorage.getS1NewBrand());\n        } else {\n          this.resetFormValidator();\n          this.getList();\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        // actions after subscription\n      });\n  }\n\n\n  getBrand(): void {\n    this.apiService.findById(ENDPOINTS.brand, this.formListComponent.idForUpdate).subscribe((res: any) => {\n      if (res) {\n        this.brand = res.responseData.data;\n        // const removeStatusDisplay = this.statusNoDisplay.includes(this.brand.status);\n        // this.isFromModal = removeStatusDisplay;\n        this.showApproveRejectButton = this.brand.status === 'FOR_APPROVAL';\n\n        this.isShowApproveDisapproveButtonByAdmin = this.brand.status === 'FOR_APPROVAL' ?\n          true : false;\n      }\n    });\n  }\n\n  // getProductList() {\n  //   this.apiService.findAll(ENDPOINTS.product).subscribe((res: any) => {\n  //     this.productList = res.responseData.data.filter((product) => product.status === COMMON_FUNCTION.ACTIVE);\n  //   });\n  // }\n\n  // getCategoryList(): void {\n  //   this.apiService.findAll(ENDPOINTS.category).subscribe((res: any) => {\n  //     this.categoryList = res.responseData.data;\n  //   });\n  // }\n\n  update(endpoint) {\n    if (!endpoint) {\n      endpoint = ENDPOINTS.brand;\n    }\n\n    this.brand.penalty = this.setBrand(this.brand.penalty);\n    this.apiService.update(endpoint, this.brand).subscribe(\n      (res: any) => {\n        if (res) {\n          this.sweetAlertService.success(res);\n          this.dataStorage.setS1NewBrand(res.responseData.data)\n        }\n\n        if (this.isFromModal) {\n          this.dialogRef.close(this.dataStorage.getS1NewBrand());\n        } else {\n          this.resetFormValidator();\n          this.getList();\n        }\n      }, (err: any) => {\n        this.sweetAlertService.error(err);\n      }, () => {\n        // actions after subscription\n      });\n  }\n\n  setFormValidator(): void {\n    if (!this.isFromModal) {\n      this.brand.status = COMMON_FUNCTION.ACTIVE;\n    }\n    this.brandForm = this.formBuilder.group({\n      description: ['', Validators.required],\n      // product: ['', Validators.required],\n      // category: ['', Validators.required],\n      status: [''],\n      penalty: [''],\n    });\n  }\n\n  resetFormValidator(): void {\n    this.brand = new Brand();\n    this.isShowApproveDisapproveButtonByAdmin = false;\n    if (!this.isFromModal) {\n      this.brand.status = COMMON_FUNCTION.ACTIVE;\n    } else {\n      this.showApproveRejectButton = false;\n      this.isFromModal = false;\n    }\n    this.brandForm.markAsUntouched();\n    this.brandForm.markAsPristine();\n  }\n\n  // compareProduct(value: any, selected: any): boolean {\n  //   if (value && selected) {\n  //     return value.description === selected.description;\n  //   }\n  // }\n\n  // compareCategory(value: any, selected: any): boolean {\n  //   if (value && selected) {\n  //     return value.description === selected.description;\n  //   }\n  // }\n\n  approve() {\n    this.brand.status = 'APPROVED';\n    this.save(ENDPOINTS.approveBrand);\n  }\n\n  reject() {\n    this.brand.status = 'DISAPPROVED';\n    this.update('');\n  }\n\n  closeModal() {\n    this.dialogRef.close(this.dataStorage.getS1NewBrand());\n  }\n\n  setBrand(brandParam): boolean {\n    return brandParam === 'Yes' ? true : false;\n  }\n\n  compareBrand(value: any, selected: any): boolean {\n    if (value) {\n      return value === (selected ? 'Yes' : 'No');\n    }\n  }\n\n  delete() {\n    Swal.fire({\n      text: 'Are you sure you want to delete this brand?',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Confirm'\n    }).then((result) => {\n      if (result.value) {\n        this.apiService.deleteById(ENDPOINTS.brand, this.brand.id).subscribe(\n          () => {\n            this.sweetAlertService.customSuccessMessage('Brand successfully deleted.');\n            this.resetFormValidator();\n            this.getList();\n          }\n        );\n      }\n    });\n  }\n\n}\n","<form>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-12 title\">\n        <mat-label>\n          <mat-icon>turned_in</mat-icon> Brand\n        </mat-label>\n      </div>\n    </div>\n    <hr>\n\n    <form [formGroup]=\"brandForm\">\n\n      <div class=\"row\">\n        <mat-form-field class=\"col-md-10\" appearance=\"outline\">\n          <mat-label>Brand <span class=\"required-field\">*</span></mat-label>\n          <input matInput [(ngModel)]=\"brand.description\" name=\"description\" formControlName=\"description\">\n        </mat-form-field>\n\n        <mat-form-field class=\"col-md-2\" appearance=\"outline\" [hidden]=\"isFromModal\"\n        *ngIf=\"(userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' || userRole === 'ROLE_ENCODER') && brand.id\">\n          <mat-label>Status</mat-label>\n          <mat-select [(ngModel)]=\"brand.status\" name=\"status\" formControlName=\"status\">\n            <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\n              {{i.status}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <!-- <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n          <mat-label>Product <span class=\"required-field\">*</span></mat-label>\n          <mat-select [(ngModel)]=\"brand.product\" name=\"product\" formControlName=\"product\"\n            [compareWith]=\"compareProduct\">\n            <mat-option *ngFor=\"let i of productList\" [value]=\"i\">\n              {{i.description}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field> -->\n\n        <!-- <mat-form-field class=\"col-md-6\" appearance=\"outline\">\n          <mat-label>Category <span class=\"required-field\">*</span></mat-label>\n          <mat-select [(ngModel)]=\"brand.category\" name=\"category\" formControlName=\"category\"\n            [compareWith]=\"compareCategory\">\n            <mat-option *ngFor=\"let i of categoryList\" [value]=\"i\">\n              {{i.description}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field> -->\n\n        <mat-form-field class=\"col-md-2\" appearance=\"outline\" [hidden]=\"isFromModal\"\n         *ngIf=\"(userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' || userRole === 'ROLE_ENCODER') && brand.id\">\n          <mat-label>Penalty</mat-label>\n          <mat-select [(ngModel)]=\"brand.penalty\" name=\"penalty\" formControlName=\"penalty\"\n            [compareWith]=\"compareBrand\">\n            <mat-option *ngFor=\"let i of yesNoList\" [value]=\"i\">\n              {{ i }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </form>\n\n\n    <form *ngIf=\"userRole==='ROLE_ACCOUNTING'\">\n      <div class=\"row\">\n        <mat-form-field class=\"col-md-8\" appearance=\"outline\">\n          <mat-label>Brand <span class=\"required-field\">*</span></mat-label>\n          <input matInput  >\n        </mat-form-field>\n        <mat-form-field class=\"col-md-4\" appearance=\"outline\">\n          <mat-label>Penalty Fee <span class=\"required-field\">*</span></mat-label>\n          <input matInput >\n        </mat-form-field>\n      </div>\n    </form>\n\n    <app-form-action-buttons [showApproveRejectButton]=\"showApproveRejectButton\" [isFromModal]=\"isFromModal\"\n      [childObject]=\"brand\" [childForm]=\"brandForm\" (saveFunction)=\"save('')\" (updateFunction)=\"update('')\"\n      (approveFunction)=\"approve()\" (rejectFunction)=\"reject()\" (cancelFunction)=\"resetFormValidator()\"\n      (deleteFunction)=\"delete()\" [isShowApproveDisapproveButton]=\"isShowApproveDisapproveButtonByAdmin\">\n    </app-form-action-buttons>\n    <br>\n    <ng-container *ngIf=\"(!showApproveRejectButton && !isFromModal) || userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN'\">\n      <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\n        (selectInListFunction)=\"getBrand()\" [hidden]=\"isFromModal\">\n      </app-form-list>\n    </ng-container>\n  </div>\n</form>\n"]}