{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/brands/brands.component.html","webpack:///src/app/modules/pages/maintenance/brands/brands.component.scss","webpack:///src/app/modules/pages/maintenance/brands/brands.component.ts"],"names":["BrandsComponent","apiService","formBuilder","sweetAlertService","dataStorage","dialogRef","data","displayedColumns","statusList","yesNoList","brand","brandList","statusNoDisplay","isFromModal","showApproveRejectButton","isShowApproveDisapproveButtonByAdmin","userRole","getUserRole","dataForModal","dataFromModal","isUpdate","ROLE_APPLICANT","getList","setFormValidator","findAll","subscribe","res","console","log","responseData","dataSource","paginator","formListComponent","sort","endpoint","status","penalty","setBrand","save","success","setS1NewBrand","close","getS1NewBrand","resetFormValidator","err","error","findById","idForUpdate","update","ACTIVE","brandForm","group","description","required","markAsUntouched","markAsPristine","approveBrand","brandParam","value","selected","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","deleteById","id","customSuccessMessage","selector","template"],"mappings":"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","file":"default~applications-applications-module~brands-brands-module-es5.js","sourcesContent":["export default \"<form>\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12 title\\\">\\r\\n        <mat-label>\\r\\n          <mat-icon>turned_in</mat-icon> Brand\\r\\n        </mat-label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <hr>\\r\\n\\r\\n    <form [formGroup]=\\\"brandForm\\\">\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <mat-form-field class=\\\"col-md-10\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Brand <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <input matInput [(ngModel)]=\\\"brand.description\\\" name=\\\"description\\\" formControlName=\\\"description\\\">\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field class=\\\"col-md-2\\\" appearance=\\\"outline\\\" [hidden]=\\\"isFromModal\\\"\\r\\n        *ngIf=\\\"(userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' || userRole === 'ROLE_ENCODER') && brand.id\\\">\\r\\n          <mat-label>Status</mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"brand.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n            <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n              {{i.status}}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n\\r\\n        <!-- <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Product <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"brand.product\\\" name=\\\"product\\\" formControlName=\\\"product\\\"\\r\\n            [compareWith]=\\\"compareProduct\\\">\\r\\n            <mat-option *ngFor=\\\"let i of productList\\\" [value]=\\\"i\\\">\\r\\n              {{i.description}}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field> -->\\r\\n\\r\\n        <!-- <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Category <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"brand.category\\\" name=\\\"category\\\" formControlName=\\\"category\\\"\\r\\n            [compareWith]=\\\"compareCategory\\\">\\r\\n            <mat-option *ngFor=\\\"let i of categoryList\\\" [value]=\\\"i\\\">\\r\\n              {{i.description}}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field> -->\\r\\n\\r\\n        <mat-form-field class=\\\"col-md-2\\\" appearance=\\\"outline\\\" [hidden]=\\\"isFromModal\\\"\\r\\n         *ngIf=\\\"(userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN' || userRole === 'ROLE_ENCODER') && brand.id\\\">\\r\\n          <mat-label>Penalty</mat-label>\\r\\n          <mat-select [(ngModel)]=\\\"brand.penalty\\\" name=\\\"penalty\\\" formControlName=\\\"penalty\\\"\\r\\n            [compareWith]=\\\"compareBrand\\\">\\r\\n            <mat-option *ngFor=\\\"let i of yesNoList\\\" [value]=\\\"i\\\">\\r\\n              {{ i }}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n    </form>\\r\\n\\r\\n\\r\\n    <form *ngIf=\\\"userRole==='ROLE_ACCOUNTING'\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Brand <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <input matInput  >\\r\\n        </mat-form-field>\\r\\n        <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n          <mat-label>Penalty Fee <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n          <input matInput >\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n    </form>\\r\\n\\r\\n    <app-form-action-buttons [showApproveRejectButton]=\\\"showApproveRejectButton\\\" [isFromModal]=\\\"isFromModal\\\"\\r\\n      [childObject]=\\\"brand\\\" [childForm]=\\\"brandForm\\\" (saveFunction)=\\\"save('')\\\" (updateFunction)=\\\"update('')\\\"\\r\\n      (approveFunction)=\\\"approve()\\\" (rejectFunction)=\\\"reject()\\\" (cancelFunction)=\\\"resetFormValidator()\\\"\\r\\n      (deleteFunction)=\\\"delete()\\\" [isShowApproveDisapproveButton]=\\\"isShowApproveDisapproveButtonByAdmin\\\">\\r\\n    </app-form-action-buttons>\\r\\n    <br>\\r\\n    <ng-container *ngIf=\\\"(!showApproveRejectButton && !isFromModal) || userRole === 'ROLE_ADMIN' || userRole === 'ROLE_SUPER_ADMIN'\\\">\\r\\n      <app-form-list [dataSource]=\\\"dataSource\\\" [displayedColumns]=\\\"displayedColumns\\\"\\r\\n        (selectInListFunction)=\\\"getBrand()\\\" [hidden]=\\\"isFromModal\\\">\\r\\n      </app-form-list>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n</form>\\r\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvbWFpbnRlbmFuY2UvYnJhbmRzL2JyYW5kcy5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, Inject, OnInit, Optional, ViewChild } from '@angular/core';\r\nimport { ApiService, DataStorageService, SweetAlertService } from '@services';\r\nimport { COMMON_FUNCTION, ENDPOINTS, STATUSES, USER_ROLES, YES_NO_OPTION } from '@shared';\r\nimport { Brand } from '@models';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { FormListComponent } from '@fragments';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-brands',\r\n  templateUrl: './brands.component.html',\r\n  styleUrls: ['./brands.component.scss']\r\n})\r\nexport class BrandsComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent\r\n  dataSource: MatTableDataSource<Brand>;\r\n  displayedColumns: string[] = ['brandDesc', 'penalty', 'status'];\r\n  statusList = [...STATUSES];\r\n  yesNoList = [...YES_NO_OPTION];\r\n\r\n  brand = new Brand();\r\n  brandList = [];\r\n  // productList = [];\r\n  // categoryList = [];\r\n  statusNoDisplay = ['FOR_APPROVAL', 'DISAPPROVED', 'APPROVED'];\r\n\r\n  isFromModal = false;\r\n  showApproveRejectButton = false;\r\n  isShowApproveDisapproveButtonByAdmin = false;\r\n\r\n  userRole = '';\r\n\r\n  brandForm: FormGroup;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService,\r\n    private dataStorage: DataStorageService,\r\n    @Optional() public dialogRef: MatDialogRef<BrandsComponent>,\r\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    this.userRole = this.dataStorage.getUserRole();\r\n    if (data) {\r\n      if (data.dataForModal) {\r\n        const dataFromModal = data.dataForModal;\r\n\r\n        this.isFromModal = dataFromModal.isFromModal;\r\n        this.showApproveRejectButton = dataFromModal.isUpdate;\r\n\r\n        if (dataFromModal.isUpdate) {\r\n          this.brand = dataFromModal.brand\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.userRole !== USER_ROLES.ROLE_APPLICANT) {\r\n      this.getList();\r\n    }\r\n    this.setFormValidator();\r\n    // this.getProductList();\r\n    // this.getCategoryList();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.brand).subscribe((res: any) => {\r\n      console.log(res.responseData.data);\r\n      this.brandList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<Brand>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(endpoint) {\r\n    if (this.isFromModal) {\r\n      this.brand.status = 'FOR_APPROVAL';\r\n    }\r\n\r\n    if (!endpoint) {\r\n      endpoint = ENDPOINTS.brand;\r\n    }\r\n\r\n    this.brand.penalty = this.setBrand(this.brand.penalty);\r\n\r\n    this.apiService.save(endpoint, this.brand).subscribe(\r\n      (res: any) => {\r\n        if (res) {\r\n          this.sweetAlertService.success(res);\r\n          this.dataStorage.setS1NewBrand(res.responseData.data);\r\n        }\r\n\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.dataStorage.getS1NewBrand());\r\n        } else {\r\n          this.resetFormValidator();\r\n          this.getList();\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n      });\r\n  }\r\n\r\n\r\n  getBrand(): void {\r\n    this.apiService.findById(ENDPOINTS.brand, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.brand = res.responseData.data;\r\n        // const removeStatusDisplay = this.statusNoDisplay.includes(this.brand.status);\r\n        // this.isFromModal = removeStatusDisplay;\r\n        this.showApproveRejectButton = this.brand.status === 'FOR_APPROVAL';\r\n\r\n        this.isShowApproveDisapproveButtonByAdmin = this.brand.status === 'FOR_APPROVAL' ?\r\n          true : false;\r\n      }\r\n    });\r\n  }\r\n\r\n  // getProductList() {\r\n  //   this.apiService.findAll(ENDPOINTS.product).subscribe((res: any) => {\r\n  //     this.productList = res.responseData.data.filter((product) => product.status === COMMON_FUNCTION.ACTIVE);\r\n  //   });\r\n  // }\r\n\r\n  // getCategoryList(): void {\r\n  //   this.apiService.findAll(ENDPOINTS.category).subscribe((res: any) => {\r\n  //     this.categoryList = res.responseData.data;\r\n  //   });\r\n  // }\r\n\r\n  update(endpoint) {\r\n    if (!endpoint) {\r\n      endpoint = ENDPOINTS.brand;\r\n    }\r\n\r\n    this.brand.penalty = this.setBrand(this.brand.penalty);\r\n    this.apiService.update(endpoint, this.brand).subscribe(\r\n      (res: any) => {\r\n        if (res) {\r\n          this.sweetAlertService.success(res);\r\n          this.dataStorage.setS1NewBrand(res.responseData.data)\r\n        }\r\n\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.dataStorage.getS1NewBrand());\r\n        } else {\r\n          this.resetFormValidator();\r\n          this.getList();\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    if (!this.isFromModal) {\r\n      this.brand.status = COMMON_FUNCTION.ACTIVE;\r\n    }\r\n    this.brandForm = this.formBuilder.group({\r\n      description: ['', Validators.required],\r\n      // product: ['', Validators.required],\r\n      // category: ['', Validators.required],\r\n      status: [''],\r\n      penalty: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.brand = new Brand();\r\n    this.isShowApproveDisapproveButtonByAdmin = false;\r\n    if (!this.isFromModal) {\r\n      this.brand.status = COMMON_FUNCTION.ACTIVE;\r\n    } else {\r\n      this.showApproveRejectButton = false;\r\n      this.isFromModal = false;\r\n    }\r\n    this.brandForm.markAsUntouched();\r\n    this.brandForm.markAsPristine();\r\n  }\r\n\r\n  // compareProduct(value: any, selected: any): boolean {\r\n  //   if (value && selected) {\r\n  //     return value.description === selected.description;\r\n  //   }\r\n  // }\r\n\r\n  // compareCategory(value: any, selected: any): boolean {\r\n  //   if (value && selected) {\r\n  //     return value.description === selected.description;\r\n  //   }\r\n  // }\r\n\r\n  approve() {\r\n    this.brand.status = 'APPROVED';\r\n    this.save(ENDPOINTS.approveBrand);\r\n  }\r\n\r\n  reject() {\r\n    this.brand.status = 'DISAPPROVED';\r\n    this.update('');\r\n  }\r\n\r\n  closeModal() {\r\n    this.dialogRef.close(this.dataStorage.getS1NewBrand());\r\n  }\r\n\r\n  setBrand(brandParam): boolean {\r\n    return brandParam === 'Yes' ? true : false;\r\n  }\r\n\r\n  compareBrand(value: any, selected: any): boolean {\r\n    if (value) {\r\n      return value === (selected ? 'Yes' : 'No');\r\n    }\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this brand?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.brand, this.brand.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Brand successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n"]}