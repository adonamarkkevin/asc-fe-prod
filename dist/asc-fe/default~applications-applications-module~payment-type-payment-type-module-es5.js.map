{"version":3,"sources":["webpack:///src/app/modules/pages/maintenance/payment-type/payment-type.component.ts","webpack:///src/app/modules/pages/maintenance/payment-type/payment-type.component.html"],"names":["PaymentTypeComponent","apiService","formBuilder","sweetAlertService","displayedColumns","statusList","paymentType","paymentTypeList","getList","setFormValidator","findAll","subscribe","res","responseData","data","dataSource","paginator","formListComponent","sort","save","undefined","success","err","error","resetFormValidator","findById","idForUpdate","update","status","ACTIVE","paymentTypeForm","group","paymentDescription","required","amount","bankBranch","bankName","controlNo","fundTransferDate","promisorryDate","referenceNo","markAsUntouched","markAsPristine","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","deleteById","id","customSuccessMessage","getPaymentType"],"mappings":"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","file":"default~applications-applications-module~payment-type-payment-type-module-es5.js","sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { PaymentType } from '@models';\r\nimport { STATUSES, ENDPOINTS, COMMON_FUNCTION } from '@shared';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { ApiService, SweetAlertService } from '@services';\r\nimport { FormListComponent } from '@fragments';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-payment-type',\r\n  templateUrl: './payment-type.component.html',\r\n  styleUrls: ['./payment-type.component.scss']\r\n})\r\nexport class PaymentTypeComponent implements OnInit {\r\n\r\n  @ViewChild(FormListComponent) formListComponent: FormListComponent;\r\n  dataSource: MatTableDataSource<PaymentType>;\r\n  displayedColumns: string[] = [\r\n    'paymentDescription',\r\n    'amount',\r\n    'bankBranch',\r\n    'bankName',\r\n    'controlNo',\r\n    'fundTransferDate',\r\n    'promisorryDate',\r\n    'referenceNo',\r\n    'status'\r\n  ];\r\n  statusList = [...STATUSES];\r\n\r\n  paymentType = new PaymentType();\r\n  paymentTypeList = [];\r\n\r\n  paymentTypeForm: FormGroup;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private formBuilder: FormBuilder,\r\n    private sweetAlertService: SweetAlertService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getList();\r\n    this.setFormValidator();\r\n  }\r\n\r\n  getList(): void {\r\n    this.apiService.findAll(ENDPOINTS.paymentType).subscribe((res: any) => {\r\n      this.paymentTypeList = res.responseData.data;\r\n      this.dataSource = new MatTableDataSource<PaymentType>(res.responseData.data);\r\n      this.dataSource.paginator = this.formListComponent.paginator;\r\n      this.dataSource.sort = this.formListComponent.sort;\r\n    });\r\n  }\r\n\r\n  save(): void {\r\n    this.apiService.save(ENDPOINTS.paymentType, this.paymentType).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  getPaymentType(): void {\r\n    this.apiService.findById(ENDPOINTS.paymentType, this.formListComponent.idForUpdate).subscribe((res: any) => {\r\n      if (res) {\r\n        this.paymentType = res.responseData.data;\r\n      }\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    this.apiService.update(ENDPOINTS.paymentType, this.paymentType).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.resetFormValidator();\r\n        this.getList();\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    this.paymentType.status = COMMON_FUNCTION.ACTIVE;\r\n    this.paymentTypeForm = this.formBuilder.group({\r\n      paymentDescription: ['', Validators.required],\r\n      amount: [''],\r\n      bankBranch: [''],\r\n      bankName: [''],\r\n      controlNo: [''],\r\n      fundTransferDate: [''],\r\n      promisorryDate: [''],\r\n      referenceNo: [''],\r\n      status: [''],\r\n    });\r\n  }\r\n\r\n  resetFormValidator(): void {\r\n    this.paymentType = new PaymentType();\r\n    this.paymentType.status = COMMON_FUNCTION.ACTIVE;\r\n    this.paymentTypeForm.markAsUntouched();\r\n    this.paymentTypeForm.markAsPristine();\r\n  }\r\n\r\n  delete() {\r\n    Swal.fire({\r\n      text: 'Are you sure you want to delete this payment type?',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        this.apiService.deleteById(ENDPOINTS.paymentType, this.paymentType.id).subscribe(\r\n          () => {\r\n            this.sweetAlertService.customSuccessMessage('Payment type successfully deleted.');\r\n            this.resetFormValidator();\r\n            this.getList();\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","<form>\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 title\">\r\n        <mat-label>\r\n          <mat-icon>payment</mat-icon> Payment Type\r\n        </mat-label>\r\n      </div>\r\n    </div>\r\n    <hr>\r\n\r\n    <form [formGroup]=\"paymentTypeForm\">\r\n      <div class=\"row\">\r\n        <mat-form-field class=\"col-md-8\" appearance=\"outline\">\r\n          <mat-label>Payment Description: <span class=\"required-field\">*</span></mat-label>\r\n          <input matInput [(ngModel)]=\"paymentType.paymentDescription\" name=\"paymentDescription\"\r\n            formControlName=\"paymentDescription\">\r\n        </mat-form-field>\r\n\r\n        <mat-form-field class=\"col-md-4\" appearance=\"outline\" *ngIf=\"paymentType.id\">\r\n          <mat-label>Status</mat-label>\r\n          <mat-select [(ngModel)]=\"paymentType.status\" name=\"status\" formControlName=\"status\">\r\n            <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n              {{i.status}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <mat-slide-toggle class=\"col-md-5\" [(ngModel)]=\"paymentType.amount\" [checked]=\"paymentType.amount\" color=\"warn\"\r\n          formControlName=\"amount\"><b>Has Amount</b>\r\n        </mat-slide-toggle>\r\n        <mat-slide-toggle class=\"col-md-5\" [(ngModel)]=\"paymentType.bankBranch\" [checked]=\"paymentType.bankBranch\"\r\n          color=\"warn\" formControlName=\"bankBranch\"><b>Has Bank Branch</b>\r\n        </mat-slide-toggle>\r\n        <br>\r\n        <mat-slide-toggle class=\"col-md-5\" [(ngModel)]=\"paymentType.bankName\" [checked]=\"paymentType.bankName\"\r\n          color=\"warn\" formControlName=\"bankName\"><b>Has Bank Name</b></mat-slide-toggle>\r\n        <mat-slide-toggle class=\"col-md-5\" [(ngModel)]=\"paymentType.controlNo\" [checked]=\"paymentType.controlNo\"\r\n          color=\"warn\" formControlName=\"controlNo\"><b>Has Control Number</b>\r\n        </mat-slide-toggle>\r\n        <br>\r\n        <mat-slide-toggle class=\"col-md-5\" [(ngModel)]=\"paymentType.fundTransferDate\"\r\n          [checked]=\"paymentType.fundTransferDate\" color=\"warn\" formControlName=\"fundTransferDate\"><b>Has Fund Transfer\r\n            Date</b></mat-slide-toggle>\r\n        <mat-slide-toggle class=\"col-md-5\" [(ngModel)]=\"paymentType.promisorryDate\"\r\n          [checked]=\"paymentType.promisorryDate\" color=\"warn\" formControlName=\"promisorryDate\"><b>Has Promisorry\r\n            Date</b></mat-slide-toggle>\r\n        <br>\r\n        <mat-slide-toggle class=\"col-md-5\" [(ngModel)]=\"paymentType.referenceNo\" [checked]=\"paymentType.referenceNo\"\r\n          color=\"warn\" formControlName=\"referenceNo\"><b>Has Reference No\r\n          </b></mat-slide-toggle>\r\n      </div>\r\n    </form>\r\n\r\n    <app-form-action-buttons [childObject]=\"paymentType\" [childForm]=\"paymentTypeForm\" (saveFunction)=\"save()\"\r\n      (updateFunction)=\"update()\" (cancelFunction)=\"resetFormValidator()\" (deleteFunction)=\"delete()\"></app-form-action-buttons>\r\n    <br>\r\n    <app-form-list [dataSource]=\"dataSource\" [displayedColumns]=\"displayedColumns\"\r\n      (selectInListFunction)=\"getPaymentType()\"></app-form-list>\r\n  </div>\r\n</form>\r\n"]}