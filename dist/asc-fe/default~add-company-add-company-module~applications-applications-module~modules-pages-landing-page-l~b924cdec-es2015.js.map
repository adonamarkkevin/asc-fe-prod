{"version":3,"sources":["./src/app/modules/pages/company/add-company/add-company.component.ts","./src/app/modules/pages/company/add-company/add-company.component.html","./src/app/core/services/address/address.service.ts"],"names":[],"mappings":"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","file":"default~add-company-add-company-module~applications-applications-module~modules-pages-landing-page-l~b924cdec-es2015.js","sourcesContent":["import { Component, Inject, OnInit, Optional, ViewChild } from '@angular/core';\r\nimport { ENDPOINTS, COMMON_FUNCTION, STATUSES, USER_ROLES, YES_NO_OPTION } from '@shared';\r\nimport { Company } from '@models';\r\nimport { ApiService, SweetAlertService, DataStorageService } from '@services';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\r\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { AddressService } from '../../../../core/services/address/address.service';\r\nimport { ValidateFieldService } from 'app/core/services/validate-field.service';\r\n\r\n@Component({\r\n  selector: 'app-add-company',\r\n  templateUrl: './add-company.component.html',\r\n  styleUrls: ['./add-company.component.scss']\r\n})\r\nexport class AddCompanyComponent implements OnInit {\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  @ViewChild(MatTable, { static: false }) table: MatTable<Company>;\r\n  dataSource: MatTableDataSource<Company>;\r\n  displayedColumns: string[] = ['companyName', 'companyTelephoneNo', 'companyFaxNo', 'companyTin', 'address'];\r\n\r\n  countryList = [];\r\n  companyList = [];\r\n  affiliationList = [];\r\n  regionsList = [];\r\n  provinceList = [];\r\n  cityMunicipalityList = [];\r\n  barangayList = [];\r\n  statusList = [...STATUSES];\r\n  yesNoList = [...YES_NO_OPTION];\r\n\r\n  company = new Company();\r\n  companyForm: FormGroup;\r\n  currentUser: any;\r\n  todayDate: Date = new Date();\r\n  id: any;\r\n  notForeignAddress = true;\r\n  isFromModal = false;\r\n  isUserRegistration = false;\r\n  showApproveRejectButton = false;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private addressService: AddressService,\r\n    private formBuilder: FormBuilder,\r\n    private dataStorage: DataStorageService,\r\n    private sweetAlertService: SweetAlertService,\r\n    public validateFieldService: ValidateFieldService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private matDialog: MatDialog,\r\n    @Optional() public dialogRef: MatDialogRef<AddCompanyComponent>,\r\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    if (data) {\r\n      if (data.dataForModal) {\r\n        const dataFromModal = data.dataForModal;\r\n\r\n        this.isFromModal = dataFromModal.isFromModal;\r\n        this.showApproveRejectButton = dataFromModal.isUpdate;\r\n\r\n        if (dataFromModal.isUpdate) {\r\n          this.company = dataFromModal.company\r\n        } else {\r\n          this.company.country = dataFromModal.country\r\n        }\r\n      }\r\n      this.isUserRegistration = data.isUserRegistration;\r\n    }\r\n\r\n    const additionalStatus = [\r\n      {\r\n        status: 'APPROVED'\r\n      }, {\r\n        status: 'DISAPPROVED'\r\n      }, {\r\n        status: 'FOR_APPROVAL'\r\n      }\r\n    ];\r\n    this.statusList.push(...additionalStatus);\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.currentUser = this.dataStorage.getUserAccount();\r\n    this.setFormValidator();\r\n    this.getCountries();\r\n    this.getAffiliationList();\r\n    this.id = Number(this.route.snapshot.paramMap.get('id'));\r\n    if (this.id !== 0) {\r\n      this.viewApplication();\r\n    }\r\n  }\r\n\r\n  viewApplication() {\r\n    this.apiService.findById(ENDPOINTS.company, this.id).subscribe((res: any) => {\r\n      this.company = res.responseData.data;\r\n      this.getAffiliationList();\r\n    });\r\n  }\r\n\r\n  getCountries() {\r\n    this.apiService.findAll(ENDPOINTS.countries).subscribe((res: any) => {\r\n      this.countryList = res.responseData.data;\r\n    });\r\n  }\r\n\r\n  getAffiliationList(): void {\r\n    this.apiService.findAll(ENDPOINTS.activeMembersAffiliation).subscribe((res: any) => {\r\n      this.affiliationList = res.responseData.data;\r\n    });\r\n  }\r\n\r\n\r\n  save(endpoint) {\r\n    if (!endpoint) {\r\n      endpoint = ENDPOINTS.company;\r\n    }\r\n\r\n    if (this.currentUser && (this.currentUser.userRole.name === USER_ROLES.ROLE_ADMIN || this.currentUser.userRole.name === USER_ROLES.ROLE_SUPER_ADMIN)) {\r\n      this.company.status = COMMON_FUNCTION.ACTIVE;\r\n    } else {\r\n      this.company.status = COMMON_FUNCTION.FOR_APPROVAL;\r\n    }\r\n\r\n    // if(this.notForeignAddress){\r\n    //   this.company.country = 'PHIL'\r\n    // }\r\n\r\n    if (this.isFromModal) {\r\n      this.company.status = COMMON_FUNCTION.FOR_APPROVAL;\r\n    }\r\n    this.company.delinquent = this.setDelinquent(this.company.delinquent);\r\n\r\n    this.apiService.save(endpoint, this.company).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.id = res.responseData.data.id;\r\n          this.company = res.responseData.data;\r\n          this.sweetAlertService.customSuccessMessage('Company successfully saved.');\r\n          if (this.isFromModal) {\r\n            this.dialogRef.close(this.company);\r\n          }\r\n          if (this.isUserRegistration) {\r\n            this.dialogRef.close(this.company);\r\n          }\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        // this.resetFormValidator();\r\n        if (!this.isFromModal && !this.isUserRegistration) {\r\n          this.router.navigate(['asc/page/company/update/', this.id]);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  getCompany(id): void {\r\n    this.apiService.findById(ENDPOINTS.company, id).subscribe((res: any) => {\r\n      if (res) {\r\n        this.company = res.responseData.data;\r\n        // this.addressService.getBarangay(res.responseData.data.barangayId).subscribe(\r\n        //   (res: any) => {\r\n\r\n        // this.company.region = res.responseData.data.cityMunicipalityDto.provinceDto.regionDto.regionId;\r\n        // this.company.province = res.responseData.data.cityMunicipalityDto.provinceDto.provinceId;\r\n        // this.company.cityMunicipality = res.responseData.data.cityMunicipalityDto.cityMunicipalityId;\r\n        // this.company.barangay = res.responseData.data.barangayId;\r\n\r\n        // this.getProvinces();\r\n        // this.getCityMunicipalities();\r\n        // this.getBarangays();\r\n        // });\r\n      }\r\n    });\r\n  }\r\n\r\n  update(endpoint) {\r\n    if (!endpoint) {\r\n      endpoint = ENDPOINTS.company;\r\n    }\r\n    this.company.delinquent = this.setDelinquent(this.company.delinquent);\r\n\r\n    if (this.company.status === 'APPROVED') {\r\n      this.company.status = 'ACTIVE';\r\n    }\r\n    this.apiService.update(endpoint, this.company).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.cancel();\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.company);\r\n        }\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    // if(this.notForeignAddress){\r\n    //   this.companyForm = this.formBuilder.group({\r\n    //     companyName: ['', Validators.required],\r\n    //     companyTelephoneNo: ['', Validators.required],\r\n    //     companyFaxNo: ['', Validators.required],\r\n    //     membersAffiliation: ['', Validators.required],\r\n    //     companyTin: ['', Validators.required],\r\n    //     // region: ['', Validators.required],\r\n    //     // province: ['', Validators.required],\r\n    //     // cityMunicipality: ['', Validators.required],\r\n    //     // barangay: ['', Validators.required],\r\n    //     completeAddress: ['', Validators.required]\r\n    //   });\r\n    // }else{\r\n    //   this.companyForm = this.formBuilder.group({\r\n    //     companyName: ['', Validators.required],\r\n    //     companyTelephoneNo: ['', Validators.required],\r\n    //     companyFaxNo: ['', Validators.required],\r\n    //     membersAffiliation: ['', Validators.required],\r\n    //     companyTin: ['', Validators.required],\r\n    //     country: ['', Validators.required],\r\n    //     foreignAddress: ['', Validators.required]\r\n    //   });\r\n    // }\r\n\r\n    this.companyForm = this.formBuilder.group({\r\n      companyName: ['', Validators.required],\r\n      companyMobileNo: ['', Validators.required],\r\n      companyTelephoneNo: ['', Validators.required],\r\n      companyTelephoneNo2: ['', Validators.required],\r\n      // companyFaxNo: ['', Validators.required],\r\n      membersAffiliation: ['', Validators.required],\r\n      contactPersonName: ['', Validators.required],\r\n      contactPersonEmail: ['', [Validators.required, Validators.pattern('[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}')]],\r\n      companyTin: ['', Validators.required],\r\n      country: ['', Validators.required],\r\n      completeAddress: ['', Validators.required],\r\n      voucherFund: [''],\r\n      status: [''],\r\n      delinquent: ['']\r\n    });\r\n  }\r\n\r\n  cancel(): void {\r\n    if (!this.isFromModal) {\r\n      if (this.company.id) {\r\n        this.router.navigate(['/asc/page/company/lists']);\r\n      } else {\r\n        this.company = new Company();\r\n        this.companyForm.markAsUntouched();\r\n        this.companyForm.markAsPristine();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // getRegions() {\r\n  //   this.addressService.getRegions().subscribe(\r\n  //     (res: any) => {\r\n  //       this.regionsList = res;\r\n  //     });\r\n  // }\r\n\r\n  // getProvinces() {\r\n  //   this.addressService.getProvinces(this.company.region.regionId).subscribe(\r\n  //     (res: any) => {\r\n  //       this.provinceList = res.responseData.data;\r\n  //     });\r\n  // }\r\n\r\n  // getCityMunicipalities() {\r\n  //   this.addressService.getCityMunicipalities(this.company.province.provinceId).subscribe(\r\n  //     (res: any) => {\r\n  //       this.cityMunicipalityList = res.responseData.data;\r\n  //     });\r\n  // }\r\n\r\n  // getBarangays() {\r\n  //   this.addressService.getBarangays(this.company.cityMunicipality.cityMunicipalityId).subscribe(\r\n  //     (res: any) => {\r\n  //       this.barangayList = res.responseData.data;\r\n  //     });\r\n  // }\r\n\r\n  isForeignAddress(): void {\r\n    this.notForeignAddress = !this.notForeignAddress;\r\n    // this.setFormValidator();\r\n  }\r\n\r\n  compareMembersAffiliation(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  compareCountry(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.id === selected.id;\r\n    }\r\n  }\r\n\r\n  compareDelinquent(value: any, selected: any): boolean {\r\n    if (value) {\r\n      return value === (selected ? 'Yes' : 'No');\r\n    }\r\n  }\r\n\r\n  approve() {\r\n    this.company.status = 'APPROVED';\r\n    this.save(ENDPOINTS.approveCompany);\r\n  }\r\n\r\n  reject() {\r\n    this.company.status = 'DISAPPROVED';\r\n    this.update('');\r\n  }\r\n\r\n  closeModal() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  setDelinquent(delinquentVal: any): boolean {\r\n    return delinquentVal === 'Yes' ? true : false;\r\n  }\r\n\r\n}\r\n","<form>\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 title\">\r\n        <mat-label>\r\n          <mat-icon>apartment</mat-icon> Company\r\n        </mat-label>\r\n        <button class=\"button-right\" *ngIf=\"!isFromModal && !isUserRegistration\" mat-raised-button color=\"primary\"\r\n          [routerLink]=\"['/asc/page/company/lists']\">\r\n          <mat-icon>list</mat-icon> VIEW COMPANIES\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <hr>\r\n\r\n\r\n    <form [formGroup]=\"companyForm\">\r\n      <div class=\"row fields\">\r\n        <h4>\r\n          <mat-icon>label_important</mat-icon> Company Information\r\n        </h4>\r\n        <div class=\"row\">\r\n          <mat-form-field class=\"col-md-7\" appearance=\"outline\">\r\n            <mat-label>Company Name <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"company.companyName\" name=\"companyName\" formControlName=\"companyName\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-5\" appearance=\"outline\">\r\n            <mat-label>Member Affiliation <span class=\"required-field\">*</span></mat-label>\r\n            <mat-select [(ngModel)]=\"company.membersAffiliation\" name=\"membersAffiliation\"\r\n              [compareWith]=\"compareMembersAffiliation\" formControlName=\"membersAffiliation\">\r\n              <mat-option *ngFor=\"let i of affiliationList\" [value]=\"i\">\r\n                {{i.description}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-3\" appearance=\"outline\">\r\n            <mat-label>Mobile Number <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"company.companyMobileNo\" name=\"companyMobileNo\" placeholder=\"09xxxxxxxxx\"\r\n              formControlName=\"companyMobileNo\" (keydown)=\"validateFieldService.numbersOnly($event)\" maxlength=\"11\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-3\" appearance=\"outline\">\r\n            <mat-label>Telephone Number <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"company.companyTelephoneNo\" name=\"companyTelephoneNo\"\r\n              formControlName=\"companyTelephoneNo\" (keydown)=\"validateFieldService.numbersOnly($event)\" maxlength=\"11\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-3\" appearance=\"outline\">\r\n            <mat-label>Alternate Telephone Number <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"company.companyTelephoneNo2\" name=\"companyTelephoneNo2\"\r\n              formControlName=\"companyTelephoneNo2\" (keydown)=\"validateFieldService.numbersOnly($event)\" maxlength=\"11\">\r\n          </mat-form-field>\r\n\r\n          <!-- <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n            <mat-label>Fax Number</mat-label>\r\n            <input matInput [(ngModel)]=\"company.companyFaxNo\" name=\"companyFaxNo\" formControlName=\"companyFaxNo\">\r\n          </mat-form-field> -->\r\n          <mat-form-field class=\"col-md-3\" appearance=\"outline\">\r\n            <mat-label>TIN <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"company.companyTin\" name=\"companyTin\" formControlName=\"companyTin\"\r\n              (keydown)=\"validateFieldService.numbersOnly($event)\">\r\n          </mat-form-field>\r\n\r\n          <!-- <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n            <mat-label>Voucher Fund</mat-label>\r\n            <input matInput [(ngModel)]=\"company.voucherFund\" name=\"voucherFund\" formControlName=\"voucherFund\">\r\n          </mat-form-field> -->\r\n\r\n          <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n            <mat-label>Accounting Representative: <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"company.contactPersonName\" name=\"contactPersonName\"\r\n              formControlName=\"contactPersonName\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n            <mat-label>Representative's Email Address: <span class=\"required-field\">*</span></mat-label>\r\n            <input matInput [(ngModel)]=\"company.contactPersonEmail\" type=\"email\" name=\"contactPersonEmail\" email\r\n              formControlName=\"contactPersonEmail\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\"\r\n            *ngIf=\"(currentUser?.userRole?.name==='ROLE_ADMIN'||currentUser?.userRole?.name==='ROLE_SUPER_ADMIN'||currentUser?.userRole?.name==='ROLE_ENCODER') && !isUserRegistration\">\r\n            <mat-label>Delinquent</mat-label>\r\n            <mat-select [(ngModel)]=\"company.delinquent\" name=\"delinquent\" formControlName=\"delinquent\"\r\n              [compareWith]=\"compareDelinquent\">\r\n              <mat-option *ngFor=\"let i of yesNoList\" [value]=\"i\">\r\n                {{ i }}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\"\r\n            *ngIf=\"(currentUser?.userRole?.name==='ROLE_ADMIN'||currentUser?.userRole?.name==='ROLE_SUPER_ADMIN'||currentUser?.userRole?.name==='ROLE_ENCODER') && company.id\">\r\n            <mat-label>Status</mat-label>\r\n            <mat-select [(ngModel)]=\"company.status\" name=\"status\" formControlName=\"status\">\r\n              <mat-option *ngFor=\"let i of statusList\" [value]=\"i.status\">\r\n                {{i?.status?.replace('_',' ')}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n\r\n\r\n        </div>\r\n\r\n        <!-- <div class=\"row\">\r\n\r\n          <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n            <mat-label>Member Affiliation</mat-label>\r\n            <mat-select [(ngModel)]=\"company.membersAffiliation\" name=\"membersAffiliation\"\r\n              [compareWith]=\"compareMembersAffiliation\" formControlName=\"membersAffiliation\" matNativeControl required>\r\n              <mat-option *ngFor=\"let i of affiliationList\" [value]=\"i\">\r\n                {{i.description}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div> -->\r\n      </div>\r\n\r\n\r\n\r\n      <div class=\"row fields\">\r\n        <h4>\r\n          <mat-icon>label_important</mat-icon> Address\r\n        </h4>\r\n\r\n        <!-- <div class=\"row\">\r\n          <mat-slide-toggle color=\"warn\" (click)=\"isForeignAddress()\"><b>Foreign Address?</b></mat-slide-toggle>\r\n        </div><br><br> -->\r\n\r\n\r\n        <!-- <div *ngIf=\"notForeignAddress\"> -->\r\n        <div class=\"row\">\r\n          <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n            <mat-label>Country </mat-label>\r\n            <!-- <input matInput readonly [(ngModel)]=\"company.country\" formControlName=\"country\"> -->\r\n            <mat-select [(ngModel)]=\"company.country\" name=\"country\" [compareWith]=\"compareCountry\"\r\n              formControlName=\"country\" matNativeControl required>\r\n              <mat-option *ngFor=\"let i of countryList\" [value]=\"i\">\r\n                {{i.code}} - {{i.name}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n          <mat-form-field class=\"col-md-8\" appearance=\"outline\">\r\n            <mat-label>Company Address <span class=\"required-field\">*</span></mat-label>\r\n            <textarea matInput [(ngModel)]=\"company.completeAddress\" name=\"completeAddress\"\r\n              formControlName=\"completeAddress\"></textarea>\r\n          </mat-form-field>\r\n        </div>\r\n\r\n\r\n        <!-- <div class=\"row\">\r\n            <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n              <mat-label>Region</mat-label>\r\n              <mat-select [(ngModel)]=\"company.region\" (selectionChange)=\"getProvinces()\" name=\"region\"\r\n                formControlName=\"region\" matNativeControl required>\r\n                <mat-option *ngFor=\"let i of regionsList\" [value]=\"i\">\r\n                  {{i.regionName}}\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n              <mat-label>Province</mat-label>\r\n              <mat-select [(ngModel)]=\"company.province\" (selectionChange)=\"getCityMunicipalities()\"\r\n                [disabled]=\"!company.region\" name=\"province\" formControlName=\"province\" matNativeControl required>\r\n                <mat-option *ngFor=\"let i of provinceList\" [value]=\"i\">\r\n                  {{i.provinceName}}\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n              <mat-label>City/Municipality</mat-label>\r\n              <mat-select [(ngModel)]=\"company.cityMunicipality\" (selectionChange)=\"getBarangays()\"\r\n                [disabled]=\"!company.province\" name=\"cityMunicipality\" formControlName=\"cityMunicipality\"\r\n                matNativeControl required>\r\n                <mat-option *ngFor=\"let i of cityMunicipalityList\" [value]=\"i\">\r\n                  {{i.cityMunicipalityName}}\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field class=\"col-md-6\" appearance=\"outline\">\r\n              <mat-label>Barangay</mat-label>\r\n              <mat-select [(ngModel)]=\"company.barangay\" [disabled]=\"!company.cityMunicipality\" name=\"barangay\"\r\n                formControlName=\"barangay\" matNativeControl required>\r\n                <mat-option *ngFor=\"let i of barangayList\" [value]=\"i\">\r\n                  {{i.barangayName}}\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div> -->\r\n        <!-- </div> -->\r\n\r\n        <!-- <div *ngIf=\"!notForeignAddress\">\r\n          <div class=\"row\">\r\n            <mat-form-field class=\"col-md-4\" appearance=\"outline\">\r\n              <mat-label>Country</mat-label>\r\n              <input matInput [(ngModel)]=\"company.country\" name=\"country\" formControlName=\"country\">\r\n            </mat-form-field>\r\n            <mat-form-field class=\"col-md-8\" appearance=\"outline\">\r\n              <mat-label>Foreign Address</mat-label>\r\n              <input matInput [(ngModel)]=\"company.foreignAddress\" name=\"foreignAddress\"\r\n                formControlName=\"foreignAddress\">\r\n            </mat-form-field>\r\n          </div>\r\n        </div> -->\r\n\r\n      </div>\r\n    </form>\r\n    <hr>\r\n    <br>\r\n\r\n    <div class=\"row\" *ngIf=\"!isFromModal || !showApproveRejectButton\">\r\n      <div class=\"col-md-12\">\r\n        <button mat-raised-button color=\"primary\" (click)=\"save('')\" *ngIf=\"!company?.id\"\r\n          [disabled]=\"!(companyForm.valid)\">\r\n          <mat-icon>save</mat-icon> SAVE\r\n        </button>\r\n        <button mat-raised-button color=\"primary\" (click)=\"update('')\" *ngIf=\"company?.id\"\r\n          [disabled]=\"!(companyForm.valid)\">\r\n          <mat-icon>task_alt </mat-icon> UPDATE\r\n        </button>\r\n        <button mat-raised-button class=\"button-red\" (click)=\"approve()\" *ngIf=\"isFromModal && showApproveRejectButton\">\r\n          <i class=\"material-icons color__white\">verified</i> APPROVE\r\n        </button>\r\n        <button mat-raised-button class=\"button-red\" (click)=\"reject()\" *ngIf=\"isFromModal && showApproveRejectButton\">\r\n          <i class=\"material-icons color__white\">unpublished</i> REJECT\r\n        </button>\r\n        <button mat-raised-button color=\"warn\" (click)=\"cancel()\"\r\n          *ngIf=\"company?.id || company?.companyName || company?.companyTelephoneNo || company?.companyTin\">\r\n          <!-- <button mat-raised-button color=\"warn\" (click)=\"cancel()\"\r\n          *ngIf=\"company?.id || company?.companyName || company?.companyTelephoneNo || company?.companyFaxNo || company?.companyTin\"> -->\r\n          <mat-icon>{{ company?.id ? 'cancel' : 'refresh' }}</mat-icon> {{ company?.id ? 'CANCEL' : 'RESET' }}\r\n        </button>\r\n        <button mat-raised-button class=\"button-red\" (click)=\"closeModal()\" *ngIf=\"isFromModal\">\r\n          <i class=\"material-icons color__white\">close</i> CLOSE\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"isFromModal && showApproveRejectButton\">\r\n      <button mat-raised-button color=\"primary\" (click)=\"update('')\" *ngIf=\"company?.id\"\r\n        [disabled]=\"!(companyForm.valid)\">\r\n        <mat-icon>task_alt </mat-icon> UPDATE\r\n      </button>\r\n      <button mat-raised-button class=\"button-red\" (click)=\"approve()\">\r\n        <i class=\"material-icons color__white\">verified</i> APPROVE\r\n      </button>\r\n      <button mat-raised-button class=\"button-red\" (click)=\"reject()\">\r\n        <i class=\"material-icons color__white\">unpublished</i> REJECT\r\n      </button>\r\n      <button mat-raised-button class=\"button-red\" (click)=\"closeModal()\">\r\n        <i class=\"material-icons color__white\">close</i> CLOSE\r\n      </button>\r\n    </div>\r\n  </div>\r\n</form>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ENDPOINTS } from '@shared';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class AddressService {\r\n\r\n    constructor(\r\n        private http: HttpClient\r\n    ) { }\r\n\r\n    getRegions() {\r\n        return this.http.get(`${ENDPOINTS.regions}`);\r\n    }\r\n\r\n    getProvinces(regionId) {\r\n        return this.http.get(`${ENDPOINTS.provinces}/region-id/${regionId}`);\r\n    }\r\n\r\n    getCityMunicipalities(provinceId) {\r\n        return this.http.get(`${ENDPOINTS.cityMunicipalities}/province-id/${provinceId}`);\r\n    }\r\n\r\n    getBarangays(cityMunicipalityId) {\r\n        return this.http.get(`${ENDPOINTS.barangays}/city-municipality-id/${cityMunicipalityId}`);\r\n    }\r\n\r\n    getBarangay(barangayId) {\r\n        return this.http.get(`${ENDPOINTS.barangays}/barangay-id/${barangayId}`);\r\n    }\r\n\r\n}"],"sourceRoot":"webpack:///"}