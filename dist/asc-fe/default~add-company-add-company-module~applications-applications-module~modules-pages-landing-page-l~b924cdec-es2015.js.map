{"version":3,"sources":["./src/app/modules/pages/company/add-company/add-company.component.ts","./src/app/modules/pages/company/add-company/add-company.component.scss","./src/app/modules/pages/company/add-company/add-company.component.html","./src/app/core/services/address/address.service.ts"],"names":[],"mappings":"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","file":"default~add-company-add-company-module~applications-applications-module~modules-pages-landing-page-l~b924cdec-es2015.js","sourcesContent":["import { Component, Inject, OnInit, Optional, ViewChild } from '@angular/core';\r\nimport { ENDPOINTS, COMMON_FUNCTION, STATUSES, USER_ROLES, YES_NO_OPTION } from '@shared';\r\nimport { Company } from '@models';\r\nimport { ApiService, SweetAlertService, DataStorageService } from '@services';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\r\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { AddressService } from '../../../../core/services/address/address.service';\r\nimport { ValidateFieldService } from 'app/core/services/validate-field.service';\r\n\r\n@Component({\r\n  selector: 'app-add-company',\r\n  templateUrl: './add-company.component.html',\r\n  styleUrls: ['./add-company.component.scss']\r\n})\r\nexport class AddCompanyComponent implements OnInit {\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  @ViewChild(MatTable, { static: false }) table: MatTable<Company>;\r\n  dataSource: MatTableDataSource<Company>;\r\n  displayedColumns: string[] = ['companyName', 'companyTelephoneNo', 'companyFaxNo', 'companyTin', 'address'];\r\n\r\n  countryList = [];\r\n  companyList = [];\r\n  affiliationList = [];\r\n  regionsList = [];\r\n  provinceList = [];\r\n  cityMunicipalityList = [];\r\n  barangayList = [];\r\n  statusList = [...STATUSES];\r\n  yesNoList = [...YES_NO_OPTION];\r\n\r\n  company = new Company();\r\n  companyForm: FormGroup;\r\n  currentUser: any;\r\n  todayDate: Date = new Date();\r\n  id: any;\r\n  notForeignAddress = true;\r\n  isFromModal = false;\r\n  isUserRegistration = false;\r\n  showApproveRejectButton = false;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private addressService: AddressService,\r\n    private formBuilder: FormBuilder,\r\n    private dataStorage: DataStorageService,\r\n    private sweetAlertService: SweetAlertService,\r\n    public validateFieldService: ValidateFieldService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private matDialog: MatDialog,\r\n    @Optional() public dialogRef: MatDialogRef<AddCompanyComponent>,\r\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    if (data) {\r\n      if (data.dataForModal) {\r\n        const dataFromModal = data.dataForModal;\r\n\r\n        this.isFromModal = dataFromModal.isFromModal;\r\n        this.showApproveRejectButton = dataFromModal.isUpdate;\r\n\r\n        if (dataFromModal.isUpdate) {\r\n          this.company = dataFromModal.company\r\n        } else {\r\n          this.company.country = dataFromModal.country\r\n        }\r\n      }\r\n      this.isUserRegistration = data.isUserRegistration;\r\n    }\r\n\r\n    const additionalStatus = [\r\n      {\r\n        status: 'APPROVED'\r\n      }, {\r\n        status: 'DISAPPROVED'\r\n      }, {\r\n        status: 'FOR_APPROVAL'\r\n      }\r\n    ];\r\n    this.statusList.push(...additionalStatus);\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.currentUser = this.dataStorage.getUserAccount();\r\n    this.setFormValidator();\r\n    this.getCountries();\r\n    this.getAffiliationList();\r\n    this.id = Number(this.route.snapshot.paramMap.get('id'));\r\n    if (this.id !== 0) {\r\n      this.viewApplication();\r\n    }\r\n  }\r\n\r\n  viewApplication() {\r\n    this.apiService.findById(ENDPOINTS.company, this.id).subscribe((res: any) => {\r\n      this.company = res.responseData.data;\r\n      this.getAffiliationList();\r\n    });\r\n  }\r\n\r\n  getCountries() {\r\n    this.apiService.findAll(ENDPOINTS.countries).subscribe((res: any) => {\r\n      this.countryList = res.responseData.data;\r\n    });\r\n  }\r\n\r\n  getAffiliationList(): void {\r\n    this.apiService.findAll(ENDPOINTS.activeMembersAffiliation).subscribe((res: any) => {\r\n      this.affiliationList = res.responseData.data;\r\n    });\r\n  }\r\n\r\n\r\n  save(endpoint) {\r\n    if (!endpoint) {\r\n      endpoint = ENDPOINTS.company;\r\n    }\r\n\r\n    if (this.currentUser && (this.currentUser.userRole.name === USER_ROLES.ROLE_ADMIN || this.currentUser.userRole.name === USER_ROLES.ROLE_SUPER_ADMIN)) {\r\n      this.company.status = COMMON_FUNCTION.ACTIVE;\r\n    } else {\r\n      this.company.status = COMMON_FUNCTION.FOR_APPROVAL;\r\n    }\r\n\r\n    // if(this.notForeignAddress){\r\n    //   this.company.country = 'PHIL'\r\n    // }\r\n\r\n    if (this.isFromModal) {\r\n      this.company.status = COMMON_FUNCTION.FOR_APPROVAL;\r\n    }\r\n    this.company.delinquent = this.setDelinquent(this.company.delinquent);\r\n\r\n    this.apiService.save(endpoint, this.company).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.id = res.responseData.data.id;\r\n          this.company = res.responseData.data;\r\n          this.sweetAlertService.customSuccessMessage('Company successfully saved.');\r\n          if (this.isFromModal) {\r\n            this.dialogRef.close(this.company);\r\n          }\r\n          if (this.isUserRegistration) {\r\n            this.dialogRef.close(this.company);\r\n          }\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        // this.resetFormValidator();\r\n        if (!this.isFromModal && !this.isUserRegistration) {\r\n          this.router.navigate(['asc/page/company/update/', this.id]);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  getCompany(id): void {\r\n    this.apiService.findById(ENDPOINTS.company, id).subscribe((res: any) => {\r\n      if (res) {\r\n        this.company = res.responseData.data;\r\n        // this.addressService.getBarangay(res.responseData.data.barangayId).subscribe(\r\n        //   (res: any) => {\r\n\r\n        // this.company.region = res.responseData.data.cityMunicipalityDto.provinceDto.regionDto.regionId;\r\n        // this.company.province = res.responseData.data.cityMunicipalityDto.provinceDto.provinceId;\r\n        // this.company.cityMunicipality = res.responseData.data.cityMunicipalityDto.cityMunicipalityId;\r\n        // this.company.barangay = res.responseData.data.barangayId;\r\n\r\n        // this.getProvinces();\r\n        // this.getCityMunicipalities();\r\n        // this.getBarangays();\r\n        // });\r\n      }\r\n    });\r\n  }\r\n\r\n  update(endpoint) {\r\n    if (!endpoint) {\r\n      endpoint = ENDPOINTS.company;\r\n    }\r\n    this.company.delinquent = this.setDelinquent(this.company.delinquent);\r\n\r\n    if (this.company.status === 'APPROVED') {\r\n      this.company.status = 'ACTIVE';\r\n    }\r\n    this.apiService.update(endpoint, this.company).subscribe(\r\n      (res: any) => {\r\n        if (res !== undefined) {\r\n          this.sweetAlertService.success(res);\r\n        }\r\n      }, (err: any) => {\r\n        this.sweetAlertService.error(err);\r\n      }, () => {\r\n        // actions after subscription\r\n        this.cancel();\r\n        if (this.isFromModal) {\r\n          this.dialogRef.close(this.company);\r\n        }\r\n      });\r\n  }\r\n\r\n  setFormValidator(): void {\r\n    // if(this.notForeignAddress){\r\n    //   this.companyForm = this.formBuilder.group({\r\n    //     companyName: ['', Validators.required],\r\n    //     companyTelephoneNo: ['', Validators.required],\r\n    //     companyFaxNo: ['', Validators.required],\r\n    //     membersAffiliation: ['', Validators.required],\r\n    //     companyTin: ['', Validators.required],\r\n    //     // region: ['', Validators.required],\r\n    //     // province: ['', Validators.required],\r\n    //     // cityMunicipality: ['', Validators.required],\r\n    //     // barangay: ['', Validators.required],\r\n    //     completeAddress: ['', Validators.required]\r\n    //   });\r\n    // }else{\r\n    //   this.companyForm = this.formBuilder.group({\r\n    //     companyName: ['', Validators.required],\r\n    //     companyTelephoneNo: ['', Validators.required],\r\n    //     companyFaxNo: ['', Validators.required],\r\n    //     membersAffiliation: ['', Validators.required],\r\n    //     companyTin: ['', Validators.required],\r\n    //     country: ['', Validators.required],\r\n    //     foreignAddress: ['', Validators.required]\r\n    //   });\r\n    // }\r\n\r\n    this.companyForm = this.formBuilder.group({\r\n      companyName: ['', Validators.required],\r\n      companyMobileNo: ['', Validators.required],\r\n      companyTelephoneNo: ['', Validators.required],\r\n      companyTelephoneNo2: ['', Validators.required],\r\n      // companyFaxNo: ['', Validators.required],\r\n      membersAffiliation: ['', Validators.required],\r\n      contactPersonName: ['', Validators.required],\r\n      contactPersonEmail: ['', [Validators.required, Validators.pattern('[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}')]],\r\n      companyTin: ['', Validators.required],\r\n      country: ['', Validators.required],\r\n      completeAddress: ['', Validators.required],\r\n      voucherFund: [''],\r\n      status: [''],\r\n      delinquent: ['']\r\n    });\r\n  }\r\n\r\n  cancel(): void {\r\n    if (!this.isFromModal) {\r\n      if (this.company.id) {\r\n        this.router.navigate(['/asc/page/company/lists']);\r\n      } else {\r\n        this.company = new Company();\r\n        this.companyForm.markAsUntouched();\r\n        this.companyForm.markAsPristine();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // getRegions() {\r\n  //   this.addressService.getRegions().subscribe(\r\n  //     (res: any) => {\r\n  //       this.regionsList = res;\r\n  //     });\r\n  // }\r\n\r\n  // getProvinces() {\r\n  //   this.addressService.getProvinces(this.company.region.regionId).subscribe(\r\n  //     (res: any) => {\r\n  //       this.provinceList = res.responseData.data;\r\n  //     });\r\n  // }\r\n\r\n  // getCityMunicipalities() {\r\n  //   this.addressService.getCityMunicipalities(this.company.province.provinceId).subscribe(\r\n  //     (res: any) => {\r\n  //       this.cityMunicipalityList = res.responseData.data;\r\n  //     });\r\n  // }\r\n\r\n  // getBarangays() {\r\n  //   this.addressService.getBarangays(this.company.cityMunicipality.cityMunicipalityId).subscribe(\r\n  //     (res: any) => {\r\n  //       this.barangayList = res.responseData.data;\r\n  //     });\r\n  // }\r\n\r\n  isForeignAddress(): void {\r\n    this.notForeignAddress = !this.notForeignAddress;\r\n    // this.setFormValidator();\r\n  }\r\n\r\n  compareMembersAffiliation(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.description === selected.description;\r\n    }\r\n  }\r\n\r\n  compareCountry(value: any, selected: any): boolean {\r\n    if (value && selected) {\r\n      return value.id === selected.id;\r\n    }\r\n  }\r\n\r\n  compareDelinquent(value: any, selected: any): boolean {\r\n    if (value) {\r\n      return value === (selected ? 'Yes' : 'No');\r\n    }\r\n  }\r\n\r\n  approve() {\r\n    this.company.status = 'APPROVED';\r\n    this.save(ENDPOINTS.approveCompany);\r\n  }\r\n\r\n  reject() {\r\n    this.company.status = 'DISAPPROVED';\r\n    this.update('');\r\n  }\r\n\r\n  closeModal() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  setDelinquent(delinquentVal: any): boolean {\r\n    return delinquentVal === 'Yes' ? true : false;\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvcGFnZXMvY29tcGFueS9hZGQtY29tcGFueS9hZGQtY29tcGFueS5jb21wb25lbnQuc2NzcyJ9 */\";","export default \"<form>\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-12 title\\\">\\r\\n        <mat-label>\\r\\n          <mat-icon>apartment</mat-icon> Company\\r\\n        </mat-label>\\r\\n        <button class=\\\"button-right\\\" *ngIf=\\\"!isFromModal && !isUserRegistration\\\" mat-raised-button color=\\\"primary\\\"\\r\\n          [routerLink]=\\\"['/asc/page/company/lists']\\\">\\r\\n          <mat-icon>list</mat-icon> VIEW COMPANIES\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n    <hr>\\r\\n\\r\\n\\r\\n    <form [formGroup]=\\\"companyForm\\\">\\r\\n      <div class=\\\"row fields\\\">\\r\\n        <h4>\\r\\n          <mat-icon>label_important</mat-icon> Company Information\\r\\n        </h4>\\r\\n        <div class=\\\"row\\\">\\r\\n          <mat-form-field class=\\\"col-md-7\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Company Name <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.companyName\\\" name=\\\"companyName\\\" formControlName=\\\"companyName\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-5\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Member Affiliation <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <mat-select [(ngModel)]=\\\"company.membersAffiliation\\\" name=\\\"membersAffiliation\\\"\\r\\n              [compareWith]=\\\"compareMembersAffiliation\\\" formControlName=\\\"membersAffiliation\\\">\\r\\n              <mat-option *ngFor=\\\"let i of affiliationList\\\" [value]=\\\"i\\\">\\r\\n                {{i.description}}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-3\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Mobile Number <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.companyMobileNo\\\" name=\\\"companyMobileNo\\\" placeholder=\\\"09xxxxxxxxx\\\"\\r\\n              formControlName=\\\"companyMobileNo\\\" (keydown)=\\\"validateFieldService.numbersOnly($event)\\\" maxlength=\\\"11\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-3\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Telephone Number <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.companyTelephoneNo\\\" name=\\\"companyTelephoneNo\\\"\\r\\n              formControlName=\\\"companyTelephoneNo\\\" (keydown)=\\\"validateFieldService.numbersOnly($event)\\\" maxlength=\\\"11\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-3\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Alternate Telephone Number <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.companyTelephoneNo2\\\" name=\\\"companyTelephoneNo2\\\"\\r\\n              formControlName=\\\"companyTelephoneNo2\\\" (keydown)=\\\"validateFieldService.numbersOnly($event)\\\" maxlength=\\\"11\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n          <!-- <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Fax Number</mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.companyFaxNo\\\" name=\\\"companyFaxNo\\\" formControlName=\\\"companyFaxNo\\\">\\r\\n          </mat-form-field> -->\\r\\n          <mat-form-field class=\\\"col-md-3\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>TIN <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.companyTin\\\" name=\\\"companyTin\\\" formControlName=\\\"companyTin\\\"\\r\\n              (keydown)=\\\"validateFieldService.numbersOnly($event)\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n          <!-- <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Voucher Fund</mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.voucherFund\\\" name=\\\"voucherFund\\\" formControlName=\\\"voucherFund\\\">\\r\\n          </mat-form-field> -->\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Accounting Representative: <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.contactPersonName\\\" name=\\\"contactPersonName\\\"\\r\\n              formControlName=\\\"contactPersonName\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Representative's Email Address: <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <input matInput [(ngModel)]=\\\"company.contactPersonEmail\\\" type=\\\"email\\\" name=\\\"contactPersonEmail\\\" email\\r\\n              formControlName=\\\"contactPersonEmail\\\">\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\"\\r\\n            *ngIf=\\\"(currentUser?.userRole?.name==='ROLE_ADMIN'||currentUser?.userRole?.name==='ROLE_SUPER_ADMIN'||currentUser?.userRole?.name==='ROLE_ENCODER') && !isUserRegistration\\\">\\r\\n            <mat-label>Delinquent</mat-label>\\r\\n            <mat-select [(ngModel)]=\\\"company.delinquent\\\" name=\\\"delinquent\\\" formControlName=\\\"delinquent\\\"\\r\\n              [compareWith]=\\\"compareDelinquent\\\">\\r\\n              <mat-option *ngFor=\\\"let i of yesNoList\\\" [value]=\\\"i\\\">\\r\\n                {{ i }}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\"\\r\\n            *ngIf=\\\"(currentUser?.userRole?.name==='ROLE_ADMIN'||currentUser?.userRole?.name==='ROLE_SUPER_ADMIN'||currentUser?.userRole?.name==='ROLE_ENCODER') && company.id\\\">\\r\\n            <mat-label>Status</mat-label>\\r\\n            <mat-select [(ngModel)]=\\\"company.status\\\" name=\\\"status\\\" formControlName=\\\"status\\\">\\r\\n              <mat-option *ngFor=\\\"let i of statusList\\\" [value]=\\\"i.status\\\">\\r\\n                {{i?.status?.replace('_',' ')}}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n\\r\\n\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <!-- <div class=\\\"row\\\">\\r\\n\\r\\n          <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Member Affiliation</mat-label>\\r\\n            <mat-select [(ngModel)]=\\\"company.membersAffiliation\\\" name=\\\"membersAffiliation\\\"\\r\\n              [compareWith]=\\\"compareMembersAffiliation\\\" formControlName=\\\"membersAffiliation\\\" matNativeControl required>\\r\\n              <mat-option *ngFor=\\\"let i of affiliationList\\\" [value]=\\\"i\\\">\\r\\n                {{i.description}}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n        </div> -->\\r\\n      </div>\\r\\n\\r\\n\\r\\n\\r\\n      <div class=\\\"row fields\\\">\\r\\n        <h4>\\r\\n          <mat-icon>label_important</mat-icon> Address\\r\\n        </h4>\\r\\n\\r\\n        <!-- <div class=\\\"row\\\">\\r\\n          <mat-slide-toggle color=\\\"warn\\\" (click)=\\\"isForeignAddress()\\\"><b>Foreign Address?</b></mat-slide-toggle>\\r\\n        </div><br><br> -->\\r\\n\\r\\n\\r\\n        <!-- <div *ngIf=\\\"notForeignAddress\\\"> -->\\r\\n        <div class=\\\"row\\\">\\r\\n          <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Country </mat-label>\\r\\n            <!-- <input matInput readonly [(ngModel)]=\\\"company.country\\\" formControlName=\\\"country\\\"> -->\\r\\n            <mat-select [(ngModel)]=\\\"company.country\\\" name=\\\"country\\\" [compareWith]=\\\"compareCountry\\\"\\r\\n              formControlName=\\\"country\\\" matNativeControl required>\\r\\n              <mat-option *ngFor=\\\"let i of countryList\\\" [value]=\\\"i\\\">\\r\\n                {{i.code}} - {{i.name}}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\">\\r\\n            <mat-label>Company Address <span class=\\\"required-field\\\">*</span></mat-label>\\r\\n            <textarea matInput [(ngModel)]=\\\"company.completeAddress\\\" name=\\\"completeAddress\\\"\\r\\n              formControlName=\\\"completeAddress\\\"></textarea>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n\\r\\n        <!-- <div class=\\\"row\\\">\\r\\n            <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Region</mat-label>\\r\\n              <mat-select [(ngModel)]=\\\"company.region\\\" (selectionChange)=\\\"getProvinces()\\\" name=\\\"region\\\"\\r\\n                formControlName=\\\"region\\\" matNativeControl required>\\r\\n                <mat-option *ngFor=\\\"let i of regionsList\\\" [value]=\\\"i\\\">\\r\\n                  {{i.regionName}}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Province</mat-label>\\r\\n              <mat-select [(ngModel)]=\\\"company.province\\\" (selectionChange)=\\\"getCityMunicipalities()\\\"\\r\\n                [disabled]=\\\"!company.region\\\" name=\\\"province\\\" formControlName=\\\"province\\\" matNativeControl required>\\r\\n                <mat-option *ngFor=\\\"let i of provinceList\\\" [value]=\\\"i\\\">\\r\\n                  {{i.provinceName}}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"row\\\">\\r\\n            <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>City/Municipality</mat-label>\\r\\n              <mat-select [(ngModel)]=\\\"company.cityMunicipality\\\" (selectionChange)=\\\"getBarangays()\\\"\\r\\n                [disabled]=\\\"!company.province\\\" name=\\\"cityMunicipality\\\" formControlName=\\\"cityMunicipality\\\"\\r\\n                matNativeControl required>\\r\\n                <mat-option *ngFor=\\\"let i of cityMunicipalityList\\\" [value]=\\\"i\\\">\\r\\n                  {{i.cityMunicipalityName}}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field class=\\\"col-md-6\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Barangay</mat-label>\\r\\n              <mat-select [(ngModel)]=\\\"company.barangay\\\" [disabled]=\\\"!company.cityMunicipality\\\" name=\\\"barangay\\\"\\r\\n                formControlName=\\\"barangay\\\" matNativeControl required>\\r\\n                <mat-option *ngFor=\\\"let i of barangayList\\\" [value]=\\\"i\\\">\\r\\n                  {{i.barangayName}}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n          </div> -->\\r\\n        <!-- </div> -->\\r\\n\\r\\n        <!-- <div *ngIf=\\\"!notForeignAddress\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <mat-form-field class=\\\"col-md-4\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Country</mat-label>\\r\\n              <input matInput [(ngModel)]=\\\"company.country\\\" name=\\\"country\\\" formControlName=\\\"country\\\">\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"col-md-8\\\" appearance=\\\"outline\\\">\\r\\n              <mat-label>Foreign Address</mat-label>\\r\\n              <input matInput [(ngModel)]=\\\"company.foreignAddress\\\" name=\\\"foreignAddress\\\"\\r\\n                formControlName=\\\"foreignAddress\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div> -->\\r\\n\\r\\n      </div>\\r\\n    </form>\\r\\n    <hr>\\r\\n    <br>\\r\\n\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"!isFromModal || !showApproveRejectButton\\\">\\r\\n      <div class=\\\"col-md-12\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"save('')\\\" *ngIf=\\\"!company?.id\\\"\\r\\n          [disabled]=\\\"!(companyForm.valid)\\\">\\r\\n          <mat-icon>save</mat-icon> SAVE\\r\\n        </button>\\r\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"update('')\\\" *ngIf=\\\"company?.id\\\"\\r\\n          [disabled]=\\\"!(companyForm.valid)\\\">\\r\\n          <mat-icon>task_alt </mat-icon> UPDATE\\r\\n        </button>\\r\\n        <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"approve()\\\" *ngIf=\\\"isFromModal && showApproveRejectButton\\\">\\r\\n          <i class=\\\"material-icons color__white\\\">verified</i> APPROVE\\r\\n        </button>\\r\\n        <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"reject()\\\" *ngIf=\\\"isFromModal && showApproveRejectButton\\\">\\r\\n          <i class=\\\"material-icons color__white\\\">unpublished</i> REJECT\\r\\n        </button>\\r\\n        <button mat-raised-button color=\\\"warn\\\" (click)=\\\"cancel()\\\"\\r\\n          *ngIf=\\\"company?.id || company?.companyName || company?.companyTelephoneNo || company?.companyTin\\\">\\r\\n          <!-- <button mat-raised-button color=\\\"warn\\\" (click)=\\\"cancel()\\\"\\r\\n          *ngIf=\\\"company?.id || company?.companyName || company?.companyTelephoneNo || company?.companyFaxNo || company?.companyTin\\\"> -->\\r\\n          <mat-icon>{{ company?.id ? 'cancel' : 'refresh' }}</mat-icon> {{ company?.id ? 'CANCEL' : 'RESET' }}\\r\\n        </button>\\r\\n        <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"closeModal()\\\" *ngIf=\\\"isFromModal\\\">\\r\\n          <i class=\\\"material-icons color__white\\\">close</i> CLOSE\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div *ngIf=\\\"isFromModal && showApproveRejectButton\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"update('')\\\" *ngIf=\\\"company?.id\\\"\\r\\n        [disabled]=\\\"!(companyForm.valid)\\\">\\r\\n        <mat-icon>task_alt </mat-icon> UPDATE\\r\\n      </button>\\r\\n      <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"approve()\\\">\\r\\n        <i class=\\\"material-icons color__white\\\">verified</i> APPROVE\\r\\n      </button>\\r\\n      <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"reject()\\\">\\r\\n        <i class=\\\"material-icons color__white\\\">unpublished</i> REJECT\\r\\n      </button>\\r\\n      <button mat-raised-button class=\\\"button-red\\\" (click)=\\\"closeModal()\\\">\\r\\n        <i class=\\\"material-icons color__white\\\">close</i> CLOSE\\r\\n      </button>\\r\\n    </div>\\r\\n  </div>\\r\\n</form>\\r\\n\";","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ENDPOINTS } from '@shared';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class AddressService {\r\n\r\n    constructor(\r\n        private http: HttpClient\r\n    ) { }\r\n\r\n    getRegions() {\r\n        return this.http.get(`${ENDPOINTS.regions}`);\r\n    }\r\n\r\n    getProvinces(regionId) {\r\n        return this.http.get(`${ENDPOINTS.provinces}/region-id/${regionId}`);\r\n    }\r\n\r\n    getCityMunicipalities(provinceId) {\r\n        return this.http.get(`${ENDPOINTS.cityMunicipalities}/province-id/${provinceId}`);\r\n    }\r\n\r\n    getBarangays(cityMunicipalityId) {\r\n        return this.http.get(`${ENDPOINTS.barangays}/city-municipality-id/${cityMunicipalityId}`);\r\n    }\r\n\r\n    getBarangay(barangayId) {\r\n        return this.http.get(`${ENDPOINTS.barangays}/barangay-id/${barangayId}`);\r\n    }\r\n\r\n}"],"sourceRoot":"webpack:///"}